<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MasterYangBlog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://masteryang4.github.io/"/>
  <updated>2020-06-07T15:08:37.885Z</updated>
  <id>https://masteryang4.github.io/</id>
  
  <author>
    <name>Yang4</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Redis常见问题及扩展</title>
    <link href="https://masteryang4.github.io/2020/06/07/Redis%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E5%8F%8A%E6%89%A9%E5%B1%95/"/>
    <id>https://masteryang4.github.io/2020/06/07/Redis%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E5%8F%8A%E6%89%A9%E5%B1%95/</id>
    <published>2020-06-07T15:04:34.000Z</published>
    <updated>2020-06-07T15:08:37.885Z</updated>
    
    <content type="html"><![CDATA[<h1 id="缓存穿透、缓存雪崩、缓存击穿"><a href="#缓存穿透、缓存雪崩、缓存击穿" class="headerlink" title="缓存穿透、缓存雪崩、缓存击穿"></a>缓存穿透、缓存雪崩、缓存击穿</h1><p>1、缓存穿透是指查询一个一定不存在的数据。由于缓存命不中时会去查询数据库，查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到数据库去查询，造成缓存穿透。</p><p>解决方案：</p><ul><li><p>是将空对象也缓存起来，并给它设置一个很短的过期时间，最长不超过5分钟</p></li><li><p>采用<strong>布隆过滤器</strong>，将所有可能存在的数据<strong>哈希</strong>到一个足够大的bitmap中，一个一定不存在的数据会被这个bitmap拦截掉，从而避免了对底层存储系统的查询压力</p></li></ul><blockquote><p>布隆过滤器(bloom filter)： <a href="https://zhuanlan.zhihu.com/p/72378274" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/72378274</a> </p></blockquote><p>2、如果缓存集中在一段时间内失效，发生大量的缓存穿透，所有的查询都落在数据库上，就会造成缓存雪崩。</p><p>解决方案：</p><ul><li>尽量让失效的时间点不分布在同一个时间点</li></ul><p>3、缓存击穿，是指一个key非常热点，在不停的扛着大并发，当这个key在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库，就像在一个屏障上凿开了一个洞。</p><p>解决方案：</p><ul><li>可以设置key永不过期</li></ul><h1 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h1><p>主从复制中反客为主的自动版，如果主机Down掉，哨兵会从从机中选择一台作为主机，并将它设置为其他从机的主机，而且如果原来的主机再次启动的话也会成为从机。</p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>string</td><td>字符串</td></tr><tr><td>list</td><td>可以重复的集合</td></tr><tr><td>set</td><td>不可以重复的集合</td></tr><tr><td>hash</td><td>类似于Map&lt;String,String&gt;</td></tr><tr><td>zset(sorted set）</td><td>带分数的set</td></tr></tbody></table><h1 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h1><p>1、RDB持久化：</p><ul><li><p>在指定的时间间隔内持久化</p></li><li><p>服务shutdown会自动持久化</p></li><li><p>输入bgsave也会持久化</p></li></ul><p>2、AOF :  以日志形式记录每个更新操作</p><ul><li><p>Redis重新启动时读取这个文件，重新执行新建、修改数据的命令恢复数据。</p></li><li><p>保存策略：</p><ul><li>推荐（并且也是默认）的措施为每秒持久化一次，这种策略可以兼顾速度和安全性。</li></ul></li><li><p>缺点：</p><ul><li>比起RDB占用更多的磁盘空间</li><li>恢复备份速度要慢</li><li>每次读写都同步的话，有一定的性能压力</li><li>存在个别Bug，造成恢复不能</li></ul></li></ul><p><strong>选择策略：</strong></p><p>官方推荐：</p><p>如果对数据不敏感，可以选单独用RDB；不建议单独用AOF，因为可能出现Bug;如果只是做纯内存缓存，可以都不用。</p><h1 id="悲观锁、乐观锁"><a href="#悲观锁、乐观锁" class="headerlink" title="悲观锁、乐观锁"></a>悲观锁、乐观锁</h1><p>悲观锁：</p><p>执行操作前假设当前的操作肯定（或有很大几率）会被打断（悲观）。基于这个假设，我们在做操作前就会把相关资源锁定，不允许自己执行期间有其他操作干扰。</p><p>乐观锁：</p><p>执行操作前假设当前操作不会被打断（乐观）。基于这个假设，我们在做操作前不会锁定资源，万一发生了其他操作的干扰，那么本次操作将被放弃。</p><p><strong>Redis使用的就是乐观锁。</strong></p><h1 id="推荐参考："><a href="#推荐参考：" class="headerlink" title="推荐参考："></a>推荐参考：</h1><blockquote><p><a href="https://zhuanlan.zhihu.com/p/89620471" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/89620471</a> </p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;缓存穿透、缓存雪崩、缓存击穿&quot;&gt;&lt;a href=&quot;#缓存穿透、缓存雪崩、缓存击穿&quot; class=&quot;headerlink&quot; title=&quot;缓存穿透、缓存雪崩、缓存击穿&quot;&gt;&lt;/a&gt;缓存穿透、缓存雪崩、缓存击穿&lt;/h1&gt;&lt;p&gt;1、缓存穿透是指查询一个一定不存在的数据。由
      
    
    </summary>
    
    
      <category term="大数据" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="Redis" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/Redis/"/>
    
    
      <category term="面试" scheme="https://masteryang4.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="大数据" scheme="https://masteryang4.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="Redis" scheme="https://masteryang4.github.io/tags/Redis/"/>
    
      <category term="布隆过滤器" scheme="https://masteryang4.github.io/tags/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    
      <category term="缓存" scheme="https://masteryang4.github.io/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>大数据常用框架源码编译</title>
    <link href="https://masteryang4.github.io/2020/06/07/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%B8%B8%E7%94%A8%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/"/>
    <id>https://masteryang4.github.io/2020/06/07/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%B8%B8%E7%94%A8%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/</id>
    <published>2020-06-07T12:28:17.000Z</published>
    <updated>2020-06-07T12:33:39.199Z</updated>
    
    <content type="html"><![CDATA[<h1 id="源码编译通用步骤"><a href="#源码编译通用步骤" class="headerlink" title="源码编译通用步骤"></a>源码编译通用步骤</h1><h2 id="一、搭建编译环境"><a href="#一、搭建编译环境" class="headerlink" title="一、搭建编译环境"></a>一、搭建编译环境</h2><p>一般编译环境为Linux + JDK + Maven，有些框架可能需要别的环境支持，一般都会注明，在后面细说。以下教程都是基于Linux + JDK8环境编译。</p><ul><li><p>Linux和JDK环境这里不再赘述</p></li><li><p>MAVEN环境搭建</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1. 从apache网站拉取tar包并解压</span></span><br><span class="line">MVNTAR=$(curl http://maven.apache.org/download.cgi | grep -E <span class="string">"&gt;apache-maven-.*bin\.tar\.gz&lt;"</span> | sed <span class="string">'s/.*a href="\(.*\)".*/\1/g'</span>)</span><br><span class="line">curl <span class="variable">$MVNTAR</span> | tar zxC /opt/module</span><br><span class="line">mv /opt/module/$(basename <span class="variable">$MVNTAR</span> | cut -d - -f 1,2,3) /opt/module/maven</span><br><span class="line"></span><br><span class="line"><span class="comment">#2. 配置环境变量</span></span><br><span class="line">vim /etc/profile.d/my_env.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加如下内容并保存退出</span></span><br><span class="line"><span class="built_in">export</span> M2_HOME=/opt/module/maven</span><br><span class="line"><span class="built_in">export</span> MAVEN_HOME=/opt/module/maven</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;MAVEN_HOME&#125;</span>/bin:<span class="variable">$&#123;PATH&#125;</span></span><br></pre></td></tr></table></figure></div><p>完成后重启Xshell会话</p></li></ul><h2 id="二、下载源码"><a href="#二、下载源码" class="headerlink" title="二、下载源码"></a>二、下载源码</h2><p>下载你想要编译的框架的源码。一般源码下载有两种方式：</p><ol><li>想编译的版本已经发布release版，但是由于兼容性原因需要重新编译。这种情况直接从框架官网下载源码包并解压即可。</li><li>想测试框架还没发布的最新功能。此时从git托管服务器拉取最新源码，这时，我们需要git环境</li></ol><ul><li><p>Git环境搭建</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y epel-release</span><br><span class="line">sudo yum install -y git</span><br></pre></td></tr></table></figure></div></li><li><p>到 <a href="https://git-wip-us.apache.org/repos/asf" target="_blank" rel="noopener">https://git-wip-us.apache.org/repos/asf</a> 查看想要编译的框架的git服务器，拉取源码(以Hive为例)</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#新建源码存储目录</span></span><br><span class="line">mkdir -p /opt/software/<span class="built_in">source</span></span><br><span class="line"><span class="built_in">cd</span> /opt/software/<span class="built_in">source</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#拉取源码</span></span><br><span class="line">git <span class="built_in">clone</span> https://git-wip-us.apache.org/repos/asf/hive.git</span><br></pre></td></tr></table></figure></div></li><li><p>进入拉取的源码目录，切换到自己想要的分支</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看所有本地和远程分支，这里也可以切换到之前版本的分支</span></span><br><span class="line"><span class="built_in">cd</span> hive</span><br><span class="line">git branch -a</span><br><span class="line"></span><br><span class="line"><span class="comment">#新建本地分支同步远程分支</span></span><br><span class="line">git checkout -b 3.1 origin/branch-3.1</span><br></pre></td></tr></table></figure></div></li><li><p>如果想切换到特定release的源码，使用git tag命令</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看所有tag</span></span><br><span class="line">git tag</span><br><span class="line"></span><br><span class="line"><span class="comment">#切换到想要的tag，这里以release-3.1.2为例</span></span><br><span class="line">git checkout rel/release-3.1.2</span><br></pre></td></tr></table></figure></div></li></ul><h2 id="三、查看编译说明"><a href="#三、查看编译说明" class="headerlink" title="三、查看编译说明"></a>三、查看编译说明</h2><p>一般来说，源码根目录都会有building.txt之类的文件作为编译说明，如果没有找到，也可以去官网查看编译说明。说明里一般都会注明前置要求，例如一些额外的编译环境要求等。</p><p>Hive没有前置要求，我们直接进入第四步</p><h2 id="四、对源码做必要修改"><a href="#四、对源码做必要修改" class="headerlink" title="四、对源码做必要修改"></a>四、对源码做必要修改</h2><p>一般我们只有在框架不兼容的情况下我们需要重新编译，不兼容一般是由于框架依赖版本不一致造成的，一般我们只需要编辑框架的pom.xml文件修改依赖版本即可。但是有些依赖新版本和旧版本不兼容，此时我们就需要对源码进行更多的修改。这些修改最好在IDE中进行。</p><p>Hive的guava版本和Hadoop 3.1.3的不兼容，我们修改其为27.0-jre</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">将</span><br><span class="line"><span class="tag">&lt;<span class="name">guava.version</span>&gt;</span>19.0<span class="tag">&lt;/<span class="name">guava.version</span>&gt;</span></span><br><span class="line">修改为</span><br><span class="line"><span class="tag">&lt;<span class="name">guava.version</span>&gt;</span>27.0-jre<span class="tag">&lt;/<span class="name">guava.version</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>这个依赖新老版本就不兼容，修改版本后我们需要对源码进行必要修改。详细修改步骤会在另外一篇教程中讲述</p><h2 id="五、编译"><a href="#五、编译" class="headerlink" title="五、编译"></a>五、编译</h2><p>准备工作全部做完，最后我们开始编译。一般的编译命令为：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package -Pdist -DskipTests -Dmaven.javadoc.skip=<span class="literal">true</span></span><br></pre></td></tr></table></figure></div><p>然后静待编译完成。这个过程会比较久，而且会从maven官网拉取大量jar包，所以要保证网络状况良好。</p><p>编译完成的Tar包的位置，各个框架都不一样，我们可以用下面的命令查找</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find ./ -name *.tar.gz</span><br></pre></td></tr></table></figure></div><h1 id="Hive编译"><a href="#Hive编译" class="headerlink" title="Hive编译"></a>Hive编译</h1><ul><li>拉取源码</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/software/<span class="built_in">source</span></span><br><span class="line">git <span class="built_in">clone</span> https://git-wip-us.apache.org/repos/asf/hive.git</span><br></pre></td></tr></table></figure></div><ul><li>修改pom.xml，将guava的版本改为如下版本</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;guava.version&gt;27.0-jre&lt;&#x2F;guava.version&gt;</span><br></pre></td></tr></table></figure></div><ul><li><p>修改以下文件中关于 com.google.common.util.concurrent.Futures#addCallback 的调用</p><ul><li>src\java\org\apache\hadoop\hive\llap\AsyncPbRpcProxy.java</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//173行</span></span><br><span class="line">Futures.addCallback(</span><br><span class="line">    future,</span><br><span class="line">    <span class="keyword">new</span> ResponseCallback&lt;U&gt;(</span><br><span class="line">        request.getCallback(), nodeId, <span class="keyword">this</span>)</span><br><span class="line">    ,executor);</span><br><span class="line"></span><br><span class="line"><span class="comment">//278行</span></span><br><span class="line">Futures.addCallback(requestManagerFuture, <span class="keyword">new</span> FutureCallback&lt;Void&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(Void result)</span> </span>&#123;</span><br><span class="line">        LOG.info(<span class="string">"RequestManager shutdown"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!(t <span class="keyword">instanceof</span> CancellationException)) &#123;</span><br><span class="line">            LOG.warn(<span class="string">"RequestManager shutdown with error"</span>, t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, requestManagerExecutor);</span><br></pre></td></tr></table></figure></div><ul><li>src\java\org\apache\hadoop\hive\llap\daemon\impl\AMReporter.java</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//162行</span></span><br><span class="line">Futures.addCallback(queueLookupFuture, <span class="keyword">new</span> FutureCallback&lt;Void&gt;() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(Void result)</span> </span>&#123;</span><br><span class="line">    LOG.info(<span class="string">"AMReporter QueueDrainer exited"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (t <span class="keyword">instanceof</span> CancellationException &amp;&amp; isShutdown.get()) &#123;</span><br><span class="line">      LOG.info(<span class="string">"AMReporter QueueDrainer exited as a result of a cancellation after shutdown"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      LOG.error(<span class="string">"AMReporter QueueDrainer exited with error"</span>, t);</span><br><span class="line">      Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), t);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, queueLookupExecutor);</span><br><span class="line"></span><br><span class="line"><span class="comment">//266行</span></span><br><span class="line">Futures.addCallback(future, <span class="keyword">new</span> FutureCallback&lt;Void&gt;() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(Void result)</span> </span>&#123;</span><br><span class="line">    LOG.info(<span class="string">"Sent taskKilled for &#123;&#125;"</span>, taskAttemptId);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">    LOG.warn(<span class="string">"Failed to send taskKilled for &#123;&#125;. The attempt will likely time out."</span>,</span><br><span class="line">        taskAttemptId);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, executor);</span><br><span class="line"></span><br><span class="line"><span class="comment">//331行</span></span><br><span class="line">Futures.addCallback(future, <span class="keyword">new</span> FutureCallback&lt;Void&gt;() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(Void result)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Nothing to do.</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">    QueryIdentifier currentQueryIdentifier = amNodeInfo.getQueryIdentifier();</span><br><span class="line">    amNodeInfo.setAmFailed(<span class="keyword">true</span>);</span><br><span class="line">    LOG.warn(<span class="string">"Heartbeat failed to AM &#123;&#125;. Marking query as failed. query=&#123;&#125;"</span>,</span><br><span class="line">      amNodeInfo.amNodeId, currentQueryIdentifier, t);</span><br><span class="line">    queryFailedHandler.queryFailed(currentQueryIdentifier);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, executor);</span><br></pre></td></tr></table></figure></div><ul><li>src\java\org\apache\hadoop\hive\llap\daemon\impl\LlapTaskReporter.java</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//131行</span></span><br><span class="line">Futures.addCallback(future, <span class="keyword">new</span> HeartbeatCallback(errorReporter), heartbeatExecutor);</span><br></pre></td></tr></table></figure></div><ul><li>src\java\org\apache\hadoop\hive\llap\daemon\impl\TaskExecutorService.java</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//178行</span></span><br><span class="line">Futures.addCallback(future, <span class="keyword">new</span> WaitQueueWorkerCallback(), executionCompletionExecutorServiceRaw);</span><br><span class="line"></span><br><span class="line"><span class="comment">//692行</span></span><br><span class="line">Futures.addCallback(future, wrappedCallback, executionCompletionExecutorService);</span><br></pre></td></tr></table></figure></div><ul><li>src\java\org\apache\hadoop\hive\llap\tezplugins\LlapTaskSchedulerService.java</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//747行</span></span><br><span class="line">Futures.addCallback(nodeEnablerFuture, <span class="keyword">new</span> LoggingFutureCallback(<span class="string">"NodeEnablerThread"</span>, LOG),nodeEnabledExecutor);</span><br><span class="line"></span><br><span class="line"><span class="comment">//751行</span></span><br><span class="line">Futures.addCallback(delayedTaskSchedulerFuture,</span><br><span class="line">    <span class="keyword">new</span> LoggingFutureCallback(<span class="string">"DelayedTaskSchedulerThread"</span>, LOG),delayedTaskSchedulerExecutor);</span><br><span class="line"></span><br><span class="line"><span class="comment">//755行</span></span><br><span class="line">Futures.addCallback(schedulerFuture, <span class="keyword">new</span> LoggingFutureCallback(<span class="string">"SchedulerThread"</span>, LOG),schedulerExecutor);</span><br></pre></td></tr></table></figure></div><ul><li>src\java\org\apache\hadoop\hive\ql\exec\tez\WorkloadManager.java</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1089行</span></span><br><span class="line">Futures.addCallback(future, FATAL_ERROR_CALLBACK, timeoutPool);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1923行</span></span><br><span class="line">Futures.addCallback(getFuture, <span class="keyword">this</span>,timeoutPool);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1977行</span></span><br><span class="line">Futures.addCallback(waitFuture, <span class="keyword">this</span>, timeoutPool);</span><br></pre></td></tr></table></figure></div><ul><li>src\test\org\apache\hadoop\hive\ql\exec\tez\SampleTezSessionState.java</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//121行</span></span><br><span class="line">Futures.addCallback(waitForAmRegFuture, <span class="keyword">new</span> FutureCallback&lt;Boolean&gt;() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(Boolean result)</span> </span>&#123;</span><br><span class="line">    future.set(session);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">    future.setException(t);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,timeoutPool);</span><br></pre></td></tr></table></figure></div></li><li><p>编译</p></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package -Pdist -DskipTests -Dmaven.javadoc.skip=<span class="literal">true</span></span><br></pre></td></tr></table></figure></div><h1 id="Tez编译"><a href="#Tez编译" class="headerlink" title="Tez编译"></a>Tez编译</h1><ul><li><p>拉取源码</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/software/<span class="built_in">source</span></span><br><span class="line">git <span class="built_in">clone</span> https://git-wip-us.apache.org/repos/asf/tez.git</span><br></pre></td></tr></table></figure></div></li><li><p>安装Tez必要环境</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y protobuf protobuf-static protobuf-devel</span><br></pre></td></tr></table></figure></div></li><li><p>编译</p><p>查看编译说明，按照编译说明用下列命令编译</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> tez</span><br><span class="line">mvn clean package -Dhadoop.version=3.1.3 -Phadoop28 -P\!hadoop27 -DskipTests -Dmaven.javadoc.skip=<span class="literal">true</span></span><br></pre></td></tr></table></figure></div></li></ul><h1 id="Phoenix编译"><a href="#Phoenix编译" class="headerlink" title="Phoenix编译"></a>Phoenix编译</h1><ul><li>拉取源码</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/software/<span class="built_in">source</span></span><br><span class="line">git <span class="built_in">clone</span> https://git-wip-us.apache.org/repos/asf/phoenix.git</span><br></pre></td></tr></table></figure></div><ul><li>编译</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> phoenix</span><br><span class="line">mvn clean package -DskipTests -Dhbase.profile=2.2 -Dhbase.version=2.2.4</span><br></pre></td></tr></table></figure></div><h1 id="Spark编译"><a href="#Spark编译" class="headerlink" title="Spark编译"></a>Spark编译</h1><ul><li>去spark官网下载源码，解压到/opt/software/source</li><li>进入该目录，编译</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./dev/make-distribution.sh --name without-hive --tgz -Pyarn -Phadoop-3.1 -Dhadoop.version=3.1.3 -Pparquet-provided -Porc-provided -Phadoop-provided</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;源码编译通用步骤&quot;&gt;&lt;a href=&quot;#源码编译通用步骤&quot; class=&quot;headerlink&quot; title=&quot;源码编译通用步骤&quot;&gt;&lt;/a&gt;源码编译通用步骤&lt;/h1&gt;&lt;h2 id=&quot;一、搭建编译环境&quot;&gt;&lt;a href=&quot;#一、搭建编译环境&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="大数据" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="源码编译" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/"/>
    
    
      <category term="大数据" scheme="https://masteryang4.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="hive" scheme="https://masteryang4.github.io/tags/hive/"/>
    
      <category term="spark" scheme="https://masteryang4.github.io/tags/spark/"/>
    
      <category term="源码编译" scheme="https://masteryang4.github.io/tags/%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/"/>
    
      <category term="phoenix" scheme="https://masteryang4.github.io/tags/phoenix/"/>
    
      <category term="tez" scheme="https://masteryang4.github.io/tags/tez/"/>
    
  </entry>
  
  <entry>
    <title>HiveSQL之常用查询函数case</title>
    <link href="https://masteryang4.github.io/2020/05/26/HiveSQL%E4%B9%8B%E5%B8%B8%E7%94%A8%E6%9F%A5%E8%AF%A2%E5%87%BD%E6%95%B0case/"/>
    <id>https://masteryang4.github.io/2020/05/26/HiveSQL%E4%B9%8B%E5%B8%B8%E7%94%A8%E6%9F%A5%E8%AF%A2%E5%87%BD%E6%95%B0case/</id>
    <published>2020-05-26T15:53:58.000Z</published>
    <updated>2020-05-26T16:18:08.383Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关键词：CASE-WHEN-THEN-ELSE-END"><a href="#关键词：CASE-WHEN-THEN-ELSE-END" class="headerlink" title="关键词：CASE  WHEN  THEN  ELSE  END"></a>关键词：CASE  WHEN  THEN  ELSE  END</h1><h1 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h1><table><thead><tr><th>name</th><th>dept_id</th><th>sex</th></tr></thead><tbody><tr><td>悟空</td><td>A</td><td>男</td></tr><tr><td>大海</td><td>A</td><td>男</td></tr><tr><td>宋宋</td><td>B</td><td>男</td></tr><tr><td>凤姐</td><td>A</td><td>女</td></tr><tr><td>婷姐</td><td>B</td><td>女</td></tr><tr><td>婷婷</td><td>B</td><td>女</td></tr></tbody></table><h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>求出不同部门男女各多少人。结果如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A   2    1</span><br><span class="line">B   1    2</span><br></pre></td></tr></table></figure></div><h1 id="创建本地emp-sex-txt，导入数据"><a href="#创建本地emp-sex-txt，导入数据" class="headerlink" title="创建本地emp_sex.txt，导入数据"></a>创建本地emp_sex.txt，导入数据</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[ys@hadoop102 datas]$ vim emp_sex.txt</span><br><span class="line">悟空A男</span><br><span class="line">大海A男</span><br><span class="line">宋宋B男</span><br><span class="line">凤姐A女</span><br><span class="line">婷姐B女</span><br><span class="line">婷婷B女</span><br></pre></td></tr></table></figure></div><h1 id="创建hive表并导入数据"><a href="#创建hive表并导入数据" class="headerlink" title="创建hive表并导入数据"></a>创建hive表并导入数据</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp_sex(</span><br><span class="line"><span class="keyword">name</span> <span class="keyword">string</span>, </span><br><span class="line">dept_id <span class="keyword">string</span>, </span><br><span class="line">sex <span class="keyword">string</span>) </span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">"\t"</span>;</span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">'/opt/module/datas/emp_sex.txt'</span> <span class="keyword">into</span> <span class="keyword">table</span> emp_sex;</span><br></pre></td></tr></table></figure></div><h1 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">  dept_id,</span><br><span class="line">  <span class="keyword">sum</span>(<span class="keyword">case</span> sex <span class="keyword">when</span> <span class="string">'男'</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) male_count,</span><br><span class="line">  <span class="keyword">sum</span>(<span class="keyword">case</span> sex <span class="keyword">when</span> <span class="string">'女'</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) female_count</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">  emp_sex</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">  dept_id;</span><br></pre></td></tr></table></figure></div><ul><li>首先注意CASE  WHEN  THEN  ELSE  END的缺一不可</li><li><strong>也要注意<code>sum</code>函数的用法，<code>sum(条件)</code>是经常会用到的方法！！！</strong><ul><li><strong>比如<code>sum(if XXX)</code>就常在HiveSQL里面使用。</strong></li><li>例如：<code>sum(if(dt=&#39;2020-05-27&#39;, order_count,0 )) order_count</code>，本质其实是一样的。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;关键词：CASE-WHEN-THEN-ELSE-END&quot;&gt;&lt;a href=&quot;#关键词：CASE-WHEN-THEN-ELSE-END&quot; class=&quot;headerlink&quot; title=&quot;关键词：CASE  WHEN  THEN  ELSE  END&quot;&gt;&lt;/a&gt;关
      
    
    </summary>
    
    
      <category term="大数据" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="hive" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/hive/"/>
    
    
      <category term="易错点" scheme="https://masteryang4.github.io/tags/%E6%98%93%E9%94%99%E7%82%B9/"/>
    
      <category term="大数据" scheme="https://masteryang4.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="hive" scheme="https://masteryang4.github.io/tags/hive/"/>
    
      <category term="SQL" scheme="https://masteryang4.github.io/tags/SQL/"/>
    
      <category term="hivesql" scheme="https://masteryang4.github.io/tags/hivesql/"/>
    
  </entry>
  
  <entry>
    <title>一段有趣的spark_aggregate代码</title>
    <link href="https://masteryang4.github.io/2020/05/26/%E4%B8%80%E6%AE%B5%E6%9C%89%E8%B6%A3%E7%9A%84spark-aggregate%E4%BB%A3%E7%A0%81/"/>
    <id>https://masteryang4.github.io/2020/05/26/%E4%B8%80%E6%AE%B5%E6%9C%89%E8%B6%A3%E7%9A%84spark-aggregate%E4%BB%A3%E7%A0%81/</id>
    <published>2020-05-26T14:18:30.000Z</published>
    <updated>2020-05-29T14:14:17.186Z</updated>
    
    <content type="html"><![CDATA[<p>看到了一段非常有趣的关于spark中aggregate算子的代码，需要很细心才能给出正确答案。</p><p>在这里和大家分享。</p><h1 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">TrySpark</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> conf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">"aggTest"</span>).setMaster(<span class="string">"local[*]"</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br><span class="line">    <span class="keyword">val</span> rdd = sc.makeRDD(<span class="type">Array</span>(<span class="string">"12"</span>, <span class="string">"234"</span>, <span class="string">"345"</span>, <span class="string">"4567"</span>), <span class="number">2</span>)</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">val</span> str: <span class="type">String</span> = rdd.aggregate(<span class="string">"0"</span>)((a, b) =&gt; <span class="type">Math</span>.max(a.length, b.length).toString, (x, y) =&gt; x + y)</span><br><span class="line">    println(str)</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">val</span> str1: <span class="type">String</span> = rdd.aggregate(<span class="string">""</span>)((a, b) =&gt; <span class="type">Math</span>.min(a.length, b.length).toString, (x, y) =&gt; x + y)</span><br><span class="line">    println(str1)</span><br><span class="line">      </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="前方高能"><a href="#前方高能" class="headerlink" title="前方高能"></a>前方高能</h1><p>输出结果1</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">043</span><br><span class="line">11</span><br></pre></td></tr></table></figure></div><p>输出结果2</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">034</span><br><span class="line">11</span><br></pre></td></tr></table></figure></div><p>惊不惊喜，刺不刺激（手动狗头）。</p><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>aggregate：行动算子，意为【聚合】</p><p>函数签名</p><blockquote><p>def aggregate<code>[U: ClassTag]</code>(zeroValue: U)(seqOp: (U, T) =&gt; U, combOp: (U, U) =&gt; U): U</p></blockquote><p>函数说明</p><blockquote><p>分区的数据通过<strong>初始值</strong>和<strong>分区内</strong>的数据进行聚合，然后再和<strong>初始值</strong>进行<strong>分区间</strong>的数据聚合</p><ul><li>第一个括号内的参数为初始值</li><li>第二个括号中<ul><li>第一个参数为分区内要执行的函数，初始值和分区内元素依次<strong>聚合</strong></li><li>第二个参数为分区间要执行的函数，初始值和分区间元素依次<strong>聚合</strong></li></ul></li></ul></blockquote><p>代码详解：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> rdd = sc.makeRDD(<span class="type">Array</span>(<span class="string">"12"</span>, <span class="string">"234"</span>, <span class="string">"345"</span>, <span class="string">"4567"</span>), <span class="number">2</span>)</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rdd.aggregate(<span class="string">"0"</span>)((a, b) =&gt; <span class="type">Math</span>.max(a.length, b.length).toString, (x, y) =&gt; x + y)</span><br></pre></td></tr></table></figure></div><ul><li><p>首先注意rdd是两个分区，”12”, “234”一个分区，”345”, “4567”一个分区</p></li><li><p>执行分区内函数<code>Math.max(a.length, b.length).toString</code></p><ul><li>分区一<ul><li>“0”，“12”执行函数，输出“2”，【注意：函数后面有个toString】<strong>【聚合：上一步输出作为下一步输入】</strong></li><li>“2”，”234”执行函数，最终输出“3”</li></ul></li><li>分区二<ul><li>“0”，“345” =&gt; “3”</li><li>“3”，”4567” =&gt; 最终 “4”</li></ul></li></ul></li><li><p>执行分区间函数<code>(x, y) =&gt; x + y</code>，其实就是一个字符串拼接，但是因为<strong>分区</strong>的原因</p><ul><li>不一定哪个分区先执行完，所以会出现两种情况的字符串拼接：“034” or “043”</li></ul></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rdd.aggregate(<span class="string">""</span>)((a, b) =&gt; <span class="type">Math</span>.min(a.length, b.length).toString, (x, y) =&gt; x + y)</span><br></pre></td></tr></table></figure></div><ul><li><p>rdd是两个分区，”12”, “234”一个分区，”345”, “4567”一个分区</p></li><li><p>执行分区内函数<code>Math.min(a.length, b.length).toString</code></p><ul><li>分区一<ul><li>“”，“12”执行函数，输出“0”，【注意：函数后面有个toString】<strong>【聚合：上一步输出作为下一步输入】</strong></li><li>“0”，”234”执行函数，最终输出“1”，<strong>【注意：“0”的长度是1】</strong></li></ul></li><li>分区二<ul><li>“”，“345” =&gt; “0”</li><li>“0”，”4567” =&gt; 最终 “1”</li></ul></li></ul></li><li><p>执行分区间函数<code>(x, y) =&gt; x + y</code>，字符串拼接，“”+“1”+“1” =&gt; “11”</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;看到了一段非常有趣的关于spark中aggregate算子的代码，需要很细心才能给出正确答案。&lt;/p&gt;
&lt;p&gt;在这里和大家分享。&lt;/p&gt;
&lt;h1 id=&quot;代码示例&quot;&gt;&lt;a href=&quot;#代码示例&quot; class=&quot;headerlink&quot; title=&quot;代码示例&quot;&gt;&lt;/a&gt;代码
      
    
    </summary>
    
    
      <category term="大数据" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="spark" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/spark/"/>
    
    
      <category term="易错点" scheme="https://masteryang4.github.io/tags/%E6%98%93%E9%94%99%E7%82%B9/"/>
    
      <category term="面试" scheme="https://masteryang4.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="大数据" scheme="https://masteryang4.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="spark" scheme="https://masteryang4.github.io/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>spark常用算子join</title>
    <link href="https://masteryang4.github.io/2020/05/25/spark%E5%B8%B8%E7%94%A8%E7%AE%97%E5%AD%90join/"/>
    <id>https://masteryang4.github.io/2020/05/25/spark%E5%B8%B8%E7%94%A8%E7%AE%97%E5%AD%90join/</id>
    <published>2020-05-25T11:52:38.000Z</published>
    <updated>2020-05-25T12:12:02.270Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>JOIN函数签名</p><blockquote><p>def join<code>[W]</code>(other: RDD[(K, W)]): RDD[(K, (V, W))]</p></blockquote><p>函数说明</p><ul><li>spark RDD <strong>转换算子</strong></li><li>(对照函数签名)在类型为(K,V)和(K,W)的RDD上调用，返回一个相同key对应的所有元素连接在一起的(K,(V,W))的RDD</li></ul><h1 id="重点示例"><a href="#重点示例" class="headerlink" title="重点示例"></a>重点示例</h1><ul><li>join</li><li>leftOuterJoin</li><li>rightOuterJoin</li><li>fullOuterJoin</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">JoinTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.创建SparkConf</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">"JoinTest"</span>).setMaster(<span class="string">"local[*]"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.创建SparkContext</span></span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.创建两个RDD</span></span><br><span class="line">    <span class="keyword">val</span> rdd1: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = sc.makeRDD(<span class="type">Array</span>((<span class="string">"a"</span>, <span class="number">1</span>), (<span class="string">"a"</span>, <span class="number">2</span>), (<span class="string">"b"</span>, <span class="number">1</span>), (<span class="string">"c"</span>, <span class="number">1</span>)))</span><br><span class="line">    <span class="keyword">val</span> rdd2: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = sc.makeRDD(<span class="type">Array</span>((<span class="string">"a"</span>, <span class="number">1</span>), (<span class="string">"b"</span>, <span class="number">1</span>), (<span class="string">"b"</span>, <span class="number">2</span>), (<span class="string">"d"</span>, <span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.测试各种JOIN【 注意返回值 】</span></span><br><span class="line">    <span class="keyword">val</span> result1: <span class="type">RDD</span>[(<span class="type">String</span>, (<span class="type">Int</span>, <span class="type">Int</span>))] = rdd1.join(rdd2)</span><br><span class="line">    <span class="keyword">val</span> result2: <span class="type">RDD</span>[(<span class="type">String</span>, (<span class="type">Int</span>, <span class="type">Option</span>[<span class="type">Int</span>]))] = rdd1.leftOuterJoin(rdd2)</span><br><span class="line">    <span class="keyword">val</span> result3: <span class="type">RDD</span>[(<span class="type">String</span>, (<span class="type">Option</span>[<span class="type">Int</span>], <span class="type">Int</span>))] = rdd1.rightOuterJoin(rdd2)</span><br><span class="line">    <span class="keyword">val</span> result4: <span class="type">RDD</span>[(<span class="type">String</span>, (<span class="type">Option</span>[<span class="type">Int</span>], <span class="type">Option</span>[<span class="type">Int</span>]))] = rdd1.fullOuterJoin(rdd2)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.打印</span></span><br><span class="line">    result1.foreach(println)</span><br><span class="line">    println(<span class="string">"======================&gt;&gt;&gt;"</span>)</span><br><span class="line">    result2.foreach(println)</span><br><span class="line">    println(<span class="string">"======================&gt;&gt;&gt;"</span>)</span><br><span class="line">    result3.foreach(println)</span><br><span class="line">    println(<span class="string">"======================&gt;&gt;&gt;"</span>)</span><br><span class="line">    result4.foreach(println)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6.关闭连接</span></span><br><span class="line">    sc.stop()</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>输出结果：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">(b,(1,1))</span><br><span class="line">(a,(1,1))</span><br><span class="line">(a,(2,1))</span><br><span class="line">(b,(1,2))</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;</span><br><span class="line">(c,(1,None))</span><br><span class="line">(a,(1,Some(1)))</span><br><span class="line">(a,(2,Some(1)))</span><br><span class="line">(b,(1,Some(1)))</span><br><span class="line">(b,(1,Some(2)))</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;</span><br><span class="line">(d,(None,1))</span><br><span class="line">(a,(Some(1),1))</span><br><span class="line">(a,(Some(2),1))</span><br><span class="line">(b,(Some(1),1))</span><br><span class="line">(b,(Some(1),2))</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;</span><br><span class="line">(d,(None,Some(1)))</span><br><span class="line">(c,(Some(1),None))</span><br><span class="line">(a,(Some(1),Some(1)))</span><br><span class="line">(a,(Some(2),Some(1)))</span><br><span class="line">(b,(Some(1),Some(1)))</span><br><span class="line">(b,(Some(1),Some(2)))</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h1&gt;&lt;p&gt;JOIN函数签名&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;def join&lt;code&gt;[W]&lt;/code&gt;(other: RDD[(K, W
      
    
    </summary>
    
    
      <category term="大数据" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="spark" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/spark/"/>
    
    
      <category term="易错点" scheme="https://masteryang4.github.io/tags/%E6%98%93%E9%94%99%E7%82%B9/"/>
    
      <category term="大数据" scheme="https://masteryang4.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="spark" scheme="https://masteryang4.github.io/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>scala样例类转换成为JSON字符串</title>
    <link href="https://masteryang4.github.io/2020/05/25/scala%E6%A0%B7%E4%BE%8B%E7%B1%BB%E8%BD%AC%E6%8D%A2%E6%88%90%E4%B8%BAJSON%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://masteryang4.github.io/2020/05/25/scala%E6%A0%B7%E4%BE%8B%E7%B1%BB%E8%BD%AC%E6%8D%A2%E6%88%90%E4%B8%BAJSON%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2020-05-25T11:08:21.000Z</published>
    <updated>2020-05-26T01:01:19.891Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JSON常用方法"><a href="#JSON常用方法" class="headerlink" title="JSON常用方法"></a>JSON常用方法</h1><p>Java中并没有内置JSON的解析，因此使用JSON需要借助第三方类库。</p><p>几个常用的 JSON 解析类库：</p><ul><li><a href="https://github.com/google/gson" target="_blank" rel="noopener">Gson</a>: 谷歌开发的 JSON 库，功能十分全面。</li><li><a href="https://github.com/alibaba/fastjson" target="_blank" rel="noopener">FastJson</a>: 阿里巴巴开发的 JSON 库，性能十分优秀。</li><li><a href="https://github.com/FasterXML/jackson" target="_blank" rel="noopener">Jackson</a>: 社区十分活跃且更新速度很快。</li></ul><p>maven依赖：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>JSON 对象与字符串的相互转化</p><table><thead><tr><th align="left">方法</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left"><code>JSON.parseObject()</code></td><td align="left">从字符串解析 JSON 对象</td></tr><tr><td align="left">JSON.parseArray()</td><td align="left">从字符串解析 JSON 数组</td></tr><tr><td align="left"><code>JSON.toJSONString(obj/array)</code></td><td align="left">将 JSON 对象或 JSON 数组转化为字符串</td></tr></tbody></table><p>示例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JSONTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//从字符串解析JSON对象</span></span><br><span class="line">        JSONObject obj = JSON.parseObject(<span class="string">"&#123;\"name\":\"ys\"&#125;"</span>);</span><br><span class="line">        System.out.println(obj); <span class="comment">//&#123;"name":"ys"&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//将JSON对象转化为字符串</span></span><br><span class="line">        String objStr = JSON.toJSONString(obj);</span><br><span class="line">        System.out.println(objStr); <span class="comment">//&#123;"name":"ys"&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="Scala样例类转换成JSON字符串"><a href="#Scala样例类转换成JSON字符串" class="headerlink" title="Scala样例类转换成JSON字符串"></a>Scala样例类转换成JSON字符串</h1><p>将<strong>Scala样例类</strong>转换成为JSON字符串，JSON.toJSONString(obj)会失效，所以使用如下方法：</p><p>maven依赖（json4s —&gt; json for scala）：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.json4s<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>json4s-native_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.json4s.native.<span class="type">Serialization</span></span><br><span class="line"><span class="keyword">implicit</span> <span class="keyword">val</span> formats=org.json4s.<span class="type">DefaultFormats</span> <span class="comment">//隐式转换</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> orderInfoJson: <span class="type">String</span> = <span class="type">Serialization</span>.write(orderInfo)</span><br></pre></td></tr></table></figure></div><p>示例</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.&#123;<span class="type">JSON</span>, <span class="type">JSONObject</span>&#125;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.bean.<span class="type">UserInfo</span></span><br><span class="line"><span class="keyword">import</span> org.json4s.native.<span class="type">Serialization</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">JsonStrTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> userInfo = <span class="type">UserInfo</span>(<span class="string">"1001"</span>,<span class="string">"name1"</span>,<span class="string">"5"</span>,<span class="string">"2020-05-25"</span>,<span class="string">"male"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">implicit</span> <span class="keyword">val</span> formats = org.json4s.<span class="type">DefaultFormats</span></span><br><span class="line">      </span><br><span class="line">    <span class="comment">//println(JSON.toJSONString(userInfo)) //报错</span></span><br><span class="line">      </span><br><span class="line">    <span class="keyword">val</span> str = <span class="type">Serialization</span>.write(userInfo)</span><br><span class="line">    println(str)</span><br><span class="line">    <span class="comment">// &#123;"id":"1001","login_name":"name1","user_level":"5","birthday":"2020-05-25","gender":"male"&#125;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">val</span> nObject: <span class="type">JSONObject</span> = <span class="type">JSON</span>.parseObject(str)  <span class="comment">//正常解析</span></span><br><span class="line">    println(nObject)</span><br><span class="line">    <span class="comment">// &#123;"birthday":"2020-05-25","login_name":"name1","gender":"male","user_level":"5","id":"1001"&#125;</span></span><br><span class="line">        </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>UserInfo.scala</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span>(<span class="params">id:<span class="type">String</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">                    login_name:<span class="type">String</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">                    user_level:<span class="type">String</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">                    birthday:<span class="type">String</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">                    gender:<span class="type">String</span></span>)</span></span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JSON常用方法&quot;&gt;&lt;a href=&quot;#JSON常用方法&quot; class=&quot;headerlink&quot; title=&quot;JSON常用方法&quot;&gt;&lt;/a&gt;JSON常用方法&lt;/h1&gt;&lt;p&gt;Java中并没有内置JSON的解析，因此使用JSON需要借助第三方类库。&lt;/p&gt;
&lt;p&gt;几个
      
    
    </summary>
    
    
      <category term="大数据" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="scala" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/scala/"/>
    
    
      <category term="大数据" scheme="https://masteryang4.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="scala" scheme="https://masteryang4.github.io/tags/scala/"/>
    
  </entry>
  
  <entry>
    <title>[精]ElasticSearch总结与思考</title>
    <link href="https://masteryang4.github.io/2020/05/18/%E7%B2%BE-ElasticSearch%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/"/>
    <id>https://masteryang4.github.io/2020/05/18/%E7%B2%BE-ElasticSearch%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/</id>
    <published>2020-05-18T14:05:34.000Z</published>
    <updated>2020-05-18T14:09:51.324Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li><p>Elasticsearch，基于Lucene，隐藏复杂性，提供简单易用的RestfulAPI接口、JavaAPI接口（还有其他语言的API接口）。</p></li><li><p>Elasticsearch是一个实时分布式搜索和分析引擎。它用于全文搜索、结构化搜索、分析。</p><ul><li>全文检索：将非结构化数据中的一部分信息提取出来,重新组织,使其变得有一定结构,然后对此有一定结构的数据进行搜索,从而达到搜索相对较快的目的。</li><li>倒排索引：简单举例：根据关键词找包含其的文章（正常思维：在文章中找关键词）。</li><li>结构化检索：我想搜索商品分类为日化用品的商品都有哪些，select * from products where category_id=’日化用品’。</li><li>数据分析：电商网站，最近7天牙膏这种商品销量排名前10的商家有哪些；新闻网站，最近1个月访问量排名前3的新闻版块是哪些。</li></ul></li><li><p>可以作为一个大型分布式集群（数百台服务器）技术，处理<strong>PB级</strong>数据，服务大公司；也可以运行在单机上，服务小公司.</p></li></ul><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>维基百科，类似百度百科，牙膏，牙膏的维基百科，全文检索，高亮，搜索推荐。</li><li>The Guardian（国外新闻网站），类似搜狐新闻，用户行为日志（点击，浏览，收藏，评论）+ 社交网络数据（对某某新闻的相关看法），数据分析，给到每篇新闻文章的作者，让他知道他的文章的公众反馈（好，坏，热门，垃圾，鄙视，崇拜）。</li><li>Stack Overflow（国外的程序异常讨论论坛），IT问题，程序的报错，提交上去，有人会跟你讨论和回答，全文检索，搜索相关问题和答案，程序报错了，就会将报错信息粘贴到里面去，搜索有没有对应的答案。</li><li>GitHub（开源代码管理），搜索上千亿行代码。</li><li>国内：站内搜索（电商，招聘，门户，等等），IT系统搜索（OA，CRM，ERP，等等），数据分析（ES热门的一个使用场景）。</li></ul><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><p><strong>ElasticSearch与数据库类比</strong></p><table><thead><tr><th>关系型数据库（如Mysql）</th><th>非关系型数据库（Elasticsearch）</th></tr></thead><tbody><tr><td>数据库Database</td><td>索引Index</td></tr><tr><td>表Table</td><td>类型Type(<strong>6.0版本之后在一个索引下面只能有一个，7.0版本之后取消了Type</strong>)</td></tr><tr><td>数据行Row</td><td>文档Document(JSON格式)</td></tr><tr><td>数据列Column</td><td>字段Field</td></tr><tr><td>约束 Schema</td><td>映射Mapping</td></tr></tbody></table><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>1）解压elasticsearch-6.6.0.tar.gz到/opt/module目录下</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ys@hadoop102 software]$ tar -zxvf elasticsearch-6.6.0.tar.gz -C &#x2F;opt&#x2F;module&#x2F;</span><br></pre></td></tr></table></figure></div><p>2）在/opt/module/elasticsearch-6.6.0路径下创建data文件夹</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ys@hadoop102 elasticsearch-6.6.0]$ mkdir data</span><br></pre></td></tr></table></figure></div><p>3）修改配置文件/opt/module/elasticsearch-6.6.0/config/elasticsearch.yml</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[ys@hadoop102 config]$ pwd</span><br><span class="line">&#x2F;opt&#x2F;module&#x2F;elasticsearch-6.6.0&#x2F;config</span><br><span class="line">[ys@hadoop102 config]$ vim elasticsearch.yml</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-----------------------Cluster-----------------------</span></span><br><span class="line"><span class="attr">cluster.name:</span> <span class="string">my-application</span></span><br><span class="line"><span class="comment">#-----------------------Node-----------------------</span></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">node-102</span></span><br><span class="line"><span class="comment">#-----------------------Paths-----------------------</span></span><br><span class="line"><span class="attr">path.data:</span> <span class="string">/opt/module/elasticsearch-6.6.0/data</span></span><br><span class="line"><span class="attr">path.logs:</span> <span class="string">/opt/module/elasticsearch-6.6.0/logs</span></span><br><span class="line"><span class="comment">#-----------------------Memory-----------------------</span></span><br><span class="line"><span class="attr">bootstrap.memory_lock:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">bootstrap.system_call_filter:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment">#-----------------------Network-----------------------</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">192.168</span><span class="number">.9</span><span class="number">.102</span> </span><br><span class="line"><span class="comment">#-----------------------Discovery-----------------------</span></span><br><span class="line"><span class="attr">discovery.zen.ping.unicast.hosts:</span> <span class="string">["192.168.9.102"]</span></span><br></pre></td></tr></table></figure></div><blockquote><p>（1）cluster.name</p><p>如果要配置集群需要两个节点上的elasticsearch配置的cluster.name相同，都启动可以自动组成集群，这里如果不改cluster.name则默认是cluster.name=my-application，</p><p>（2）nodename随意取但是集群内的各节点不能相同</p><p>（3）修改后的每行前面不能有空格，修改后的“：”后面必须有一个空格</p></blockquote><p>4）分发至hadoop103以及hadoop104，分发之后修改：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[ys@hadoop102 module]$ xsync elasticsearch-6.6.0&#x2F;</span><br><span class="line"></span><br><span class="line">node.name: node-103</span><br><span class="line">network.host: 192.168.9.103</span><br><span class="line"></span><br><span class="line">node.name: node-104</span><br><span class="line">network.host: 192.168.9.104</span><br></pre></td></tr></table></figure></div><p>5）此时启动会报错，要配置linux系统环境（参考：<a href="http://blog.csdn.net/satiling/article/details/59697916）" target="_blank" rel="noopener">http://blog.csdn.net/satiling/article/details/59697916）</a></p><p>6）启动Elasticsearch</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ys@hadoop102 elasticsearch-6.6.0]$ bin&#x2F;elasticsearch</span><br></pre></td></tr></table></figure></div><p>7）测试elasticsearch</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[ys@hadoop102 elasticsearch-6.6.0]$ curl http:&#x2F;&#x2F;hadoop102:9200</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"> &quot;name&quot; : &quot;node-102&quot;,</span><br><span class="line"> &quot;cluster_name&quot; : &quot;my-application&quot;,</span><br><span class="line"> &quot;cluster_uuid&quot; : &quot;KOpuhMgVRzW_9OTjMsHf2Q&quot;,</span><br><span class="line"> &quot;version&quot; : &#123;</span><br><span class="line">  &quot;number&quot; : &quot;6.6.0&quot;,</span><br><span class="line">  &quot;build_flavor&quot; : &quot;default&quot;,</span><br><span class="line">  &quot;build_type&quot; : &quot;tar&quot;,</span><br><span class="line">  &quot;build_hash&quot; : &quot;eb782d0&quot;,</span><br><span class="line">  &quot;build_date&quot; : &quot;2018-06-29T21:59:26.107521Z&quot;,</span><br><span class="line">  &quot;build_snapshot&quot; : false,</span><br><span class="line">  &quot;lucene_version&quot; : &quot;7.3.1&quot;,</span><br><span class="line">  &quot;minimum_wire_compatibility_version&quot; : &quot;5.6.0&quot;,</span><br><span class="line">  &quot;minimum_index_compatibility_version&quot; : &quot;5.0.0&quot;</span><br><span class="line"> &#125;,</span><br><span class="line"> &quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>8）停止集群</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -9 进程号</span><br></pre></td></tr></table></figure></div><p>9）群起脚本</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ys@hadoop102 bin]$ vi es.sh</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">es_home=/opt/module/elasticsearch</span><br><span class="line">case $1  in</span><br><span class="line"> "start") &#123;</span><br><span class="line"> for i in hadoop102 hadoop103 hadoop104</span><br><span class="line"> do</span><br><span class="line">  echo "==============$i=============="</span><br><span class="line">  ssh $i  "source /etc/profile;$&#123;es_home&#125;/bin/elasticsearch &gt;/dev/null 2&gt;&amp;1 &amp;"</span><br><span class="line"> done</span><br><span class="line">&#125;;;</span><br><span class="line">"stop") &#123;</span><br><span class="line"> for i in hadoop102 hadoop103 hadoop104</span><br><span class="line"> do</span><br><span class="line">  echo "==============$i=============="</span><br><span class="line">  ssh $i "ps -ef|grep $es_home |grep -v grep|awk '&#123;print \$2&#125;'|xargs kill" &gt;/dev/null 2&gt;&amp;1</span><br><span class="line"> done</span><br><span class="line">&#125;;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure></div><h1 id="可视化工具Kibana"><a href="#可视化工具Kibana" class="headerlink" title="可视化工具Kibana"></a>可视化工具Kibana</h1><p>Kibana的安装</p><p>1、将kibana压缩包上传到虚拟机指定目录</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ys@hadoop102 software]$ tar -zxvf kibana-6.6.0-linux-x86_64.tar.gz -C &#x2F;opt&#x2F;module&#x2F;</span><br></pre></td></tr></table></figure></div><p>2、修改相关配置，连接Elasticsearch</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ys@hadoop102 kibana]$ vim config&#x2F;kibana.yml</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Kibana is served by a back end server. This setting specifies the port to use.</span></span><br><span class="line"><span class="attr">server.port:</span> <span class="number">5601</span></span><br><span class="line"><span class="comment"># Specifies the address to which the Kibana server will bind. IP addresses and host names are both valid values.</span></span><br><span class="line"><span class="comment"># The default is 'localhost', which usually means remote machines will not be able to connect.</span></span><br><span class="line"><span class="comment"># To allow connections from remote users, set this parameter to a non-loopback address.</span></span><br><span class="line"><span class="attr">server.host:</span> <span class="string">"192.168.9.102"</span></span><br><span class="line"><span class="string">...</span> <span class="string">...</span></span><br><span class="line"><span class="string">...</span> <span class="string">...</span></span><br><span class="line"><span class="comment"># The URL of the Elasticsearch instance to use for all your queries.</span></span><br><span class="line"><span class="attr">elasticsearch.url:</span> <span class="string">"http://192.168.9.102:9200"</span></span><br></pre></td></tr></table></figure></div><p>3、启动Kibana</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ys@hadoop102 kibana]$ bin&#x2F;kibana</span><br></pre></td></tr></table></figure></div><p>4、浏览器访问：<code>hadoop102:5601</code> 即可操作</p><h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><h2 id="命令行操作"><a href="#命令行操作" class="headerlink" title="命令行操作"></a>命令行操作</h2><h3 id="核心数据类型"><a href="#核心数据类型" class="headerlink" title="核心数据类型"></a>核心数据类型</h3><ul><li><p>字符串型：text(分词)、keyword(不分词)</p></li><li><p>数值型：long、integer、short、byte、double、float、half_float、scaled_float</p></li><li><p>日期类型：date</p></li></ul><h3 id="Mapping"><a href="#Mapping" class="headerlink" title="Mapping"></a>Mapping</h3><p>1、手动创建</p><ul><li>创建mapping</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">PUT my_index1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;_doc&quot;:&#123;</span><br><span class="line">      &quot;properties&quot;:&#123;</span><br><span class="line">        &quot;username&quot;:&#123;</span><br><span class="line">          &quot;type&quot;: &quot;text&quot;, </span><br><span class="line">          &quot;fields&quot;: &#123;</span><br><span class="line">            &quot;pinyin&quot;:&#123;</span><br><span class="line">              &quot;type&quot;: &quot;text&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>创建文档</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT my_index1&#x2F;_doc&#x2F;1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;username&quot;:&quot;haha heihei&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>查询</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET my_index1&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;username.pinyin&quot;: &quot;haha&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>2、自动创建</p><ul><li>直接插入文档</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;test_index&#x2F;_doc&#x2F;1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;username&quot;:&quot;alfred&quot;,</span><br><span class="line">  &quot;age&quot;:1,</span><br><span class="line">  &quot;birth&quot;:&quot;1991-12-15&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>查看mapping</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">GET &#x2F;test_index&#x2F;doc&#x2F;_mapping</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;test_index&quot;: &#123;</span><br><span class="line">    &quot;mappings&quot;: &#123;</span><br><span class="line">      &quot;doc&quot;: &#123;</span><br><span class="line">        &quot;properties&quot;: &#123;</span><br><span class="line">          &quot;age&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;long&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;birth&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;date&quot;</span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;username&quot;: &#123;</span><br><span class="line">            &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">            &quot;fields&quot;: &#123;</span><br><span class="line">              &quot;keyword&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">                &quot;ignore_above&quot;: 256</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="IK分词器"><a href="#IK分词器" class="headerlink" title="IK分词器"></a>IK分词器</h3><p>分词器主要应用在中文上，在ES中字符串类型有keyword和text两种。keyword默认不进行分词，而text是将每一个汉字拆开称为独立的词，这两种都是不适用于生产环境。</p><ul><li>keyword分词</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;keyword&quot;:&quot;我是程序员&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>结果展示（会报错error）</p><ul><li>text类型的分词</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">GET _analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;text&quot;:&quot;我是程序员&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>结果展示：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;tokens&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot;: &quot;我&quot;,</span><br><span class="line">      &quot;start_offset&quot;: 0,</span><br><span class="line">      &quot;end_offset&quot;: 1,</span><br><span class="line">      &quot;type&quot;: &quot;&lt;IDEOGRAPHIC&gt;&quot;,</span><br><span class="line">      &quot;position&quot;: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot;: &quot;是&quot;,</span><br><span class="line">      &quot;start_offset&quot;: 1,</span><br><span class="line">      &quot;end_offset&quot;: 2,</span><br><span class="line">      &quot;type&quot;: &quot;&lt;IDEOGRAPHIC&gt;&quot;,</span><br><span class="line">      &quot;position&quot;: 1</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot;: &quot;程&quot;,</span><br><span class="line">      &quot;start_offset&quot;: 2,</span><br><span class="line">      &quot;end_offset&quot;: 3,</span><br><span class="line">      &quot;type&quot;: &quot;&lt;IDEOGRAPHIC&gt;&quot;,</span><br><span class="line">      &quot;position&quot;: 2</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot;: &quot;序&quot;,</span><br><span class="line">      &quot;start_offset&quot;: 3,</span><br><span class="line">      &quot;end_offset&quot;: 4,</span><br><span class="line">      &quot;type&quot;: &quot;&lt;IDEOGRAPHIC&gt;&quot;,</span><br><span class="line">      &quot;position&quot;: 3</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;token&quot;: &quot;员&quot;,</span><br><span class="line">      &quot;start_offset&quot;: 4,</span><br><span class="line">      &quot;end_offset&quot;: 5,</span><br><span class="line">      &quot;type&quot;: &quot;&lt;IDEOGRAPHIC&gt;&quot;,</span><br><span class="line">      &quot;position&quot;: 4</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="IK分词器安装"><a href="#IK分词器安装" class="headerlink" title="IK分词器安装"></a>IK分词器安装</h4><p>1）下载与安装的ES相对应的版本</p><p>2）解压elasticsearch-analysis-ik-6.6.0.zip，将解压后的IK文件夹拷贝到ES安装目录下的plugins目录下，并重命名文件夹为ik（什么名称都OK）</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ys@hadoop102 plugins]$ mkdir ik</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ys@hadoop102 software]$ unzip elasticsearch-analysis-ik-6.6.0.zip -d &#x2F;opt&#x2F;module&#x2F;elasticsearch-6.6.0&#x2F;plugins&#x2F;ik&#x2F;</span><br></pre></td></tr></table></figure></div><p>3）分发分词器目录</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ys@hadoop102 elasticsearch-6.6.0]$ xsync plugins&#x2F;</span><br></pre></td></tr></table></figure></div><p>4）重新启动Elasticsearch，即可加载IK分词器</p><p>5）IK测试</p><ul><li>ik_smart ：最少切分</li><li>ik_max_word：最细粒度划分</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">get _analyze</span><br><span class="line">&#123;</span><br><span class="line">  &quot;analyzer&quot;: &quot;ik_smart&quot;,</span><br><span class="line">  &quot;text&quot;:&quot;我是程序员&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;tokens&quot; : [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;token&quot; : &quot;我&quot;,</span><br><span class="line">            &quot;start_offset&quot; : 0,</span><br><span class="line">            &quot;end_offset&quot; : 1,</span><br><span class="line">            &quot;type&quot; : &quot;CN_CHAR&quot;,</span><br><span class="line">            &quot;position&quot; : 0</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;token&quot; : &quot;是&quot;,</span><br><span class="line">            &quot;start_offset&quot; : 1,</span><br><span class="line">            &quot;end_offset&quot; : 2,</span><br><span class="line">            &quot;type&quot; : &quot;CN_CHAR&quot;,</span><br><span class="line">            &quot;position&quot; : 1</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;token&quot; : &quot;程序员&quot;,</span><br><span class="line">            &quot;start_offset&quot; : 2,</span><br><span class="line">            &quot;end_offset&quot; : 5,</span><br><span class="line">            &quot;type&quot; : &quot;CN_WORD&quot;,</span><br><span class="line">            &quot;position&quot; : 2</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>ik_max_word</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;我&quot;,&quot;是&quot;,&quot;程序员&quot;,&quot;程序&quot;,&quot;员&quot;</span><br></pre></td></tr></table></figure></div><h3 id="检索文档【重点】"><a href="#检索文档【重点】" class="headerlink" title="检索文档【重点】"></a>检索文档【重点】</h3><p>向Elasticsearch增加数据</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PUT &#x2F;atguigu&#x2F;doc&#x2F;1</span><br><span class="line">&#123;</span><br><span class="line">    &quot;first_name&quot; : &quot;John&quot;,</span><br><span class="line">    &quot;last_name&quot; :  &quot;Smith&quot;,</span><br><span class="line">    &quot;age&quot; :        25,</span><br><span class="line">    &quot;about&quot; :      &quot;I love to go rock climbing&quot;,</span><br><span class="line">    &quot;interests&quot;: [&quot;sports&quot;, &quot;music&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>查询数据</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 协议方法 索引&#x2F;类型&#x2F;文档编号</span><br><span class="line">GET &#x2F;atguigu&#x2F;doc&#x2F;1</span><br></pre></td></tr></table></figure></div><p>响应</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;_index&quot;: &quot;atguigu&quot;,</span><br><span class="line">  &quot;_type&quot;: &quot;doc&quot;,</span><br><span class="line">  &quot;_id&quot;: &quot;1&quot;,</span><br><span class="line">  &quot;_version&quot;: 1,</span><br><span class="line">  &quot;found&quot;: true,</span><br><span class="line">  &quot;_source&quot;: &#123; &#x2F;&#x2F; 文档的原始数据JSON数据</span><br><span class="line">    &quot;first_name&quot;: &quot;John&quot;,</span><br><span class="line">    &quot;last_name&quot;: &quot;Smith&quot;,</span><br><span class="line">    &quot;age&quot;: 25,</span><br><span class="line">    &quot;about&quot;: &quot;I love to go rock climbing&quot;,</span><br><span class="line">    &quot;interests&quot;: [</span><br><span class="line">      &quot;sports&quot;,</span><br><span class="line">      &quot;music&quot;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="元数据查询"><a href="#元数据查询" class="headerlink" title="元数据查询"></a>元数据查询</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET _cat&#x2F;indices</span><br></pre></td></tr></table></figure></div><h4 id="全文档检索"><a href="#全文档检索" class="headerlink" title="全文档检索"></a>全文档检索</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 协议方法 索引&#x2F;类型&#x2F;_search</span><br><span class="line">GET &#x2F;atguigu&#x2F;_doc&#x2F;_search</span><br></pre></td></tr></table></figure></div><h4 id="字段全值匹配检索-filter"><a href="#字段全值匹配检索-filter" class="headerlink" title="字段全值匹配检索[filter]"></a>字段全值匹配检索[filter]</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET atguigu&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;term&quot;: &#123;</span><br><span class="line">          &quot;about&quot;: &quot;I love to go rock climbing&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="字段分词匹配检索-match"><a href="#字段分词匹配检索-match" class="headerlink" title="字段分词匹配检索[match]"></a>字段分词匹配检索[match]</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET atguigu&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;match&quot;: &#123;</span><br><span class="line">      &quot;about&quot;: &quot;I&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="字段模糊匹配检索-fuzzy"><a href="#字段模糊匹配检索-fuzzy" class="headerlink" title="字段模糊匹配检索[fuzzy]"></a>字段模糊匹配检索[fuzzy]</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET  test&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;fuzzy&quot;: &#123;</span><br><span class="line">      &quot;aa&quot;: &#123;</span><br><span class="line">        &quot;value&quot;: &quot;我是程序&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="聚合检索"><a href="#聚合检索" class="headerlink" title="聚合检索"></a>聚合检索</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET test&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;groupby_aa&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123;</span><br><span class="line">        &quot;field&quot;: &quot;aa&quot;,</span><br><span class="line">        &quot;size&quot;: 10</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="分页检索"><a href="#分页检索" class="headerlink" title="分页检索"></a>分页检索</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET movie_index&#x2F;movie&#x2F;_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123; &quot;match_all&quot;: &#123;&#125; &#125;,</span><br><span class="line">  &quot;from&quot;: 1,</span><br><span class="line">  &quot;size&quot;: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="索引别名-aliases"><a href="#索引别名-aliases" class="headerlink" title="索引别名 _aliases"></a>索引别名 _aliases</h3><p>索引别名就像一个快捷方式或软连接，可以指向一个或多个索引，也可以给任何一个需要索引名的API来使用。别名带给我们极大的灵活性，允许我们做下面这些：</p><p>1）给多个索引分组 (例如， last_three_months)</p><p>2）给索引的一个子集创建视图</p><p>3）在运行的集群中可以无缝的从一个索引切换到另一个索引</p><blockquote><p>说白了就是功能更强大的视图</p></blockquote><p>创建索引别名</p><ul><li>建表时直接声明</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">PUT movie_chn_2020</span><br><span class="line">&#123;  &quot;aliases&quot;: &#123;</span><br><span class="line">      &quot;movie_chn_2020-query&quot;: &#123;&#125;</span><br><span class="line">  &#125;, </span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;movie&quot;:&#123;</span><br><span class="line">      &quot;properties&quot;: &#123;</span><br><span class="line">        &quot;id&quot;:&#123;</span><br><span class="line">          &quot;type&quot;: &quot;long&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;name&quot;:&#123;</span><br><span class="line">          &quot;type&quot;: &quot;text&quot;</span><br><span class="line">          , &quot;analyzer&quot;: &quot;ik_smart&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;doubanScore&quot;:&#123;</span><br><span class="line">          &quot;type&quot;: &quot;double&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;actorList&quot;:&#123;</span><br><span class="line">          &quot;properties&quot;: &#123;</span><br><span class="line">            &quot;id&quot;:&#123;</span><br><span class="line">              &quot;type&quot;:&quot;long&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;name&quot;:&#123;</span><br><span class="line">              &quot;type&quot;:&quot;keyword&quot;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>为已存在的索引增加别名</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST  _aliases</span><br><span class="line">&#123;</span><br><span class="line">    &quot;actions&quot;: [</span><br><span class="line">        &#123; &quot;add&quot;:    &#123; &quot;index&quot;: &quot;movie_chn_xxxx&quot;, &quot;alias&quot;: &quot;movie_chn_2020-query&quot; &#125;&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>也可以通过加过滤条件缩小查询范围，建立一个子集视图</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST  _aliases</span><br><span class="line">&#123;</span><br><span class="line">    &quot;actions&quot;: [</span><br><span class="line">        &#123; &quot;add&quot;:    </span><br><span class="line">            &#123; &quot;index&quot;: &quot;movie_chn_xxxx&quot;, </span><br><span class="line">              &quot;alias&quot;: &quot;movie_chn0919-query-zhhy&quot;,</span><br><span class="line">               &quot;filter&quot;: &#123;</span><br><span class="line">                  &quot;term&quot;: &#123;  &quot;actorList.id&quot;: &quot;3&quot;</span><br><span class="line">                 &#125;</span><br><span class="line">               &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>查询别名：与使用普通索引没有区别</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET movie_chn_2020-query&#x2F;_search</span><br></pre></td></tr></table></figure></div><p>删除某个索引的别名</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST  _aliases</span><br><span class="line">&#123;</span><br><span class="line">    &quot;actions&quot;: [</span><br><span class="line">        &#123; &quot;remove&quot;:    &#123; &quot;index&quot;: &quot;movie_chn_xxxx&quot;, &quot;alias&quot;: &quot;movie_chn_2020-query&quot; &#125;&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>为某个别名进行无缝切换</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;_aliases</span><br><span class="line">&#123;</span><br><span class="line">    &quot;actions&quot;: [</span><br><span class="line">        &#123; &quot;remove&quot;: &#123; &quot;index&quot;: &quot;movie_chn_xxxx&quot;, &quot;alias&quot;: &quot;movie_chn_2020-query&quot; &#125;&#125;,</span><br><span class="line">        &#123; &quot;add&quot;:    &#123; &quot;index&quot;: &quot;movie_chn_yyyy&quot;, &quot;alias&quot;: &quot;movie_chn_2020-query&quot; &#125;&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>查询别名列表</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET  _cat&#x2F;aliases?v</span><br></pre></td></tr></table></figure></div><h3 id="索引模板"><a href="#索引模板" class="headerlink" title="索引模板"></a>索引模板</h3><p>Index Template 索引模板，顾名思义，就是创建索引的模具，其中可以定义一系列规则来帮助我们构建符合特定业务需求的索引的mappings和 settings，通过使用 Index Template 可以让我们的索引具备可预知的一致性。</p><blockquote><p>常见的场景: 分割索引</p><p>分割索引就是根据时间间隔把一个业务索引切分成多个索引。比如把order_info 变成 order_info_20200101,order_info_20200102 …..</p><p>这样做的好处有两个：</p><p>1、结构变化的灵活性：因为elasticsearch不允许对数据结构进行修改。但是实际使用中索引的结构和配置难免变化，那么只要对下一个间隔的索引进行修改，原来的索引位置原状。这样就有了一定的灵活性。</p><p>2、查询范围优化：因为一般情况并不会查询全部时间周期的数据，那么通过切分索引，物理上减少了扫描数据的范围，也是对性能的优化。</p></blockquote><p>创建模板</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">PUT _template&#x2F;template_movie2020</span><br><span class="line">&#123;</span><br><span class="line">  &quot;index_patterns&quot;: [&quot;movie_test*&quot;],                  </span><br><span class="line">  &quot;settings&quot;: &#123;                                               </span><br><span class="line">    &quot;number_of_shards&quot;: 1</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;aliases&quot; : &#123; </span><br><span class="line">    &quot;&#123;index&#125;-query&quot;: &#123;&#125;,</span><br><span class="line">    &quot;movie_test-query&quot;:&#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;mappings&quot;: &#123;                                          </span><br><span class="line">&quot;_doc&quot;: &#123;</span><br><span class="line">      &quot;properties&quot;: &#123;</span><br><span class="line">        &quot;id&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;movie_name&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">          &quot;analyzer&quot;: &quot;ik_smart&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>其中 “index_patterns”: [“movie_test*”],  的含义就是凡是往movie_test开头的索引写入数据时，如果索引不存在，那么es会根据此模板自动建立索引。</p><p>在 “aliases” 中用{index}表示，获得真正的创建的索引名。</p><p>测试：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST movie_test_2020xxxx&#x2F;_doc</span><br><span class="line">&#123;</span><br><span class="line">  &quot;id&quot;:&quot;333&quot;,</span><br><span class="line">  &quot;name&quot;:&quot;zhang3&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>查看系统中已有的模板清单</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET  _cat&#x2F;templates</span><br></pre></td></tr></table></figure></div><p>查看某个模板详情</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET  _template&#x2F;template_movie2020</span><br><span class="line">或者</span><br><span class="line">GET  _template&#x2F;template_movie*</span><br></pre></td></tr></table></figure></div><h2 id="JavaAPI操作"><a href="#JavaAPI操作" class="headerlink" title="JavaAPI操作"></a>JavaAPI操作</h2><p>maven依赖:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpmime<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.searchbox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jest<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.java.dev.jna<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jna<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.janino<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-compiler<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">versison</span>&gt;</span>6.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>单条写入数据</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.ys.bean.Stu;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.client.JestClient;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.client.JestClientFactory;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.client.config.HttpClientConfig;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.core.Index;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ESWriter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//一、创建ES客户端对象</span></span><br><span class="line">        <span class="comment">//1.1 创建ES客户端的工厂对象</span></span><br><span class="line">        JestClientFactory jestClientFactory = <span class="keyword">new</span> JestClientFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.2 创建配置信息</span></span><br><span class="line">        HttpClientConfig config = <span class="keyword">new</span> HttpClientConfig.Builder(<span class="string">"http://hadoop102:9200"</span>).build();</span><br><span class="line">        jestClientFactory.setHttpClientConfig(config);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.3 获取客户端对象</span></span><br><span class="line">        JestClient jestClient = jestClientFactory.getObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//二、写入数据</span></span><br><span class="line">        <span class="comment">//2.1 创建Action对象 --&gt; Index</span></span><br><span class="line">        Stu stu = <span class="keyword">new</span> Stu(<span class="string">"004"</span>, <span class="string">"少爷"</span>);</span><br><span class="line">        Index index = <span class="keyword">new</span> Index.Builder(stu)</span><br><span class="line">                .index(<span class="string">"stu_temp_01"</span>)</span><br><span class="line">                .type(<span class="string">"_doc"</span>)</span><br><span class="line">                .id(<span class="string">"1004"</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.2 执行写入数据操作</span></span><br><span class="line">        jestClient.execute(index);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//三、关闭资源</span></span><br><span class="line">        jestClient.shutdownClient();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>批量写入数据</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.ys.bean.Stu;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.client.JestClient;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.client.JestClientFactory;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.client.config.HttpClientConfig;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.core.Bulk;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.core.Index;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ESWriterByBulk</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//一、创建ES客户端对象</span></span><br><span class="line">        <span class="comment">//1.1 创建ES客户端的工厂对象</span></span><br><span class="line">        JestClientFactory jestClientFactory = <span class="keyword">new</span> JestClientFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.2 创建配置信息</span></span><br><span class="line">        HttpClientConfig config = <span class="keyword">new</span> HttpClientConfig.Builder(<span class="string">"http://hadoop102:9200"</span>).build();</span><br><span class="line">        jestClientFactory.setHttpClientConfig(config);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.3 获取客户端对象</span></span><br><span class="line">        JestClient jestClient = jestClientFactory.getObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//二、批量写入</span></span><br><span class="line">        <span class="comment">//2.1 准备数据</span></span><br><span class="line">        Stu stu1 = <span class="keyword">new</span> Stu(<span class="string">"008"</span>, <span class="string">"麻瓜"</span>);</span><br><span class="line">        Stu stu2 = <span class="keyword">new</span> Stu(<span class="string">"009"</span>, <span class="string">"海格"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.2 创建Bulk.Builder对象</span></span><br><span class="line">        Bulk.Builder builder = <span class="keyword">new</span> Bulk.Builder();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.3 创建Index对象</span></span><br><span class="line">        Index index1 = <span class="keyword">new</span> Index.Builder(stu1).id(<span class="string">"1008"</span>).build();</span><br><span class="line">        Index index2 = <span class="keyword">new</span> Index.Builder(stu2).id(<span class="string">"1009"</span>).build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.4 赋值默认的索引名称及类型名</span></span><br><span class="line">        builder.defaultIndex(<span class="string">"stu_temp_01"</span>);</span><br><span class="line">        builder.defaultType(<span class="string">"_doc"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.5 添加Index之Bulk</span></span><br><span class="line">        builder.addAction(index1);</span><br><span class="line">        builder.addAction(index2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.6 真正构建Bulk对象</span></span><br><span class="line">        Bulk bulk = builder.build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.7 执行批量写入数据操作</span></span><br><span class="line">        jestClient.execute(bulk);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.关闭连接</span></span><br><span class="line">        jestClient.shutdownClient();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>读取数据（这里不使用json串，可读性不好）</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.searchbox.client.JestClient;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.client.JestClientFactory;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.client.config.HttpClientConfig;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.core.Search;</span><br><span class="line"><span class="keyword">import</span> io.searchbox.core.SearchResult;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.BoolQueryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.index.query.TermQueryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.builder.SearchSourceBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ESReader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取客户端对象</span></span><br><span class="line">        <span class="comment">//1.1 创建ES客户端的工厂对象</span></span><br><span class="line">        JestClientFactory jestClientFactory = <span class="keyword">new</span> JestClientFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.2 创建配置信息</span></span><br><span class="line">        HttpClientConfig config = <span class="keyword">new</span> HttpClientConfig.Builder(<span class="string">"http://hadoop102:9200"</span>).build();</span><br><span class="line">        jestClientFactory.setHttpClientConfig(config);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.3 获取客户端对象</span></span><br><span class="line">        JestClient jestClient = jestClientFactory.getObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.读取数据</span></span><br><span class="line">        <span class="comment">//2.0 创建查询条件</span></span><br><span class="line">        SearchSourceBuilder searchSourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        BoolQueryBuilder boolQueryBuilder = <span class="keyword">new</span> BoolQueryBuilder();</span><br><span class="line">        boolQueryBuilder.filter(<span class="keyword">new</span> TermQueryBuilder(<span class="string">"class_id"</span>, <span class="string">"190218"</span>));</span><br><span class="line">        searchSourceBuilder.query(boolQueryBuilder);</span><br><span class="line"></span><br><span class="line">        searchSourceBuilder.from(<span class="number">0</span>);</span><br><span class="line">        searchSourceBuilder.size(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.1 创建Search对象</span></span><br><span class="line">        Search search = <span class="keyword">new</span> Search.Builder(searchSourceBuilder.toString())</span><br><span class="line">                .addIndex(<span class="string">"student"</span>)</span><br><span class="line">                .addType(<span class="string">"_doc"</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.2 执行查询操作</span></span><br><span class="line">        SearchResult searchResult = jestClient.execute(search);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.3 解析searchResult</span></span><br><span class="line">        System.out.println(<span class="string">"查询数据"</span> + searchResult.getTotal() + <span class="string">"条！"</span>);</span><br><span class="line">        <span class="comment">// [json对应map是常见操作]</span></span><br><span class="line">        List&lt;SearchResult.Hit&lt;Map, Void&gt;&gt; hits = searchResult.getHits(Map<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">for</span> (SearchResult.Hit&lt;Map, Void&gt; hit : hits) &#123;</span><br><span class="line">            Map source = hit.source;</span><br><span class="line">            <span class="keyword">for</span> (Object key : source.keySet()) &#123;</span><br><span class="line">                System.out.println(hit.id + <span class="string">":"</span> + key.toString() + <span class="string">":"</span> + source.get(key).toString());</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"*************"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.关闭资源</span></span><br><span class="line">        jestClient.shutdownClient();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Stu.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stu</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Stu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Stu</span><span class="params">(String id, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        Stu stu = (Stu) o;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (id != <span class="keyword">null</span> ? !id.equals(stu.id) : stu.id != <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> name != <span class="keyword">null</span> ? name.equals(stu.name) : stu.name == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = id != <span class="keyword">null</span> ? id.hashCode() : <span class="number">0</span>;</span><br><span class="line">        result = <span class="number">31</span> * result + (name != <span class="keyword">null</span> ? name.hashCode() : <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Stu&#123;"</span> +</span><br><span class="line">                <span class="string">"id='"</span> + id + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;ul&gt;
&lt;
      
    
    </summary>
    
    
      <category term="大数据" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="elasticsearch" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/elasticsearch/"/>
    
    
      <category term="大数据" scheme="https://masteryang4.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="数据库" scheme="https://masteryang4.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="教程" scheme="https://masteryang4.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="elasticsearch" scheme="https://masteryang4.github.io/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>MyISAM与InnoDB的区别(详)</title>
    <link href="https://masteryang4.github.io/2020/05/14/MyISAM%E4%B8%8EInnoDB%E7%9A%84%E5%8C%BA%E5%88%AB-%E8%AF%A6/"/>
    <id>https://masteryang4.github.io/2020/05/14/MyISAM%E4%B8%8EInnoDB%E7%9A%84%E5%8C%BA%E5%88%AB-%E8%AF%A6/</id>
    <published>2020-05-14T12:52:48.000Z</published>
    <updated>2020-05-14T13:47:24.563Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MyISAM与InnoDB的区别（详）"><a href="#MyISAM与InnoDB的区别（详）" class="headerlink" title="MyISAM与InnoDB的区别（详）"></a>MyISAM与InnoDB的区别（详）</h1><h2 id="1-事务"><a href="#1-事务" class="headerlink" title="1.事务"></a>1.事务</h2><ul><li>InnoDB支持事务，MyISAM不支持。</li></ul><p>对于InnoDB每一条SQL语言都默认封装成事务，自动提交，这样会影响速度，所以最好把多条SQL语言放在begin和commit之间，组成一个事务；</p><blockquote><p>所以，博客中的《 <a href="http://www.yangsen94.top/2020/05/14/MySQL事务相关/" target="_blank" rel="noopener">MySQL事务相关</a> 》一文，是基于InnoDB引擎的。</p></blockquote><h2 id="2-外键"><a href="#2-外键" class="headerlink" title="2.外键"></a>2.外键</h2><ul><li>InnoDB支持外键，而MyISAM不支持。</li></ul><p>对一个包含外键的InnoDB表转为MYISAM会失败； </p><h2 id="3-索引"><a href="#3-索引" class="headerlink" title="3.索引"></a>3.索引</h2><ul><li><p>InnoDB是聚集索引，使用<strong>B+Tree</strong>作为索引结构，<strong>数据文件是和（主键）索引绑在一起的</strong>（表数据文件本身就是按B+Tree组织的一个索引结构），必须要有主键，通过主键索引效率很高。但是辅助索引需要两次查询，先查询到主键，然后再通过主键查询到数据。因此，主键不应该过大，因为主键太大，其他索引也都会很大。</p></li><li><p>MyISAM是非聚集索引，也是使用<strong>B+Tree</strong>作为索引结构，<strong>索引和数据文件是分离的</strong>（联系本文第9点），索引保存的是数据文件的指针。主键索引和辅助索引是独立的。</p></li></ul><blockquote><p>也就是说：<strong>InnoDB的B+树主键索引的叶子节点就是数据文件，辅助索引的叶子节点是主键的值</strong>；而MyISAM的B+树主键索引和辅助索引的叶子节点都是数据文件的地址指针。</p></blockquote><h2 id="4-表的具体行数"><a href="#4-表的具体行数" class="headerlink" title="4.表的具体行数"></a>4.表的具体行数</h2><ul><li>InnoDB不保存表的具体行数，执行<code>select count(*) from table</code>时需要全表扫描。</li><li>而MyISAM用一个变量保存了整个表的行数，执行上述语句时只需要读出该变量即可，速度很快（注意不能加有任何WHERE条件）；</li></ul><blockquote><p>那么为什么InnoDB没有了这个变量呢？</p><p>​        因为InnoDB的事务特性，在同一时刻表中的行数对于不同的事务而言是不一样的，因此count统计会计算对于当前事务而言可以统计到的行数，而不是将总行数储存起来方便快速查询。InnoDB会尝试遍历一个尽可能小的索引除非优化器提示使用别的索引。如果二级索引不存在，InnoDB还会尝试去遍历其他聚簇索引.</p><p>​        如果索引并没有完全处于InnoDB维护的缓冲区（Buffer Pool）中，count操作会比较费时。可以建立一个记录总行数的表并让你的程序在INSERT/DELETE时更新对应的数据。和上面提到的问题一样，如果此时存在多个事务的话这种方案也不太好用。如果得到大致的行数值已经足够满足需求可以尝试：</p><p>SHOW TABLE STATUS</p></blockquote><h2 id="5-全文索引"><a href="#5-全文索引" class="headerlink" title="5.全文索引"></a>5.全文索引</h2><ul><li>Innodb不支持全文索引，而MyISAM支持全文索引，在涉及全文索引领域的查询效率上MyISAM速度更快高；</li></ul><blockquote><p>5.7以后的InnoDB支持全文索引了。</p></blockquote><h2 id="6-表压缩"><a href="#6-表压缩" class="headerlink" title="6.表压缩"></a>6.表压缩</h2><ul><li>MyISAM表格可以被压缩后进行查询操作,压缩表是不能进行修改的(除非先将表解除压缩，修改数据，然后再次压缩)。压缩表可以极大地减少磁盘空间占用，因此也可以减少磁盘I/O，从而提升查询性能，压缩表也支持索引，但索引也只是只读的。</li></ul><h2 id="7-锁粒度"><a href="#7-锁粒度" class="headerlink" title="7.锁粒度"></a>7.锁粒度</h2><ul><li>InnoDB支持表、行(默认)级锁，而MyISAM支持表级锁。</li></ul><blockquote><p>InnoDB的行锁是实现在索引上的，而不是锁在物理行记录上。</p><p>潜台词是，如果访问没有命中索引，也无法使用行锁，将要退化为表锁 T_T。</p></blockquote><h2 id="8-主键"><a href="#8-主键" class="headerlink" title="8.主键"></a>8.主键</h2><ul><li>InnoDB表必须有主键（用户没有指定的话会自己找或生产一个主键），而Myisam可以没有</li></ul><h2 id="9-表数据文件存储"><a href="#9-表数据文件存储" class="headerlink" title="9.表数据文件存储"></a>9.表数据文件存储</h2><ul><li>Innodb存储文件有frm、ibd，而Myisam是frm、MYD、MYI</li></ul><blockquote><p>Innodb：frm是表定义文件，ibd是数据文件（共享表空间和单独表空间）</p><p>Myisam：frm是表定义文件，myd是数据文件，myi是索引文件</p></blockquote><h2 id="索引选择"><a href="#索引选择" class="headerlink" title="索引选择"></a>索引选择</h2><blockquote><p>除非需要用到某些Innodb不具备的特性，并且没有其他办法可以代替，否则都应该优先选择innodb引擎。</p></blockquote><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><blockquote><p> <a href="https://blog.csdn.net/qq_35642036/article/details/82820178" target="_blank" rel="noopener">https://blog.csdn.net/qq_35642036/article/details/82820178</a>  （里面的图片值得参考）</p><p> <a href="https://www.cnblogs.com/timor0101/p/12883649.html" target="_blank" rel="noopener">https://www.cnblogs.com/timor0101/p/12883649.html</a> </p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MyISAM与InnoDB的区别（详）&quot;&gt;&lt;a href=&quot;#MyISAM与InnoDB的区别（详）&quot; class=&quot;headerlink&quot; title=&quot;MyISAM与InnoDB的区别（详）&quot;&gt;&lt;/a&gt;MyISAM与InnoDB的区别（详）&lt;/h1&gt;&lt;h2 i
      
    
    </summary>
    
    
      <category term="SQL" scheme="https://masteryang4.github.io/categories/SQL/"/>
    
      <category term="MySQL" scheme="https://masteryang4.github.io/categories/SQL/MySQL/"/>
    
    
      <category term="易错点" scheme="https://masteryang4.github.io/tags/%E6%98%93%E9%94%99%E7%82%B9/"/>
    
      <category term="面试" scheme="https://masteryang4.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="数据库" scheme="https://masteryang4.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="https://masteryang4.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL事务相关</title>
    <link href="https://masteryang4.github.io/2020/05/14/MySQL%E4%BA%8B%E5%8A%A1%E7%9B%B8%E5%85%B3/"/>
    <id>https://masteryang4.github.io/2020/05/14/MySQL%E4%BA%8B%E5%8A%A1%E7%9B%B8%E5%85%B3/</id>
    <published>2020-05-14T09:10:57.000Z</published>
    <updated>2020-05-14T12:21:18.503Z</updated>
    
    <content type="html"><![CDATA[<h1 id="事务四大特性（ACID）"><a href="#事务四大特性（ACID）" class="headerlink" title="事务四大特性（ACID）"></a>事务四大特性（ACID）</h1><p><strong>1、原子性（Atomicity）：</strong></p><p>事务开始后所有操作，要么全部做完，要么全部不做，不可能停滞在中间环节。</p><p>事务执行过程中出错，会回滚到事务开始前的状态，所有的操作就像没有发生一样。</p><p>也就是说事务是一个不可分割的整体。</p><p>的基本单位 </p><p><strong>2、一致性（Consistency）：</strong></p><p>事务开始前和结束后，数据库的完整性约束没有被破坏 。</p><p>比如 A 向 B 转账，不可能 A 扣了钱，B 却没收到。 </p><p><strong>3、隔离性（Isolation）：</strong></p><p>同一时间，只允许一个事务请求同一数据，不同的事务之间彼此没有任何干扰。</p><p>比如 A 正在从一张银行卡中取钱，在 A 取钱的过程结束前，B 不能向这张卡转账。 </p><p><strong>4、持久性（Durability）：</strong></p><p>事务完成后，事务对数据库的所有更新将被保存到数据库，不 能回滚。 </p><h1 id="MySQL事务隔离级别"><a href="#MySQL事务隔离级别" class="headerlink" title="MySQL事务隔离级别"></a>MySQL事务隔离级别</h1><p>多个事务之间隔离的，相互独立的。</p><p>但是如果多个事务操作同一批数据，则会引发一些问题，设置不同的隔离级别就可以解决这些问题。</p><table><thead><tr><th>事务隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>读未提交（read-uncommitted）</td><td>是</td><td>是</td><td>是</td></tr><tr><td>不可重复读（read-committed）</td><td>否</td><td>是</td><td>是</td></tr><tr><td>可重复读（repeatable-read）</td><td>否</td><td>否</td><td>是</td></tr><tr><td>串行化（serializable）</td><td>否</td><td>否</td><td>否</td></tr></tbody></table><blockquote><p>隔离级别越高，效率越低。</p><p>大多数数据库的默认级别就是不可重复读（Read committed），比如Sql Server , Oracle</p><p><strong>【注意】MySQL的默认事务隔离级别是——可重复读</strong></p></blockquote><h1 id="事务并发存在的问题"><a href="#事务并发存在的问题" class="headerlink" title="事务并发存在的问题"></a>事务并发存在的问题</h1><p>1、脏读：事务 A 读取了事务 B 更新的数据，然后 B 回滚操作，那么 A 读取到的数据是脏数据。</p><p>（一个事务，读取到另一个事务中没有提交的数据）</p><p>2、不可重复读：事务A多次读取同一数据，事务B在事务A多次读取的过程中，对数据做了更新并提交，导致事务 A多次读取同一数据时，结果不一致 。</p><p>（在同一个事务中，两次读取到的数据不一样 ）</p><p>3、幻读：系统管理员 A 将数据库中所有学生的成绩从具体分数改为 ABCDE 等级，但是系统管理员 B 就在这个时候插入了一条具体分数的记录，当系统管理员 A 改结束后发现还有一条记录没有改过来，就好像发生了幻觉一样，这就叫幻读。 </p><p>（一个事务操作(DML)数据表中所有记录，另一个事务添加了一条数据，则第一个事务查询不到添加的数据）</p><p>（ 一个事务(同一个read view)在前后两次查询同一范围的时候，后一次查询看到了前一次查询没有看到的行）</p><blockquote><p>可重复读的隔离级别下使用了MVCC机制，select操作不会更新版本号，是快照读（历史版本）；</p><p>insert、update和delete会更新版本号，是当前读（当前版本）。 幻读只在<strong>当前读</strong>下才会出现。 </p></blockquote><blockquote><p>不可重复读的和幻读很容易混淆，<strong>不可重复读侧重于修改，幻读侧重于新增或删除</strong>。</p><p>解决不可重复读的问题只需锁住满足条件的行，解决幻读需要锁表等方法</p></blockquote><p><strong>幻读产生的原因：</strong></p><ul><li>行锁只能锁住行，即使把所有的行记录都上锁，也阻止不了新插入的记录。 </li></ul><p><strong>解决幻读的其他方法：</strong></p><ul><li>将两行记录间的空隙加上锁，阻止新记录的插入；这个锁称为<strong>间隙锁</strong>。 </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;事务四大特性（ACID）&quot;&gt;&lt;a href=&quot;#事务四大特性（ACID）&quot; class=&quot;headerlink&quot; title=&quot;事务四大特性（ACID）&quot;&gt;&lt;/a&gt;事务四大特性（ACID）&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;1、原子性（Atomicity）：&lt;/str
      
    
    </summary>
    
    
      <category term="SQL" scheme="https://masteryang4.github.io/categories/SQL/"/>
    
      <category term="MySQL" scheme="https://masteryang4.github.io/categories/SQL/MySQL/"/>
    
    
      <category term="易错点" scheme="https://masteryang4.github.io/tags/%E6%98%93%E9%94%99%E7%82%B9/"/>
    
      <category term="面试" scheme="https://masteryang4.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="数据库" scheme="https://masteryang4.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="https://masteryang4.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>[精]zookeeper总结与思考</title>
    <link href="https://masteryang4.github.io/2020/05/14/%E7%B2%BE-zookeeper%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/"/>
    <id>https://masteryang4.github.io/2020/05/14/%E7%B2%BE-zookeeper%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/</id>
    <published>2020-05-14T08:30:13.000Z</published>
    <updated>2020-05-14T08:56:10.020Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Zookeeper是一个开源的分布式的，为分布式应用提供协调服务的Apache项目。多作为集群提供服务的中间件.</p><p>Zookeeper从设计模式角度来理解，是一个基于<strong>观察者模式</strong>设计的分布式服务管理框架，它负责存储和管理大家都关心的数据，然后接受观察者的注册，一旦这些数据的状态发生了变化，Zookeeper就负责<strong>通知</strong>已经在Zookeeper上注册的那些观察者做出相应的反应.</p><blockquote><p>分布式系统: 分布式系统指由很多台计算机组成的一个整体。</p><p>这个整体一致对外,并且处理同一请求，系统对内透明，对外不透明。</p><p>内部的每台计算机都可以相互通信，例如使用RPC 或者是WebService。客户端向一个分布式系统发送的一次请求到接受到响应，有可能会经历多台计算机。</p></blockquote><p><strong>Zookeeper = 文件系统 + 通知机制</strong></p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>中心化集群，但是中心化集群易出现单点故障。</p><p><a href="https://pic.downk.cc/item/5ebcf7c7c2a9a83be53e07f7.png" data-fancybox="group" data-caption="zk特点" class="fancybox"><img alt="zk特点" title="zk特点" data-src="https://pic.downk.cc/item/5ebcf7c7c2a9a83be53e07f7.png" class="lazyload"></a></p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p><a href="https://pic.downk.cc/item/5ebcf7f5c2a9a83be53e3033.png" data-fancybox="group" data-caption="zk数据结构" class="fancybox"><img alt="zk数据结构" title="zk数据结构" data-src="https://pic.downk.cc/item/5ebcf7f5c2a9a83be53e3033.png" class="lazyload"></a></p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>提供的服务包括：统一命名服务、统一配置管理、统一集群管理、服务器节点动态上下线、软负载均衡等。</p><h1 id="二、安装及操作"><a href="#二、安装及操作" class="headerlink" title="二、安装及操作"></a>二、安装及操作</h1><p>需要提前安装JDK</p><p>两种部署方式：本地模式（standalone），分布式模式</p><h2 id="分布式安装部署"><a href="#分布式安装部署" class="headerlink" title="分布式安装部署"></a>分布式安装部署</h2><blockquote><p>版本：zookeeper-3.4.10</p></blockquote><p>1、规划</p><p>将在hadoop102、hadoop103和hadoop104三个节点上部署Zookeeper。</p><p>2、解压安装</p><p>三台服务器分别解压：tar -zxvf zookeeper-3.4.10.tar.gz</p><p>解压后生成zookeeper-3.4.10目录</p><p>3、配置服务器编号</p><ul><li><p>在zookeeper-3.4.10目录下创建zkData：mkdir -p zkData</p></li><li><p>进入目录：cd  zkData</p></li><li><p>创建myid文件：touch myid</p></li><li><p>编辑文件：vim myid</p></li></ul><p>在文件中添加与server对应的编号：比如hadoop02添加2；</p><ul><li>在hadoop103、hadoop104上修改myid文件中内容为3、4</li></ul><p>4、修改配置文件</p><ul><li><p>zookeeper-3.4.10/conf这个目录下的zoo_sample.cfg重命名为zoo.cfg：mv zoo_sample.cfg zoo.cfg</p></li><li><p>打开zoo.cfg文件：vim zoo.cfg</p></li><li><p>在文件中修改数据存储路径配置：</p></li></ul><p>dataDir=/opt/module/zookeeper-3.4.10/zkData</p><ul><li>并且增加如下配置：</li></ul><p>#######################cluster##########################</p><p>server.2=hadoop102:2888:3888</p><p>server.3=hadoop103:2888:3888</p><p>server.4=hadoop104:2888:3888</p><ul><li>同步zoo.cfg配置文件到其他所有服务器</li></ul><blockquote><p>【配置参数解读】server.A=B:C:D</p><p>A是一个数字，表示这个是第几号服务器【myid】；</p><p>zk启动时读取myid文件，拿到里面的数据与zoo.cfg里面的配置信息比较从而判断到底是哪个server。</p><p>B是这个服务器的ip地址；</p><p>C是这个服务器与集群中的Leader服务器交换信息的端口<strong>2888</strong>；【副本】</p><p>D是万一集群中的Leader服务器挂了，需要一个端口来重新进行选举，选出一个新的Leader，而这个端口就是用来执行选举时服务器相互通信的端口<strong>3888</strong>。【选举信息】</p><p>【扩展】<strong>2181</strong>，客户端访问端口</p></blockquote><p>5、相关操作</p><ul><li><p>三台服务器在zookeeper-3.4.10下分别启动：bin/zkServer.sh start</p></li><li><p>查看状态：bin/zkServer.sh status</p></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[ys@hadoop102 zookeeper-3.4.10]# bin/zkServer.sh status</span><br><span class="line">JMX enabled by default</span><br><span class="line">Using config: /opt/module/zookeeper-3.4.10/bin/../conf/zoo.cfg</span><br><span class="line">Mode: follower</span><br><span class="line">[ys@hadoop103 zookeeper-3.4.10]# bin/zkServer.sh status</span><br><span class="line">JMX enabled by default</span><br><span class="line">Using config: /opt/module/zookeeper-3.4.10/bin/../conf/zoo.cfg</span><br><span class="line">Mode: leader</span><br><span class="line">[ys@hadoop104 zookeeper-3.4.5]# bin/zkServer.sh status</span><br><span class="line">JMX enabled by default</span><br><span class="line">Using config: /opt/module/zookeeper-3.4.10/bin/../conf/zoo.cfg</span><br><span class="line">Mode: follower</span><br></pre></td></tr></table></figure></div><h2 id="客户端命令行操作"><a href="#客户端命令行操作" class="headerlink" title="客户端命令行操作"></a>客户端命令行操作</h2><p>启动客户端：bin/zkCli.sh</p><table><thead><tr><th>命令基本语法</th><th>功能描述</th></tr></thead><tbody><tr><td>help</td><td>显示所有操作命令</td></tr><tr><td>ls path [watch]</td><td>使用 ls 命令来查看当前znode中所包含的内容</td></tr><tr><td>ls2 path [watch]</td><td>（详细信息）查看当前节点数据并能看到更新次数等数据</td></tr><tr><td>create</td><td>普通创建<br>-s  含有序列<br>-e  临时（重启或者超时消失）</td></tr><tr><td>get path [watch]</td><td>获得节点的值</td></tr><tr><td>set</td><td>设置节点的具体值</td></tr><tr><td>stat</td><td>查看节点状态</td></tr><tr><td>delete</td><td>删除节点</td></tr><tr><td>rmr</td><td>递归删除节点</td></tr></tbody></table><h1 id="三、内部原理【重点】"><a href="#三、内部原理【重点】" class="headerlink" title="三、内部原理【重点】"></a>三、内部原理【重点】</h1><h2 id="选举机制【重点】"><a href="#选举机制【重点】" class="headerlink" title="选举机制【重点】"></a>选举机制【重点】</h2><ul><li><p>半数机制：</p><ul><li>集群中半数以上机器存活，集群可用。所以Zookeeper适合安装奇数台服务器。</li></ul></li><li><p>内部投票选举：</p><ul><li>Zookeeper虽然在配置文件中并没有指定Master和Slave。但是，Zookeeper工作时，是有一个节点为Leader，其他则为Follower，Leader是通过内部的选举机制临时产生的。</li></ul></li></ul><p>【举例】五台服务器组成的Zookeeper集群，它们的id从1-5，同时它们都是最新启动的，也就是没有历史数据，在存放数据量这一点上，都是一样的。这些服务器依序启动，则：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">因为一共5台服务器，只有超过半数以上，即最少启动3台服务器，集群才能正常工作。</span><br><span class="line"></span><br><span class="line">（1）服务器1启动，发起一次选举。</span><br><span class="line">服务器1投自己一票。此时服务器1票数一票，不够半数以上（3票），选举无法完成；</span><br><span class="line">服务器1状态保持为LOOKING；</span><br><span class="line"></span><br><span class="line">（2）服务器2启动，再发起一次选举。</span><br><span class="line">服务器1和2分别投自己一票，此时服务器1发现服务器2的id比自己大，更改选票投给服务器2；</span><br><span class="line">此时服务器1票数0票，服务器2票数2票，不够半数以上（3票），选举无法完成；</span><br><span class="line">服务器1，2状态保持LOOKING；</span><br><span class="line"></span><br><span class="line">（3）服务器3启动，发起一次选举。</span><br><span class="line">与上面过程一样，服务器1和2先投自己一票，然后因为服务器3id最大，两者更改选票投给为服务器3；</span><br><span class="line">此次投票结果：服务器1为0票，服务器2为0票，服务器3为3票。此时服务器3的票数已经超过半数（3票），服务器3当选Leader。</span><br><span class="line">服务器1，2更改状态为FOLLOWING，服务器3更改状态为LEADING；</span><br><span class="line"></span><br><span class="line">（4）服务器4启动，发起一次选举。</span><br><span class="line">此时服务器1，2，3已经不是LOOKING状态，不会更改选票信息。交换选票信息结果：服务器3为3票，服务器4为1票。</span><br><span class="line">此时服务器4服从多数，更改选票信息为服务器3；</span><br><span class="line">服务器4并更改状态为FOLLOWING；</span><br><span class="line"></span><br><span class="line">（5）服务器5启动，同4一样投票给3，此时服务器3一共5票，服务器5为0票；</span><br><span class="line">服务器5并更改状态为FOLLOWING；</span><br><span class="line"></span><br><span class="line">最终Leader是服务器3，状态为LEADING；</span><br><span class="line">其余服务器是Follower，状态为FOLLOWING。</span><br></pre></td></tr></table></figure></div><blockquote><p>参考文章： <a href="https://blog.csdn.net/weixin_43291055/article/details/95451357" target="_blank" rel="noopener">https://blog.csdn.net/weixin_43291055/article/details/95451357</a> </p><p>选举机制文章推荐：</p><p> <a href="https://www.cnblogs.com/shuaiandjun/p/9383655.html" target="_blank" rel="noopener">https://www.cnblogs.com/shuaiandjun/p/9383655.html</a> </p><p> <a href="https://blog.csdn.net/wyqwilliam/article/details/83537139" target="_blank" rel="noopener">https://blog.csdn.net/wyqwilliam/article/details/83537139</a> </p></blockquote><h2 id="节点类型"><a href="#节点类型" class="headerlink" title="节点类型"></a>节点类型</h2><p><a href="https://pic.downk.cc/item/5ebcf83cc2a9a83be53e6d2f.png" data-fancybox="group" data-caption="zk节点4大类型" class="fancybox"><img alt="zk节点4大类型" title="zk节点4大类型" data-src="https://pic.downk.cc/item/5ebcf83cc2a9a83be53e6d2f.png" class="lazyload"></a></p><h2 id="监听器原理【重点】"><a href="#监听器原理【重点】" class="headerlink" title="监听器原理【重点】"></a>监听器原理【重点】</h2><p><a href="https://pic.downk.cc/item/5ebcf87ac2a9a83be53ea28e.png" data-fancybox="group" data-caption="监听器原理" class="fancybox"><img alt="监听器原理" title="监听器原理" data-src="https://pic.downk.cc/item/5ebcf87ac2a9a83be53ea28e.png" class="lazyload"></a></p><h2 id="写数据流程"><a href="#写数据流程" class="headerlink" title="写数据流程"></a>写数据流程</h2><p><a href="https://pic.downk.cc/item/5ebcf898c2a9a83be53ebe79.png" data-fancybox="group" data-caption="写数据流程" class="fancybox"><img alt="写数据流程" title="写数据流程" data-src="https://pic.downk.cc/item/5ebcf898c2a9a83be53ebe79.png" class="lazyload"></a></p><h2 id="【案例】监听服务器节点动态上下线-zk工作机制"><a href="#【案例】监听服务器节点动态上下线-zk工作机制" class="headerlink" title="【案例】监听服务器节点动态上下线/zk工作机制"></a>【案例】监听服务器节点动态上下线/zk工作机制</h2><p><a href="https://pic.downk.cc/item/5ebcf8b1c2a9a83be53ed66b.png" data-fancybox="group" data-caption="zk工作机制" class="fancybox"><img alt="zk工作机制" title="zk工作机制" data-src="https://pic.downk.cc/item/5ebcf8b1c2a9a83be53ed66b.png" class="lazyload"></a></p><h3 id="API操作："><a href="#API操作：" class="headerlink" title="API操作："></a>API操作：</h3><p>1、maven依赖</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.zookeeper/zookeeper --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>2、集群上创建/servers节点</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 10] create /servers "servers"</span><br><span class="line">Created /servers</span><br></pre></td></tr></table></figure></div><p>3、服务器端向Zookeeper注册</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.CreateMode;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.WatchedEvent;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooKeeper;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooDefs.Ids;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistributeServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String connectString = <span class="string">"hadoop102:2181,hadoop103:2181,hadoop104:2181"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> sessionTimeout = <span class="number">2000</span>;</span><br><span class="line"><span class="keyword">private</span> ZooKeeper zk = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> String parentNode = <span class="string">"/servers"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建到zk的客户端连接</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getConnect</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line"></span><br><span class="line">zk = <span class="keyword">new</span> ZooKeeper(connectString, sessionTimeout, <span class="keyword">new</span> Watcher() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册服务器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registServer</span><span class="params">(String hostname)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">String create = zk.create(parentNode + <span class="string">"/server"</span>, hostname.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL);</span><br><span class="line"></span><br><span class="line">System.out.println(hostname +<span class="string">" is online "</span>+ create);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 业务功能</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">business</span><span class="params">(String hostname)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">System.out.println(hostname+<span class="string">" is working ..."</span>);</span><br><span class="line"></span><br><span class="line">Thread.sleep(Long.MAX_VALUE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1获取zk连接</span></span><br><span class="line">DistributeServer server = <span class="keyword">new</span> DistributeServer();</span><br><span class="line">server.getConnect();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 利用zk连接注册服务器信息</span></span><br><span class="line">server.registServer(args[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3 启动业务功能</span></span><br><span class="line">server.business(args[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>4、客户端</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.WatchedEvent;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.Watcher;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooKeeper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DistributeClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String connectString = <span class="string">"hadoop102:2181,hadoop103:2181,hadoop104:2181"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> sessionTimeout = <span class="number">2000</span>;</span><br><span class="line"><span class="keyword">private</span> ZooKeeper zk = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> String parentNode = <span class="string">"/servers"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建到zk的客户端连接</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getConnect</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">zk = <span class="keyword">new</span> ZooKeeper(connectString, sessionTimeout, <span class="keyword">new</span> Watcher() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 再次启动监听</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">getServerList();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取服务器列表信息</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getServerList</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1获取服务器子节点信息，并且对父节点进行监听</span></span><br><span class="line">List&lt;String&gt; children = zk.getChildren(parentNode, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2存储服务器信息列表</span></span><br><span class="line">ArrayList&lt;String&gt; servers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3遍历所有节点，获取节点中的主机名称信息</span></span><br><span class="line"><span class="keyword">for</span> (String child : children) &#123;</span><br><span class="line"><span class="keyword">byte</span>[] data = zk.getData(parentNode + <span class="string">"/"</span> + child, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">servers.add(<span class="keyword">new</span> String(data));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4打印服务器列表信息</span></span><br><span class="line">System.out.println(servers);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 业务功能</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">business</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"client is working ..."</span>);</span><br><span class="line">Thread.sleep(Long.MAX_VALUE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1获取zk连接</span></span><br><span class="line">DistributeClient client = <span class="keyword">new</span> DistributeClient();</span><br><span class="line">client.getConnect();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2获取servers的子节点信息，从中获取服务器信息列表</span></span><br><span class="line">client.getServerList();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3业务进程启动</span></span><br><span class="line">client.business();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="四、其他"><a href="#四、其他" class="headerlink" title="四、其他"></a>四、其他</h1><h2 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h2><p>1、zk常用端口号：</p><blockquote><p>2181，客户端访问端口<br>2888，zk内部信息通讯（数据）<br>3888，zk选举专用</p></blockquote><p>2、zk不能越级创建节点；</p><p>且创建节点一般要带有数据（除非数据是null），否则创建会失败</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[zk: localhost:2181(CONNECTED) 1] create /ys/sss "666"</span><br><span class="line">Node does not exist: /ys/sss</span><br><span class="line">[zk: localhost:2181(CONNECTED) 2] create /ys "666"    </span><br><span class="line">Created /ys</span><br><span class="line">...</span><br><span class="line">[zk: localhost:2181(CONNECTED) 16] create /ss null</span><br><span class="line">Created /ys </span><br><span class="line">[zk: localhost:2181(CONNECTED) 17] ls /</span><br><span class="line">[cluster, configs, controller, brokers, zookeeper, overseer, admin, isr_change_notification, controller_epoch, druid, aliases.json, live_nodes, collections, overseer_elect, spark, clusterstate.json, consumers, 【ss】, latest_producer_id_block, config, hbase, kylin]</span><br><span class="line">[zk: localhost:2181(CONNECTED) 18] ls /ss</span><br><span class="line">[]</span><br><span class="line">[zk: localhost:2181(CONNECTED) 19] get /ss</span><br><span class="line">null</span><br><span class="line">...</span><br></pre></td></tr></table></figure></div><h2 id="常考面试题"><a href="#常考面试题" class="headerlink" title="常考面试题"></a>常考面试题</h2><ul><li><p>请简述ZooKeeper的选举机制</p><blockquote><p>半数机制：2n+1 </p><p>10 台服务器：3 台 zk</p><p>20 台服务器：5 台 zk</p><p>100 台服务器：11 台 zk</p><p>【注意】台数并不是越多越好。 太多选举时间过长影响性能。 </p></blockquote></li><li><p>ZooKeeper的监听原理</p></li><li><p>ZooKeeper的常用命令</p></li><li><p>ZooKeeper的部署方式有哪几种？集群中的角色有哪些？集群最少需要几台机器？</p><ul><li>部署方式单机模式、集群模式</li><li>角色：Leader和Follower</li><li>集群最少需要机器数：3</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、介绍&quot;&gt;&lt;a href=&quot;#一、介绍&quot; class=&quot;headerlink&quot; title=&quot;一、介绍&quot;&gt;&lt;/a&gt;一、介绍&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h
      
    
    </summary>
    
    
      <category term="大数据" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="zookeeper" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/zookeeper/"/>
    
    
      <category term="易错点" scheme="https://masteryang4.github.io/tags/%E6%98%93%E9%94%99%E7%82%B9/"/>
    
      <category term="面试" scheme="https://masteryang4.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="大数据" scheme="https://masteryang4.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="教程" scheme="https://masteryang4.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="zookeeper" scheme="https://masteryang4.github.io/tags/zookeeper/"/>
    
      <category term="分布式" scheme="https://masteryang4.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>[精]Redis总结与思考</title>
    <link href="https://masteryang4.github.io/2020/05/12/%E7%B2%BE-Redis%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/"/>
    <id>https://masteryang4.github.io/2020/05/12/%E7%B2%BE-Redis%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/</id>
    <published>2020-05-12T14:20:49.000Z</published>
    <updated>2020-06-07T15:13:39.574Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis介绍及安装"><a href="#Redis介绍及安装" class="headerlink" title="Redis介绍及安装"></a>Redis介绍及安装</h1><h2 id="Redis简介"><a href="#Redis简介" class="headerlink" title="Redis简介"></a>Redis简介</h2><p>1、Redis是最常用的非关系型数据库（NoSQL）——不依赖业务逻辑方式存储，而以简单的key-value模式存储。</p><blockquote><p>常见的NoSQL数据库：</p><p>​         Memcached,Redis,MongoDB,HBase</p></blockquote><p>2、Redis有16个库，编号为0~15，默认使用0号库。</p><p>3、Redis使用的是<strong>单线程+多路IO复用技术</strong>（Linux系统特有）。</p><h2 id="Redis安装及启动"><a href="#Redis安装及启动" class="headerlink" title="Redis安装及启动"></a>Redis安装及启动</h2><p><strong>1、Redis安装步骤：</strong></p><ul><li>首先保证有gcc-c++工具，否则先执行：yum install gcc-c++</li><li>下载获得redis-3.2.5.tar.gz后将它放入Linux目录</li><li>解压命令:tar -zxvf redis-3.2.5.tar.gz</li><li>解压完成后进入目录:cd redis-3.2.5</li><li>在redis-3.2.5目录下执行make命令</li><li>在redis-3.2.5目录下执行make install命令</li></ul><p><strong>2、Redis默认安装目录：/usr/local/bin</strong></p><ul><li>redis-benchmark：性能测试工具，可以在自己本子运行，看看自己本子性能如何(服务启动起来后执行)</li><li>redis-check-aof：修复有问题的AOF文件</li><li>redis-check-rdb：修复有问题RDB文件</li><li>redis-sentinel：Redis集群使用</li><li>redis-server：Redis服务器启动命令</li><li>redis-cli：客户端，操作入口</li></ul><p><strong>3、Redis启动：</strong></p><ul><li>备份redis.conf：拷贝一份redis.conf到其他目录</li><li>修改redis.conf文件将里面的daemonize no 改成 yes(128行)，让服务在后台启动</li><li>启动命令：执行  redis-server  /root/myredis/redis.conf</li><li>用客户端访问: redis-cli -p  <strong>6379</strong></li><li>关闭：客户端中输入shutdown，redis-server进程就已关闭。之后Ctrl+c退出客户端即可。</li></ul><h1 id="Redis数据类型"><a href="#Redis数据类型" class="headerlink" title="Redis数据类型"></a>Redis数据类型</h1><blockquote><p><strong>常用</strong>五大数据类型：String,list,set,hash,zset</p></blockquote><p>五大数据类型常用指令：</p><h2 id="0、Key"><a href="#0、Key" class="headerlink" title="0、Key"></a>0、Key</h2><table><thead><tr><th>Key常用指令</th><th></th></tr></thead><tbody><tr><td>keys *</td><td>查询当前库的所有键</td></tr><tr><td>exists <code>&lt;key&gt;</code></td><td>判断某个键是否存在</td></tr><tr><td>type  <code>&lt;key&gt;</code></td><td>查看键对应的数据的类型</td></tr><tr><td>del  <code>&lt;key&gt;</code></td><td>删除某个键</td></tr><tr><td>expire   <code>&lt;key&gt; &lt;seconds&gt;</code></td><td>为键值设置过期时间，单位秒</td></tr><tr><td>ttl   <code>&lt;key&gt;</code></td><td>查看还有多少秒过期，-1表示永不过期，-2表示已过期</td></tr><tr><td>dbsize</td><td>查看当前数据库的key的数量</td></tr><tr><td>flushdb</td><td>清空当前库</td></tr><tr><td>flushall</td><td>通杀全部库</td></tr></tbody></table><h2 id="1、String"><a href="#1、String" class="headerlink" title="1、String"></a>1、String</h2><ul><li>String类型是二进制安全的。意味着Redis的string可以包含任何数据。比如jpg图片或者序列化的对象 。</li><li>String类型是Redis最基本的数据类型，一个Redis中字符串value最多可以是512M</li></ul><table><thead><tr><th>String常用指令</th><th></th></tr></thead><tbody><tr><td>get   <code>&lt;key&gt;</code></td><td>查询对应键值</td></tr><tr><td>set   <code>&lt;key&gt;  &lt;value&gt;</code></td><td>添加键值对</td></tr><tr><td>append  <code>&lt;key&gt;  &lt;value&gt;</code></td><td>将给定的<code>&lt;value&gt;</code>追加到原值的末尾</td></tr><tr><td>strlen  <code>&lt;key&gt;</code></td><td>获得值的长度</td></tr><tr><td>setnx  <code>&lt;key&gt;  &lt;value&gt;</code></td><td>只有在 key 不存在时设置 key 的值</td></tr><tr><td>incr <code>&lt;key&gt;</code></td><td>将 key 中储存的数字值增1。<br>只能对数字值操作，如果为空，新增值为1</td></tr><tr><td>decr  <code>&lt;key&gt;</code></td><td>将 key 中储存的数字值减1。<br>只能对数字值操作，如果为空，新增值为-1</td></tr><tr><td>incrby / decrby  <code>&lt;key&gt;</code>  <code>&lt;步长&gt;</code></td><td>将 key 中储存的数字值增减。自定义步长</td></tr><tr><td>mset  <code>&lt;key1&gt;  &lt;value1&gt;  &lt;key2&gt;  &lt;value2&gt;</code>  …</td><td>同时设置一个或多个 key-value对</td></tr><tr><td>mget  <code>&lt;key1&gt;   &lt;key2&gt;   &lt;key3&gt;</code> …</td><td>同时获取一个或多个 value</td></tr><tr><td>msetnx <code>&lt;key1&gt;  &lt;value1&gt;  &lt;key2&gt;  &lt;value2&gt;</code>  …</td><td>同时设置一个或多个 key-value 对，<br>当且仅当所有给定 key 都不存在。</td></tr><tr><td>getrange  <code>&lt;key&gt;  &lt;起始位置&gt;  &lt;结束位置&gt;</code></td><td>获得值的范围，类似java中的substring</td></tr><tr><td>setrange  <code>&lt;key&gt;   &lt;起始位置&gt;   &lt;value&gt;</code></td><td>用 <code>&lt;value&gt;</code>覆写<code>&lt;key&gt;</code>所储存的字符串值<br>，从<code>&lt;起始位置&gt;</code>开始</td></tr><tr><td>setex  <code>&lt;key&gt;  &lt;过期时间&gt;   &lt;value&gt;</code></td><td>设置键值的同时，设置过期时间，单位秒</td></tr><tr><td>getset <code>&lt;key&gt;  &lt;value&gt;</code></td><td>以新换旧，设置了新值同时获得旧值</td></tr></tbody></table><h2 id="2、List"><a href="#2、List" class="headerlink" title="2、List"></a>2、List</h2><ul><li>单键多值</li><li>Redis 列表是简单的字符串列表，按照插入顺序排序。</li><li>它的底层实际是个双向链表，对两端的操作性能很高，通过索引下标的操作中间的节点性能会较差。</li></ul><table><thead><tr><th>List常用指令</th><th></th></tr></thead><tbody><tr><td>lpush/rpush  <code>&lt;key&gt;  &lt;value1&gt;  &lt;value2&gt;</code> …</td><td>从左边/右边插入一个或多个值</td></tr><tr><td>lpop/rpop  <code>&lt;key&gt;</code></td><td>从左边/右边吐出一个值。值在键在，值亡键亡。</td></tr><tr><td>rpoplpush  <code>&lt;key1&gt;  &lt;key2&gt;</code></td><td>从<code>&lt;key1&gt;</code>列表右边吐出一个值，插到<code>&lt;key2&gt;</code>列表左边</td></tr><tr><td>lrange <code>&lt;key&gt; &lt;start&gt; &lt;stop&gt;</code></td><td>按照索引下标获得元素(从左到右)</td></tr><tr><td>lindex <code>&lt;key&gt; &lt;index&gt;</code></td><td>按照索引下标获得元素(从左到右)</td></tr><tr><td>llen <code>&lt;key&gt;</code></td><td>获得列表长度</td></tr><tr><td>linsert <code>&lt;key&gt;</code>  before <code>&lt;value&gt;  &lt;newvalue&gt;</code></td><td>在<code>&lt;value&gt;</code>的前面插入<code>&lt;newvalue&gt;</code></td></tr><tr><td>lrem <code>&lt;key&gt; &lt;n&gt;  &lt;value&gt;</code></td><td>从左边删除n个value(从左到右)</td></tr></tbody></table><h2 id="3、Set"><a href="#3、Set" class="headerlink" title="3、Set"></a>3、Set</h2><ul><li>Redis的Set是string类型的无序集合</li><li>它底层其实是一个value为null的hash表,所以添加，删除，查找的复杂度都是O(1)。</li></ul><table><thead><tr><th>Set常用指令</th><th></th></tr></thead><tbody><tr><td>sadd <code>&lt;key&gt;  &lt;value1&gt;  &lt;value2&gt;</code> …</td><td>将一个或多个 member 元素加入到集合 key 当中，<br>已经存在于集合的 member 元素将被忽略。</td></tr><tr><td>smembers <code>&lt;key&gt;</code></td><td>取出该集合的所有值</td></tr><tr><td>sismember <code>&lt;key&gt;  &lt;value&gt;</code></td><td>判断集合<code>&lt;key&gt;</code>是否为含有该<code>&lt;value&gt;</code>值，有返回1，没有返回0</td></tr><tr><td>scard   <code>&lt;key&gt;</code></td><td>返回该集合的元素个数。</td></tr><tr><td>srem <code>&lt;key&gt; &lt;value1&gt; &lt;value2&gt;</code> …</td><td>删除集合中的某个元素。</td></tr><tr><td>spop <code>&lt;key&gt; &lt;n&gt;</code></td><td>随机从该集合中吐出一个或多个值。</td></tr><tr><td>srandmember <code>&lt;key&gt; &lt;n&gt;</code></td><td>随机从该集合中取出n个值。不会从集合中删除。</td></tr><tr><td>sinter <code>&lt;key1&gt; &lt;key2&gt;</code></td><td>返回两个集合的交集元素。</td></tr><tr><td>sunion <code>&lt;key1&gt; &lt;key2&gt;</code></td><td>返回两个集合的并集元素。</td></tr><tr><td>sdiff <code>&lt;key1&gt; &lt;key2&gt;</code></td><td>返回两个集合的差集元素。</td></tr></tbody></table><h2 id="4、Hash"><a href="#4、Hash" class="headerlink" title="4、Hash"></a>4、Hash</h2><ul><li>Redis  hash 是一个键值对集合。</li><li>Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储<strong>对象</strong>。</li><li>类似Java里面的Map&lt;String,Object&gt;</li></ul><table><thead><tr><th align="left">Hash常用指令</th><th></th></tr></thead><tbody><tr><td align="left">hset <code>&lt;key&gt;  &lt;field&gt;  &lt;value&gt;</code></td><td>给<code>&lt;key&gt;</code>集合中的<code>&lt;field&gt;</code>键赋值<code>&lt;value&gt;</code></td></tr><tr><td align="left">hget <code>&lt;key&gt;  &lt;field&gt;</code></td><td>从<code>&lt;key&gt;</code>集合<code>&lt;field&gt;</code>取出 value</td></tr><tr><td align="left">hmset <code>&lt;key&gt;  &lt;field1&gt; &lt;value1&gt; &lt;field2&gt; &lt;value2&gt;</code>…</td><td>批量设置hash的值</td></tr><tr><td align="left">hexists key  <code>&lt;field&gt;</code></td><td>查看哈希表 key 中，给定域 field 是否存在</td></tr><tr><td align="left">hkeys <code>&lt;key&gt;</code></td><td>列出该hash集合的所有field</td></tr><tr><td align="left">hvals <code>&lt;key&gt;</code></td><td>列出该hash集合的所有value</td></tr><tr><td align="left">hincrby <code>&lt;key&gt; &lt;field&gt;  &lt;increment&gt;</code></td><td>为哈希表 key 中的域 field 的值加上增量 increment</td></tr><tr><td align="left">hsetnx <code>&lt;key&gt;  &lt;field&gt; &lt;value&gt;</code></td><td>将哈希表 key 中的域 field 的值设置为 value ，当且仅当域 field 不存在</td></tr></tbody></table><h2 id="5、zset-sorted-set"><a href="#5、zset-sorted-set" class="headerlink" title="5、zset  (sorted set)"></a>5、zset  (sorted set)</h2><ul><li><p>Redis有序集合zset与普通集合set非常相似，是一个没有重复元素的字符串集合。</p></li><li><p>有序集合的所有成员都关联了一个评分（score） ，这个评分（score）被用来按照从最低分到最高分的方式排序集合中的成员。（集合的成员是唯一的，但是评分可以是重复了的）</p></li><li><p>因为元素是有序的, 所以你也可以很快的根据评分（score）或者次序（position）来获取一个范围的元素。访问有序集合的中间元素也是非常快的,因此你能够使用有序集合作为一个没有重复成员的智能列表。</p></li></ul><table><thead><tr><th>zset常用指令</th><th></th></tr></thead><tbody><tr><td>zadd  <code>&lt;key&gt; &lt;score1&gt; &lt;value1&gt;  &lt;score2&gt; &lt;value2&gt;</code>…</td><td>将一个或多个 member 元素及其 score 值加入到有序集 key 当中</td></tr><tr><td>zrange <code>&lt;key&gt;  &lt;start&gt; &lt;stop&gt;</code>  [WITHSCORES]</td><td>返回有序集 key 中，下标在<code>&lt;start&gt; &lt;stop&gt;</code>之间的元素。<br>带WITHSCORES，可以让分数一起和值返回到结果集。</td></tr><tr><td>zrangebyscore key min max [withscores] [limit offset count]</td><td>返回有序集 key 中，所有 score 值介于 min 和 max 之间(包括等于 min 或 max )的成员。有序集成员按 score 值递增(从小到大)次序排列</td></tr><tr><td>zrevrangebyscore key max min [withscores] [limit offset count]</td><td>同上，改为从大到小排列</td></tr><tr><td>zincrby <code>&lt;key&gt; &lt;increment&gt; &lt;value&gt;</code></td><td>为元素的score加上增量</td></tr><tr><td>zrem  <code>&lt;key&gt;  &lt;value&gt;</code></td><td>删除该集合下，指定值的元素</td></tr><tr><td>zcount <code>&lt;key&gt;  &lt;min&gt;  &lt;max&gt;</code></td><td>统计该集合，分数区间内的元素个数</td></tr><tr><td>zrank <code>&lt;key&gt;  &lt;value&gt;</code></td><td>返回该值在集合中的排名，从0开始</td></tr></tbody></table><h1 id="Redis的Java客户端Jedis"><a href="#Redis的Java客户端Jedis" class="headerlink" title="Redis的Java客户端Jedis"></a>Redis的Java客户端Jedis</h1><p>maven依赖：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>注意事项：</p><ul><li>禁用Linux的防火墙：</li><li>临时禁用：service iptables stop</li><li>关闭开机自启：chkconfig iptables off</li><li>redis.conf中注释掉bind 127.0.0.1（61行） ,然后 protect-mode（80行）设置为 no。</li></ul><p>Jedis测试连通性</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//连接本地的 Redis 服务</span></span><br><span class="line">    Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"127.0.0.1"</span>,<span class="number">6379</span>);</span><br><span class="line">    <span class="comment">//查看服务是否运行，打出pong表示OK</span></span><br><span class="line">    System.out.println(<span class="string">"connection is OK==========&gt;: "</span>+jedis.ping());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>Jedis-API:    Key</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//key</span></span><br><span class="line">Set&lt;String&gt; keys = jedis.keys(<span class="string">"*"</span>);</span><br><span class="line"><span class="keyword">for</span> (Iterator iterator = keys.iterator(); iterator.hasNext();) &#123;</span><br><span class="line">    String key = (String) iterator.next();</span><br><span class="line">    System.out.println(key);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"jedis.exists====&gt;"</span>+jedis.exists(<span class="string">"k2"</span>));</span><br><span class="line">System.out.println(jedis.ttl(<span class="string">"k1"</span>));</span><br></pre></td></tr></table></figure></div><p>Jedis-API:    String</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(jedis.get(<span class="string">"k1"</span>));</span><br><span class="line">jedis.set(<span class="string">"k4"</span>,<span class="string">"k4_Redis"</span>);</span><br><span class="line">System.out.println(<span class="string">"----------------------------------------"</span>);</span><br><span class="line">jedis.mset(<span class="string">"str1"</span>,<span class="string">"v1"</span>,<span class="string">"str2"</span>,<span class="string">"v2"</span>,<span class="string">"str3"</span>,<span class="string">"v3"</span>);</span><br><span class="line">System.out.println(jedis.mget(<span class="string">"str1"</span>,<span class="string">"str2"</span>,<span class="string">"str3"</span>));</span><br></pre></td></tr></table></figure></div><p>Jedis-API:    List</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = jedis.lrange(<span class="string">"mylist"</span>,<span class="number">0</span>,-<span class="number">1</span>);</span><br><span class="line">     <span class="keyword">for</span> (String element : list) &#123;</span><br><span class="line">       System.out.println(element);</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure></div><p>Jedis-API:    Set</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">jedis.sadd(<span class="string">"orders"</span>,<span class="string">"jd001"</span>);</span><br><span class="line">jedis.sadd(<span class="string">"orders"</span>,<span class="string">"jd002"</span>);</span><br><span class="line">jedis.sadd(<span class="string">"orders"</span>,<span class="string">"jd003"</span>);</span><br><span class="line">Set&lt;String&gt; set1 = jedis.smembers(<span class="string">"orders"</span>);</span><br><span class="line"><span class="keyword">for</span> (Iterator iterator = set1.iterator(); iterator.hasNext();) &#123;</span><br><span class="line">    String string = (String) iterator.next();</span><br><span class="line">    System.out.println(string);</span><br><span class="line">&#125;</span><br><span class="line">jedis.srem(<span class="string">"orders"</span>,<span class="string">"jd002"</span>);</span><br></pre></td></tr></table></figure></div><p>Jedis-API:    hash[注意]</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">jedis.hset(<span class="string">"hash1"</span>,<span class="string">"userName"</span>,<span class="string">"lisi"</span>);</span><br><span class="line">System.out.println(jedis.hget(<span class="string">"hash1"</span>,<span class="string">"userName"</span>));</span><br><span class="line">Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;String,String&gt;(); <span class="comment">//【注意】</span></span><br><span class="line">map.put(<span class="string">"telphone"</span>,<span class="string">"13810169999"</span>);</span><br><span class="line">map.put(<span class="string">"address"</span>,<span class="string">"atguigu"</span>);</span><br><span class="line">map.put(<span class="string">"email"</span>,<span class="string">"abc@163.com"</span>);</span><br><span class="line">jedis.hmset(<span class="string">"hash2"</span>,map);</span><br><span class="line">List&lt;String&gt; result = jedis.hmget(<span class="string">"hash2"</span>, <span class="string">"telphone"</span>,<span class="string">"email"</span>);</span><br><span class="line"><span class="keyword">for</span> (String element : result) &#123;</span><br><span class="line">    System.out.println(element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>Jedis-API:    zset</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">jedis.zadd(<span class="string">"zset01"</span>,<span class="number">60</span>d,<span class="string">"v1"</span>);</span><br><span class="line">jedis.zadd(<span class="string">"zset01"</span>,<span class="number">70</span>d,<span class="string">"v2"</span>);</span><br><span class="line">jedis.zadd(<span class="string">"zset01"</span>,<span class="number">80</span>d,<span class="string">"v3"</span>);</span><br><span class="line">jedis.zadd(<span class="string">"zset01"</span>,<span class="number">90</span>d,<span class="string">"v4"</span>);</span><br><span class="line">Set&lt;String&gt; s1 = jedis.zrange(<span class="string">"zset01"</span>,<span class="number">0</span>,-<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (Iterator iterator = s1.iterator(); iterator.hasNext();) &#123;</span><br><span class="line">    String string = (String) iterator.next();</span><br><span class="line">    System.out.println(string);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="Redis事务"><a href="#Redis事务" class="headerlink" title="Redis事务"></a>Redis事务</h1><ul><li>Redis事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</li><li>Redis事务的主要作用就是串联多个命令防止别的命令插队</li></ul><blockquote><p>悲观锁(Pessimistic Lock)，顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。</p><p>乐观锁(Optimistic Lock)， 顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。乐观锁适用于多读的应用类型，这样可以提高吞吐量。Redis就是利用这种check-and-set机制实现事务的。</p></blockquote><p>三特性：</p><p>1、单独的隔离操作 </p><ul><li>事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。 </li></ul><p>2、没有隔离级别的概念 </p><ul><li>队列中的命令没有提交之前都不会实际的被执行，因为事务提交前任何指令都不会被实际执行，也就不存在“事务内的查询要看到事务里的更新，在事务外查询不能看到”这个让人万分头痛的问题 </li></ul><p>3、不保证原子性 </p><ul><li>Redis同一个事务中如果有一条命令执行失败，其后的命令仍然会被执行，没有回滚 </li></ul><h1 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h1><h2 id="1、RDB-（Redis-DataBase）"><a href="#1、RDB-（Redis-DataBase）" class="headerlink" title="1、RDB （Redis DataBase）"></a>1、RDB （Redis DataBase）</h2><ul><li>在指定的时间间隔内将内存中的数据集快照写入磁盘，也就是行话讲的Snapshot快照，它恢复时是将快照文件直接读到内存里。</li></ul><blockquote><p>备份是如何执行的：</p><p>Redis会单独创建（fork）一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程都结束了，再用这个临时文件替换上次持久化好的文件。整个过程中，主进程是不进行任何IO操作的，这就确保了极高的性能如果需要进行大规模数据的恢复，且对于数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加的高效。RDB的缺点是最后一次持久化后的数据可能丢失。</p></blockquote><blockquote><p>关于fork：在Linux程序中，fork()会产生一个和父进程完全相同的子进程，但子进程在此后多会exec系统调用，出于效率考虑，Linux中引入了“写时复制技术”，一般情况父进程和子进程会共用同一段物理内存，只有进程空间的各段的内容要发生变化时，才会将父进程的内容复制一份给子进程。</p></blockquote><ul><li>在redis.conf中配置文件名称，默认为dump.rdb</li></ul><p><strong>RDB优缺点：</strong></p><ul><li><p>优点</p><ul><li>节省磁盘空间</li><li>恢复速度快</li></ul></li><li><p>rdb的缺点</p><ul><li>虽然Redis在fork时使用了写时拷贝技术,但是如果数据庞大时还是比较消耗性能。</li><li>在备份周期在一定间隔时间做一次备份，所以如果Redis意外down掉的话，就会丢失最后一次快照后的所有修改。</li></ul></li></ul><h2 id="2、AOF-（Append-Of-File）"><a href="#2、AOF-（Append-Of-File）" class="headerlink" title="2、AOF （Append Of File）"></a>2、AOF （Append Of File）</h2><ul><li>以日志的形式来记录每个写操作，将Redis执行过的所有写指令记录下来(读操作不记录)，只许追加文件但不可以改写文件，Redis启动之初会读取该文件重新构建数据，换言之，Redis重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作。</li><li>AOF默认不开启，需要手动在配置文件中配置</li><li>可以在redis.conf中配置文件名称，默认为 appendonly.aof </li><li>AOF和RDB同时开启，系统默认取AOF的数据</li></ul><p>AOF文件故障恢复：</p><ul><li>AOF文件的保存路径，同RDB的路径一致。</li><li>如遇到AOF文件损坏，可通过 <code>redis-check-aof  --fix  appendonly.aof</code>  进行恢复</li></ul><p>Rewrite：</p><ul><li>AOF采用文件追加方式，文件会越来越大为避免出现此种情况，新增了重写机制,当AOF文件的大小超过所设定的阈值时，Redis就会启动AOF文件的内容压缩，只保留可以恢复数据的最小指令集.可以使用命令bgrewriteaof。</li></ul><p><strong>AOF优缺点：</strong></p><ul><li><p>优点：</p><ul><li>备份机制更稳健，丢失数据概率更低。</li><li>可读的日志文本，通过操作AOF稳健，可以处理误操作。</li></ul></li><li><p>缺点：</p><ul><li>比起RDB占用更多的磁盘空间。</li><li>恢复备份速度要慢。</li><li>每次读写都同步的话，有一定的性能压力。</li><li>存在个别Bug，造成恢复不能。</li></ul></li></ul><p><strong>用哪个好呢</strong></p><ul><li>官方推荐两个都启用。</li><li>如果对数据不敏感，可以选单独用RDB。</li><li>不建议单独用 AOF，因为可能会出现Bug。</li><li>如果只是做纯内存缓存，可以都不用。</li></ul><h1 id="Redis主从复制"><a href="#Redis主从复制" class="headerlink" title="Redis主从复制"></a>Redis主从复制</h1><p>概念：主从复制，就是主机数据更新后根据配置和策略，自动同步到备机的master/slaver机制，Master以写为主，Slave以读为主。</p><p>用处：读写分离，性能扩展。容灾快速回复。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">配从(服务器)不配主(服务器):</span><br><span class="line">- 拷贝多个redis.conf文件include</span><br><span class="line">- 开启daemonize yes</span><br><span class="line">- Pid文件名字pidfile</span><br><span class="line">- 指定端口port</span><br><span class="line">- Log文件名字</span><br><span class="line">- Dump.rdb名字dbfilename</span><br><span class="line">- Appendonly 关掉或者换名字</span><br><span class="line"></span><br><span class="line">info replication:打印主从复制的相关信息</span><br><span class="line">slaveof  &lt;ip&gt;  &lt;port&gt;  :成为某个实例的从服务器</span><br></pre></td></tr></table></figure></div><h2 id="一主二仆模式："><a href="#一主二仆模式：" class="headerlink" title="一主二仆模式："></a>一主二仆模式：</h2><blockquote><p>复制原理：</p><ul><li>每次从机联通后，都会给主机发送sync指令</li><li>主机立刻进行存盘操作，发送RDB文件，给从机</li><li>从机收到RDB文件后，进行全盘加载</li><li>之后每次主机的写操作，都会立刻发送给从机，从机执行相同的命令</li></ul></blockquote><p>薪火相传：</p><ul><li>上一个slave可以是下一个slave的Master，slave同样可以接收其他slaves的连接和同步请求，那么该slave作为了链条中下一个的master, 可以有效减轻master的写压力,去中心化降低风险。</li><li>用 slaveof <code>&lt;ip&gt;</code> <code>&lt;port&gt;</code></li><li>中途变更转向:会清除之前的数据，重新建立拷贝最新的</li><li>风险是一旦某个slave宕机，后面的slave都没法备份</li></ul><p>反客为主：</p><ul><li>当一个master宕机后，后面的slave可以立刻升为master，其后面的slave不用做任何修改。。</li><li>用 slaveof  no one  将从机变为主机。</li></ul><h2 id="哨兵模式-sentinel"><a href="#哨兵模式-sentinel" class="headerlink" title="哨兵模式(sentinel)"></a>哨兵模式(sentinel)</h2><p>反客为主的自动版，能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1、配置哨兵：</span><br><span class="line">调整为一主二仆模式</span><br><span class="line">自定义的&#x2F;myredis目录下新建sentinel.conf文件</span><br><span class="line">在配置文件中填写内容：</span><br><span class="line">        sentinel  monitor  mymaster  127.0.0.1  6379  1</span><br><span class="line">其中mymaster为监控对象起的服务器名称， 1 为 至少有多少个哨兵同意迁移的数量。 </span><br><span class="line"></span><br><span class="line">2、启动哨兵</span><br><span class="line">执行redis-sentinel  &#x2F;myredis&#x2F;sentinel.conf</span><br></pre></td></tr></table></figure></div><p><strong>故障恢复：</strong></p><p>1、新主登基</p><p>从下线的主服务的所有从服务里面挑选一个从服务，将其转成主服务<br>选择条件依次为：<br>（1）选择优先级靠前的<br>（2）选择偏移量最大的<br>（3）选择runid最小的从服务</p><p>2、群仆俯首</p><p>挑选出新的主服务之后，sentinel 向原主服务的从服务发送 slaveof 新主服务 的命令，复制新master</p><p>3、旧主俯首</p><p>当已下线的服务重新上线时，sentinel会向其发送slaveof命令，让其成为新主的从</p><blockquote><p>优先级在redis.conf中slave-priority 100<br>偏移量是指获得原主数据最多的<br>每个redis实例启动后都会随机生成一个40位的runid</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Redis介绍及安装&quot;&gt;&lt;a href=&quot;#Redis介绍及安装&quot; class=&quot;headerlink&quot; title=&quot;Redis介绍及安装&quot;&gt;&lt;/a&gt;Redis介绍及安装&lt;/h1&gt;&lt;h2 id=&quot;Redis简介&quot;&gt;&lt;a href=&quot;#Redis简介&quot; class
      
    
    </summary>
    
    
      <category term="大数据" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="Redis" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/Redis/"/>
    
    
      <category term="面试" scheme="https://masteryang4.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="大数据" scheme="https://masteryang4.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="数据库" scheme="https://masteryang4.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="Redis" scheme="https://masteryang4.github.io/tags/Redis/"/>
    
      <category term="教程" scheme="https://masteryang4.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="JavaWeb" scheme="https://masteryang4.github.io/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>JUnit常用注解</title>
    <link href="https://masteryang4.github.io/2020/05/12/JUnit%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/"/>
    <id>https://masteryang4.github.io/2020/05/12/JUnit%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/</id>
    <published>2020-05-12T11:49:00.000Z</published>
    <updated>2020-05-12T12:14:44.974Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JUnit常用注解"><a href="#JUnit常用注解" class="headerlink" title="JUnit常用注解"></a>JUnit常用注解</h1><p>JUnit是 Java平台最常用的测试框架 。</p><p>本文重点阐述JUnit4版本的@Before、@After、@BeforeClass、@AfterClass四个注解。</p><h2 id="JUnit4，JUnit5注解对比"><a href="#JUnit4，JUnit5注解对比" class="headerlink" title="JUnit4，JUnit5注解对比"></a>JUnit4，JUnit5注解对比</h2><table><thead><tr><th>JUnit4</th><th>JUnit5</th><th>功能</th></tr></thead><tbody><tr><td>@BeforeClass</td><td>@BeforeAll</td><td>在当前类的<strong>所有测试方法</strong>之前执行。注解在【静态方法】上。</td></tr><tr><td>@AfterClass</td><td>@AfterAll</td><td>在当前类中的<strong>所有测试方法</strong>之后执行。注解在【静态方法】上。</td></tr><tr><td>@Before</td><td>@BeforeEach</td><td>在<strong>每个测试方法</strong>之前执行。注解在【非静态方法】上。</td></tr><tr><td>@After</td><td>@AfterEach</td><td>在<strong>每个测试方法</strong>之后执行。注解在【非静态方法】上。</td></tr></tbody></table><p>为什么 JUnit中@BeforeClass和@AfterClass标注的方法必须是static的 ？</p><p>其实和JUnit的运行机制有关：</p><blockquote><p>在JUnit中：每运行一个@Test方法，就会为该测试类新建一个新的实例。所以@BeforeClass和@AfterClass必须是static的，因为运行他们的时候，测试类还没有实例化。</p><p>这种设计有助于提高测试方法之间的独立性，因为每个@Test执行的时候，都新建了一个实例，这样的话，可以避免测试方法之间重用各个@Test方法里面的变量值。</p></blockquote><p>示例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JUintDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">        System.out.println(<span class="string">"test1 i="</span> + i); <span class="comment">//test1 i=1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"test2 i="</span> + i); <span class="comment">//test2 i=2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JunitTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@BeforeClass</span></span><br><span class="line">    <span class="comment">//【静态方法】</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">beforeClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"before class:begin this class================"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterClass</span></span><br><span class="line">    <span class="comment">//【静态方法】</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">afterClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"after class:end this class================="</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"before:begin test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"after:end test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"[this is a test!]"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"[this is another test!!!!!]"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>执行整个JunitTest文件，输出结果：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">before class:begin this class&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">before:begin test</span><br><span class="line">[this is a test!]</span><br><span class="line">after:end test</span><br><span class="line">before:begin test</span><br><span class="line">[this is another test!!!!!]</span><br><span class="line">after:end test</span><br><span class="line">after class:end this class&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure></div><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>一整个JUnit4的单元测试用例执行顺序为： </p><p>​        @BeforeClass -&gt; @Before -&gt; @Test -&gt; @After -&gt; @AfterClass; </p><p>每一个单独的测试方法的调用顺序为： </p><p>​        @Before -&gt; @Test -&gt; @After; </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JUnit常用注解&quot;&gt;&lt;a href=&quot;#JUnit常用注解&quot; class=&quot;headerlink&quot; title=&quot;JUnit常用注解&quot;&gt;&lt;/a&gt;JUnit常用注解&lt;/h1&gt;&lt;p&gt;JUnit是 Java平台最常用的测试框架 。&lt;/p&gt;
&lt;p&gt;本文重点阐述JUnit
      
    
    </summary>
    
    
      <category term="Java" scheme="https://masteryang4.github.io/categories/Java/"/>
    
      <category term="基础知识" scheme="https://masteryang4.github.io/categories/Java/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="易错点" scheme="https://masteryang4.github.io/tags/%E6%98%93%E9%94%99%E7%82%B9/"/>
    
      <category term="Java" scheme="https://masteryang4.github.io/tags/Java/"/>
    
      <category term="JUnit" scheme="https://masteryang4.github.io/tags/JUnit/"/>
    
      <category term="单元测试" scheme="https://masteryang4.github.io/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>[SparkSQL]UDAF自定义聚合函数</title>
    <link href="https://masteryang4.github.io/2020/05/05/SparkSQL-UDAF%E8%87%AA%E5%AE%9A%E4%B9%89%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0/"/>
    <id>https://masteryang4.github.io/2020/05/05/SparkSQL-UDAF%E8%87%AA%E5%AE%9A%E4%B9%89%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0/</id>
    <published>2020-05-05T13:30:07.000Z</published>
    <updated>2020-05-05T13:45:04.384Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SparkSQL-UDAF自定义聚合函数"><a href="#SparkSQL-UDAF自定义聚合函数" class="headerlink" title="[SparkSQL]UDAF自定义聚合函数"></a>[SparkSQL]UDAF自定义聚合函数</h1><p>SparkSql中，用户可以设定自己的自定义聚合函数（UserDefinedAggregateFunction）。</p><blockquote><p>需求：实现平均年龄</p></blockquote><p>user.json 文件：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">json</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"username"</span>: <span class="string">"lisi"</span>,<span class="attr">"userage"</span>: <span class="number">40</span>&#125;</span><br><span class="line">&#123;<span class="attr">"username"</span>: <span class="string">"zhangsan"</span>,<span class="attr">"userage"</span>: <span class="number">30</span>&#125;</span><br><span class="line">&#123;<span class="attr">"username"</span>: <span class="string">"wangwu"</span>,<span class="attr">"userage"</span>:<span class="number">20</span>&#125;</span><br></pre></td></tr></table></figure></div><h2 id="UDAF-弱类型"><a href="#UDAF-弱类型" class="headerlink" title="UDAF - 弱类型"></a>UDAF - 弱类型</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.expressions.&#123;<span class="type">MutableAggregationBuffer</span>, <span class="type">UserDefinedAggregateFunction</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.types.&#123;<span class="type">DataType</span>, <span class="type">DoubleType</span>, <span class="type">LongType</span>, <span class="type">StructField</span>, <span class="type">StructType</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.&#123;<span class="type">DataFrame</span>, <span class="type">Row</span>, <span class="type">SparkSession</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.util.<span class="type">AccumulatorV2</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SparkSQL_UDAF01</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"sparksql"</span>)</span><br><span class="line">        <span class="keyword">val</span> spark = <span class="type">SparkSession</span>.builder().config(sparkConf).getOrCreate()</span><br><span class="line">        <span class="comment">// TODO 读取JSON数据</span></span><br><span class="line">        <span class="keyword">val</span> df: <span class="type">DataFrame</span> = spark.read.json(<span class="string">"input/user.json"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 使用自定义聚合函数实现年龄的平均值计算</span></span><br><span class="line">        <span class="comment">// buffer</span></span><br><span class="line">        <span class="comment">// select avg(age) from user</span></span><br><span class="line">        <span class="comment">// 创建自定义函数</span></span><br><span class="line">        <span class="keyword">val</span> udaf = <span class="keyword">new</span> <span class="type">MyAvgAgeUDAF</span></span><br><span class="line">        <span class="comment">// 注册UDAF函数</span></span><br><span class="line">        spark.udf.register(<span class="string">"avgAge"</span>, udaf)</span><br><span class="line"></span><br><span class="line">        df.createTempView(<span class="string">"user"</span>)</span><br><span class="line"></span><br><span class="line">        spark.sql(<span class="string">"select avgAge(userage) from user"</span>).show</span><br><span class="line"></span><br><span class="line">        spark.close</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * TODO 自定义聚合函数（UDAF）</span></span><br><span class="line"><span class="comment">     * 1. 继承UserDefinedAggregateFunction</span></span><br><span class="line"><span class="comment">     * 2. 重写方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyAvgAgeUDAF</span> <span class="keyword">extends</span> <span class="title">UserDefinedAggregateFunction</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO 传入聚合函数的数据结构</span></span><br><span class="line">        <span class="comment">// 1 =&gt; age =&gt; Long</span></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">inputSchema</span></span>: <span class="type">StructType</span> = &#123;</span><br><span class="line">            <span class="type">StructType</span>(<span class="type">Array</span>(</span><br><span class="line">                <span class="type">StructField</span>(<span class="string">"age"</span>, <span class="type">LongType</span>)</span><br><span class="line">            ))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 用于计算的缓冲区的数据结构</span></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">bufferSchema</span></span>: <span class="type">StructType</span> = &#123;</span><br><span class="line">            <span class="type">StructType</span>(<span class="type">Array</span>(</span><br><span class="line">                <span class="type">StructField</span>(<span class="string">"totalage"</span>, <span class="type">LongType</span>),</span><br><span class="line">                <span class="type">StructField</span>(<span class="string">"totalcnt"</span>, <span class="type">LongType</span>)</span><br><span class="line">            ))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 输出结果的类型</span></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">dataType</span></span>: <span class="type">DataType</span> = <span class="type">DoubleType</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 函数稳定性（幂等性）</span></span><br><span class="line">        <span class="comment">// 给函数相同的输入值，计算结果也相同</span></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">deterministic</span></span>: <span class="type">Boolean</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 用于计算的缓冲区初始化</span></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">initialize</span></span>(buffer: <span class="type">MutableAggregationBuffer</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">            buffer(<span class="number">0</span>) = <span class="number">0</span>L</span><br><span class="line">            buffer(<span class="number">1</span>) = <span class="number">0</span>L</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 将输入的值更新到缓冲区中</span></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">update</span></span>(buffer: <span class="type">MutableAggregationBuffer</span>, input: <span class="type">Row</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">            buffer(<span class="number">0</span>) = buffer.getLong(<span class="number">0</span>) + input.getLong(<span class="number">0</span>)</span><br><span class="line">            buffer(<span class="number">1</span>) = buffer.getLong(<span class="number">1</span>) + <span class="number">1</span>L</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 合并缓冲区</span></span><br><span class="line">        <span class="comment">// MutableAggregationBuffer 继承了Row</span></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">merge</span></span>(buffer1: <span class="type">MutableAggregationBuffer</span>, buffer2: <span class="type">Row</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">            buffer1(<span class="number">0</span>) = buffer1.getLong(<span class="number">0</span>) + buffer2.getLong(<span class="number">0</span>)</span><br><span class="line">            buffer1(<span class="number">1</span>) = buffer1.getLong(<span class="number">1</span>) + buffer2.getLong(<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 计算结果</span></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">evaluate</span></span>(buffer: <span class="type">Row</span>): <span class="type">Any</span> = &#123;</span><br><span class="line">            buffer.getLong(<span class="number">0</span>).toDouble / buffer.getLong(<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>输出：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">---------------------+</span></span><br><span class="line">|myavgageudaf(userage)|</span><br><span class="line">+<span class="comment">---------------------+</span></span><br><span class="line">|                 30.0|</span><br><span class="line">+<span class="comment">---------------------+</span></span><br></pre></td></tr></table></figure></div><h2 id="UDAF-强类型"><a href="#UDAF-强类型" class="headerlink" title="UDAF - 强类型"></a>UDAF - 强类型</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.&#123;<span class="type">DataFrame</span>, <span class="type">Dataset</span>, <span class="type">Encoder</span>, <span class="type">Encoders</span>, <span class="type">SparkSession</span>, <span class="type">TypedColumn</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.expressions.<span class="type">Aggregator</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">UDAF02</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> conf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"myudaf"</span>)</span><br><span class="line">    <span class="keyword">val</span> spark: <span class="type">SparkSession</span> = <span class="type">SparkSession</span>.builder().config(conf).getOrCreate()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> spark.implicits._</span><br><span class="line">    <span class="keyword">val</span> df: <span class="type">DataFrame</span> = spark.read.json(<span class="string">"input/user.json"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//封装为DataSet</span></span><br><span class="line">    <span class="keyword">val</span> ds: <span class="type">Dataset</span>[<span class="type">User01</span>] = df.as[<span class="type">User01</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建聚合函数</span></span><br><span class="line">    <span class="keyword">var</span> myAgeUdtf1 = <span class="keyword">new</span> <span class="type">MyAveragUDAF1</span></span><br><span class="line">    <span class="comment">//将聚合函数转换为查询的列</span></span><br><span class="line">    <span class="keyword">val</span> col: <span class="type">TypedColumn</span>[<span class="type">User01</span>, <span class="type">Double</span>] = myAgeUdtf1.toColumn</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询</span></span><br><span class="line">    ds.select(col).show()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//输入数据类型</span></span><br><span class="line">  <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">User01</span>(<span class="params">username: <span class="type">String</span>, userage: <span class="type">Long</span></span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">  <span class="title">//缓存类型</span></span></span><br><span class="line"><span class="class">  <span class="title">case</span> <span class="title">class</span> <span class="title">AgeBuffer</span>(<span class="params">var sum: <span class="type">Long</span>, var count: <span class="type">Long</span></span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">  <span class="title">/**</span></span></span><br><span class="line"><span class="class">    <span class="title">*</span> <span class="title">定义类继承org</span>.<span class="title">apache</span>.<span class="title">spark</span>.<span class="title">sql</span>.<span class="title">expressions</span>.<span class="title">Aggregator</span></span></span><br><span class="line"><span class="class">    <span class="title">*</span> <span class="title">重写类中的方法</span></span></span><br><span class="line"><span class="class">    <span class="title">*/</span></span></span><br><span class="line"><span class="class">  <span class="title">class</span> <span class="title">MyAveragUDAF1</span> <span class="keyword">extends</span> <span class="title">Aggregator</span>[<span class="type">User01</span>, <span class="type">AgeBuffer</span>, <span class="type">Double</span>] </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">zero</span></span>: <span class="type">AgeBuffer</span> = &#123;</span><br><span class="line">      <span class="type">AgeBuffer</span>(<span class="number">0</span>L, <span class="number">0</span>L)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">reduce</span></span>(b: <span class="type">AgeBuffer</span>, a: <span class="type">User01</span>): <span class="type">AgeBuffer</span> = &#123;</span><br><span class="line">      b.sum = b.sum + a.userage</span><br><span class="line">      b.count = b.count + <span class="number">1</span></span><br><span class="line">      b</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">merge</span></span>(b1: <span class="type">AgeBuffer</span>, b2: <span class="type">AgeBuffer</span>): <span class="type">AgeBuffer</span> = &#123;</span><br><span class="line">      b1.sum = b1.sum + b2.sum</span><br><span class="line">      b1.count = b1.count + b2.count</span><br><span class="line">      b1</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">finish</span></span>(buff: <span class="type">AgeBuffer</span>): <span class="type">Double</span> = &#123;</span><br><span class="line">      buff.sum.toDouble / buff.count</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//DataSet默认额编解码器，用于序列化，固定写法</span></span><br><span class="line">    <span class="comment">//自定义类型就是produce   自带类型根据类型选择</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">bufferEncoder</span></span>: <span class="type">Encoder</span>[<span class="type">AgeBuffer</span>] = &#123;</span><br><span class="line">      <span class="type">Encoders</span>.product</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">outputEncoder</span></span>: <span class="type">Encoder</span>[<span class="type">Double</span>] = &#123;</span><br><span class="line">      <span class="type">Encoders</span>.scalaDouble</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>输出：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">-----------------------------------------------------+</span></span><br><span class="line">|MyAveragUDAF1(com.atguigu.sparksql.UDAF_qiang$User01)|</span><br><span class="line">+<span class="comment">-----------------------------------------------------+</span></span><br><span class="line">|                                                 30.0|</span><br><span class="line">+<span class="comment">-----------------------------------------------------+</span></span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SparkSQL-UDAF自定义聚合函数&quot;&gt;&lt;a href=&quot;#SparkSQL-UDAF自定义聚合函数&quot; class=&quot;headerlink&quot; title=&quot;[SparkSQL]UDAF自定义聚合函数&quot;&gt;&lt;/a&gt;[SparkSQL]UDAF自定义聚合函数&lt;/h1
      
    
    </summary>
    
    
      <category term="大数据" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="spark" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/spark/"/>
    
    
      <category term="大数据" scheme="https://masteryang4.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="spark" scheme="https://masteryang4.github.io/tags/spark/"/>
    
      <category term="sparksql" scheme="https://masteryang4.github.io/tags/sparksql/"/>
    
  </entry>
  
  <entry>
    <title>HashMap文章推荐</title>
    <link href="https://masteryang4.github.io/2020/04/30/HashMap%E6%96%87%E7%AB%A0%E6%8E%A8%E8%8D%90/"/>
    <id>https://masteryang4.github.io/2020/04/30/HashMap%E6%96%87%E7%AB%A0%E6%8E%A8%E8%8D%90/</id>
    <published>2020-04-30T15:42:39.000Z</published>
    <updated>2020-05-09T13:27:03.153Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HashMap文章推荐"><a href="#HashMap文章推荐" class="headerlink" title="HashMap文章推荐"></a>HashMap文章推荐</h1><p><a href="https://zhuanlan.zhihu.com/p/21673805" target="_blank" rel="noopener">Java 8系列之重新认识HashMap</a></p><p>【强烈推荐】来自<strong>美团技术团队</strong>，里面的参考文章也非常好</p><p><a href="https://zhuanlan.zhihu.com/p/96426441" target="_blank" rel="noopener">《吊打面试官》系列-HashMap</a></p><p><a href="https://zhuanlan.zhihu.com/p/97902016" target="_blank" rel="noopener">《吊打面试官》系列-ConcurrentHashMap &amp; HashTable</a></p><p>来自敖丙（蘑菇街大佬），从面试官角度阐述关键技术点，十分硬核，全是干货。</p><p><a href="https://zhuanlan.zhihu.com/p/125628540" target="_blank" rel="noopener">一个HashMap跟面试官扯了半个小时</a></p><p>面试者角度阐述HashMap。</p><p>有空闲时间的话，我自己也会出一篇，甚至是一系列的HashMap文章，</p><p>比如</p><ul><li>源码分析，</li><li>知识点总结，</li><li>常考面试题归档 等等</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HashMap文章推荐&quot;&gt;&lt;a href=&quot;#HashMap文章推荐&quot; class=&quot;headerlink&quot; title=&quot;HashMap文章推荐&quot;&gt;&lt;/a&gt;HashMap文章推荐&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.co
      
    
    </summary>
    
    
      <category term="Java" scheme="https://masteryang4.github.io/categories/Java/"/>
    
      <category term="集合" scheme="https://masteryang4.github.io/categories/Java/%E9%9B%86%E5%90%88/"/>
    
    
      <category term="易错点" scheme="https://masteryang4.github.io/tags/%E6%98%93%E9%94%99%E7%82%B9/"/>
    
      <category term="Java" scheme="https://masteryang4.github.io/tags/Java/"/>
    
      <category term="hashmap" scheme="https://masteryang4.github.io/tags/hashmap/"/>
    
      <category term="面试" scheme="https://masteryang4.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Java IO相关总结归纳</title>
    <link href="https://masteryang4.github.io/2020/04/29/Java-IO%E7%9B%B8%E5%85%B3%E6%80%BB%E7%BB%93%E5%BD%92%E7%BA%B3/"/>
    <id>https://masteryang4.github.io/2020/04/29/Java-IO%E7%9B%B8%E5%85%B3%E6%80%BB%E7%BB%93%E5%BD%92%E7%BA%B3/</id>
    <published>2020-04-29T14:12:12.000Z</published>
    <updated>2020-04-29T14:14:13.243Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Java" scheme="https://masteryang4.github.io/categories/Java/"/>
    
      <category term="基础知识" scheme="https://masteryang4.github.io/categories/Java/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="易错点" scheme="https://masteryang4.github.io/tags/%E6%98%93%E9%94%99%E7%82%B9/"/>
    
      <category term="Java" scheme="https://masteryang4.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>[spark]十一种方式实现WordCount</title>
    <link href="https://masteryang4.github.io/2020/04/27/spark-%E5%8D%81%E4%B8%80%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0WordCount/"/>
    <id>https://masteryang4.github.io/2020/04/27/spark-%E5%8D%81%E4%B8%80%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0WordCount/</id>
    <published>2020-04-27T14:23:10.000Z</published>
    <updated>2020-04-27T15:12:53.079Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spark-十一种方式实现WordCount"><a href="#Spark-十一种方式实现WordCount" class="headerlink" title="[Spark]十一种方式实现WordCount"></a>[Spark]十一种方式实现WordCount</h1><p>使用Spark中的11种方法实现经典的WordCount算法。</p><p>其中，10种SparkRDD（算子）+ 1种自定义累加器实现。</p><blockquote><p>特朗普：没人比我更懂WordCount！（滑稽）</p></blockquote><h2 id="Why-WordCount？"><a href="#Why-WordCount？" class="headerlink" title="Why WordCount？"></a>Why WordCount？</h2><ul><li>大数据中最经典的算法，相当于编程语言中的“Hello World”。</li><li>在大数据处理中，大多数复杂的问题通常被拆分成一个个小问题，这些小问题一般都是基于WordCount算法。所以，WordCount是重中之重，是大数据处理算法的基石。</li></ul><h2 id="10种Spark算子实现"><a href="#10种Spark算子实现" class="headerlink" title="10种Spark算子实现"></a>10种Spark算子实现</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.collection.mutable</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * spark-使用十种[算子]实现wordcount</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">RDDWordcount</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"spark"</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line">    <span class="comment">//    val rdd = sc.textFile("input/wc.txt").flatMap(datas =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//      datas.split(" ")</span></span><br><span class="line">    <span class="comment">//    &#125;)</span></span><br><span class="line">    <span class="keyword">val</span> rdd = sc.makeRDD(<span class="type">List</span>(<span class="string">"hadoop"</span>, <span class="string">"hello"</span>, <span class="string">"spark"</span>, <span class="string">"hello"</span>, <span class="string">"scala"</span>, <span class="string">"hello"</span>, <span class="string">"scala"</span>, <span class="string">"spark"</span>))</span><br><span class="line"></span><br><span class="line">    println(<span class="string">"=================1===================="</span>)</span><br><span class="line"></span><br><span class="line">    rdd.countByValue().foreach(println)</span><br><span class="line"></span><br><span class="line">    println(<span class="string">"=================2===================="</span>)</span><br><span class="line"></span><br><span class="line">    rdd.map((_, <span class="number">1</span>)).countByKey().foreach(println)</span><br><span class="line"></span><br><span class="line">    println(<span class="string">"=================3===================="</span>)</span><br><span class="line"></span><br><span class="line">    rdd.map((_, <span class="number">1</span>)).reduceByKey(_ + _).collect().foreach(println)</span><br><span class="line"></span><br><span class="line">    println(<span class="string">"=================4===================="</span>)</span><br><span class="line"></span><br><span class="line">    rdd.map((_, <span class="number">1</span>)).groupByKey().mapValues(_.size).collect().foreach(println)</span><br><span class="line"></span><br><span class="line">    println(<span class="string">"=================5===================="</span>)</span><br><span class="line"></span><br><span class="line">    rdd.map((_, <span class="number">1</span>)).aggregateByKey(<span class="number">0</span>)(_ + _, _ + _).collect().foreach(println)</span><br><span class="line"></span><br><span class="line">    println(<span class="string">"=================6===================="</span>)</span><br><span class="line"></span><br><span class="line">    rdd.map((_, <span class="number">1</span>)).foldByKey(<span class="number">0</span>)(_ + _).collect().foreach(println)</span><br><span class="line"></span><br><span class="line">    println(<span class="string">"=================7===================="</span>)</span><br><span class="line"></span><br><span class="line">    rdd.map((_, <span class="number">1</span>)).combineByKey(</span><br><span class="line">      (num: <span class="type">Int</span>) =&gt; num,</span><br><span class="line">      (x: <span class="type">Int</span>, y: <span class="type">Int</span>) =&gt; &#123;</span><br><span class="line">        x + y</span><br><span class="line">      &#125;,</span><br><span class="line">      (x: <span class="type">Int</span>, y: <span class="type">Int</span>) =&gt; &#123;</span><br><span class="line">        x + y</span><br><span class="line">      &#125;</span><br><span class="line">    ).collect().foreach(println)</span><br><span class="line"></span><br><span class="line">    println(<span class="string">"=================8===================="</span>)</span><br><span class="line"></span><br><span class="line">    rdd.map((_, <span class="number">1</span>)).groupBy(_._1).map(kv =&gt; &#123;</span><br><span class="line">      (kv._1, kv._2.size)</span><br><span class="line">    &#125;).collect().foreach(println)</span><br><span class="line"></span><br><span class="line">    println(<span class="string">"=================9===================="</span>)</span><br><span class="line"></span><br><span class="line">    rdd.aggregate(mutable.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Int</span>]())(</span><br><span class="line">      (map, word) =&gt; &#123;</span><br><span class="line">        map(word) = map.getOrElse(word, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        map</span><br><span class="line">      &#125;,</span><br><span class="line">      (map1, map2) =&gt; &#123;</span><br><span class="line">        map1.foldLeft(map2)(</span><br><span class="line">          (finalMap, kv) =&gt; &#123;</span><br><span class="line">            finalMap(kv._1) = finalMap.getOrElse(kv._1, <span class="number">0</span>) + kv._2</span><br><span class="line">            finalMap</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    ).foreach(println)</span><br><span class="line"></span><br><span class="line">    println(<span class="string">"=================10===================="</span>)</span><br><span class="line"></span><br><span class="line">    rdd.map(s =&gt; mutable.<span class="type">Map</span>(s -&gt; <span class="number">1</span>)).fold(mutable.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Int</span>]())(</span><br><span class="line">      (map1, map2) =&gt; &#123;</span><br><span class="line">        map1.foldLeft(map2)(</span><br><span class="line">          (finalMap, kv) =&gt; &#123;</span><br><span class="line">            finalMap(kv._1) = finalMap.getOrElse(kv._1, <span class="number">0</span>) + kv._2</span><br><span class="line">            finalMap</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    ).foreach(println)</span><br><span class="line"></span><br><span class="line">    sc.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>输出结果：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">=================<span class="number">1</span>====================</span><br><span class="line">(hello,<span class="number">3</span>)</span><br><span class="line">(spark,<span class="number">2</span>)</span><br><span class="line">(hadoop,<span class="number">1</span>)</span><br><span class="line">(scala,<span class="number">2</span>)</span><br><span class="line">=================<span class="number">2</span>====================</span><br><span class="line">(hello,<span class="number">3</span>)</span><br><span class="line">(spark,<span class="number">2</span>)</span><br><span class="line">(hadoop,<span class="number">1</span>)</span><br><span class="line">(scala,<span class="number">2</span>)</span><br><span class="line">=================<span class="number">3</span>====================</span><br><span class="line">(hello,<span class="number">3</span>)</span><br><span class="line">(spark,<span class="number">2</span>)</span><br><span class="line">(hadoop,<span class="number">1</span>)</span><br><span class="line">(scala,<span class="number">2</span>)</span><br><span class="line">=================<span class="number">4</span>====================</span><br><span class="line">(hello,<span class="number">3</span>)</span><br><span class="line">(spark,<span class="number">2</span>)</span><br><span class="line">(hadoop,<span class="number">1</span>)</span><br><span class="line">(scala,<span class="number">2</span>)</span><br><span class="line">=================<span class="number">5</span>====================</span><br><span class="line">(hello,<span class="number">3</span>)</span><br><span class="line">(spark,<span class="number">2</span>)</span><br><span class="line">(hadoop,<span class="number">1</span>)</span><br><span class="line">(scala,<span class="number">2</span>)</span><br><span class="line">=================<span class="number">6</span>====================</span><br><span class="line">(hello,<span class="number">3</span>)</span><br><span class="line">(spark,<span class="number">2</span>)</span><br><span class="line">(hadoop,<span class="number">1</span>)</span><br><span class="line">(scala,<span class="number">2</span>)</span><br><span class="line">=================<span class="number">7</span>====================</span><br><span class="line">(hello,<span class="number">3</span>)</span><br><span class="line">(spark,<span class="number">2</span>)</span><br><span class="line">(hadoop,<span class="number">1</span>)</span><br><span class="line">(scala,<span class="number">2</span>)</span><br><span class="line">=================<span class="number">8</span>====================</span><br><span class="line">(hello,<span class="number">3</span>)</span><br><span class="line">(spark,<span class="number">2</span>)</span><br><span class="line">(hadoop,<span class="number">1</span>)</span><br><span class="line">(scala,<span class="number">2</span>)</span><br><span class="line">=================<span class="number">9</span>====================</span><br><span class="line">(hadoop,<span class="number">1</span>)</span><br><span class="line">(spark,<span class="number">2</span>)</span><br><span class="line">(scala,<span class="number">2</span>)</span><br><span class="line">(hello,<span class="number">3</span>)</span><br><span class="line">=================<span class="number">10</span>====================</span><br><span class="line">(hadoop,<span class="number">1</span>)</span><br><span class="line">(spark,<span class="number">2</span>)</span><br><span class="line">(scala,<span class="number">2</span>)</span><br><span class="line">(hello,<span class="number">3</span>)</span><br></pre></td></tr></table></figure></div><h2 id="自定义累加器实现"><a href="#自定义累加器实现" class="headerlink" title="自定义累加器实现"></a>自定义累加器实现</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.util.<span class="type">AccumulatorV2</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.collection.mutable</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">MyAccTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> conf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">"acc"</span>).setMaster(<span class="string">"local[*]"</span>)</span><br><span class="line">    <span class="keyword">val</span> sc: <span class="type">SparkContext</span> = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO Spark - 自定义累加器 - wordcount</span></span><br><span class="line">    <span class="comment">// 累加器可以不使用shuffle就完成数据的聚合功能</span></span><br><span class="line">    <span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">String</span>] = sc.makeRDD(<span class="type">List</span>(<span class="string">"hadoop spark"</span>, <span class="string">"hello"</span>, <span class="string">"spark"</span>, <span class="string">"hello"</span>, <span class="string">"scala"</span>, <span class="string">"hello"</span>, <span class="string">"scala"</span>, <span class="string">"spark"</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO 1. 创建累加器</span></span><br><span class="line">    <span class="keyword">val</span> acc = <span class="keyword">new</span> <span class="type">WordCountAccumulator</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO 2. 向Spark注册累加器</span></span><br><span class="line">    sc.register(acc, <span class="string">"wordcount"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO 3. 使用累加器</span></span><br><span class="line">    rdd.foreach(</span><br><span class="line">      words =&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> ws = words.split(<span class="string">" "</span>)</span><br><span class="line">        ws.foreach(</span><br><span class="line">          word =&gt; &#123;</span><br><span class="line">            acc.add(word)</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    println(acc.value) <span class="comment">//Map(hadoop -&gt; 1, spark -&gt; 3, scala -&gt; 2, hello -&gt; 3)</span></span><br><span class="line"></span><br><span class="line">    sc.stop()</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 自定义累加器 Map&#123;(Word - Count), (Word - Count)&#125;</span></span><br><span class="line">  <span class="comment">// 1, 继承AccumulatorV2, 定义泛型</span></span><br><span class="line">  <span class="comment">//    IN :  向累加器传递的值的类型 , Out : 累加器的返回结果类型</span></span><br><span class="line">  <span class="comment">// 2. 重写方法</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">WordCountAccumulator</span> <span class="keyword">extends</span> <span class="title">AccumulatorV2</span>[<span class="type">String</span>, mutable.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Int</span>]] </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> innerMap = mutable.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Int</span>]()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO 累加器是否初始化</span></span><br><span class="line">    <span class="comment">// Z</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">isZero</span></span>: <span class="type">Boolean</span> = innerMap.isEmpty</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO 复制累加器</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">copy</span></span>(): <span class="type">AccumulatorV2</span>[<span class="type">String</span>, mutable.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Int</span>]] = &#123;</span><br><span class="line">      <span class="keyword">new</span> <span class="type">WordCountAccumulator</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO 重置累加器</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">reset</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">      innerMap.clear()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO 累加数据</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(word: <span class="type">String</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="keyword">val</span> cnt = innerMap.getOrElse(word, <span class="number">0</span>)</span><br><span class="line">      innerMap.update(word, cnt + <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO 合并累加器</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">merge</span></span>(other: <span class="type">AccumulatorV2</span>[<span class="type">String</span>, mutable.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Int</span>]]): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="comment">// 两个Map的合并</span></span><br><span class="line">      <span class="keyword">var</span> map1 = <span class="keyword">this</span>.innerMap</span><br><span class="line">      <span class="keyword">var</span> map2 = other.value</span><br><span class="line"></span><br><span class="line">      innerMap = map1.foldLeft(map2)(</span><br><span class="line">        (map, kv) =&gt; &#123;</span><br><span class="line">          <span class="keyword">val</span> k = kv._1</span><br><span class="line">          <span class="keyword">val</span> v = kv._2</span><br><span class="line">          map(k) = map.getOrElse(k, <span class="number">0</span>) + v</span><br><span class="line">          map</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO 获取累加器的值，就是累加器的返回结果</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">value</span></span>: mutable.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Int</span>] = innerMap</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>输出结果：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Map</span>(spark -&gt; <span class="number">3</span>, hadoop -&gt; <span class="number">1</span>, scala -&gt; <span class="number">2</span>, hello -&gt; <span class="number">3</span>)</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spark-十一种方式实现WordCount&quot;&gt;&lt;a href=&quot;#Spark-十一种方式实现WordCount&quot; class=&quot;headerlink&quot; title=&quot;[Spark]十一种方式实现WordCount&quot;&gt;&lt;/a&gt;[Spark]十一种方式实现WordC
      
    
    </summary>
    
    
      <category term="大数据" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="spark" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/spark/"/>
    
    
      <category term="大数据" scheme="https://masteryang4.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="spark" scheme="https://masteryang4.github.io/tags/spark/"/>
    
      <category term="scala" scheme="https://masteryang4.github.io/tags/scala/"/>
    
      <category term="wordcount" scheme="https://masteryang4.github.io/tags/wordcount/"/>
    
  </entry>
  
  <entry>
    <title>kafka高效读写数据</title>
    <link href="https://masteryang4.github.io/2020/04/27/kafka%E9%AB%98%E6%95%88%E8%AF%BB%E5%86%99%E6%95%B0%E6%8D%AE/"/>
    <id>https://masteryang4.github.io/2020/04/27/kafka%E9%AB%98%E6%95%88%E8%AF%BB%E5%86%99%E6%95%B0%E6%8D%AE/</id>
    <published>2020-04-27T12:28:01.000Z</published>
    <updated>2020-05-09T13:26:09.502Z</updated>
    
    <content type="html"><![CDATA[<h1 id="kafka高效读写数据"><a href="#kafka高效读写数据" class="headerlink" title="kafka高效读写数据"></a>kafka高效读写数据</h1><h2 id="一、分布式集群"><a href="#一、分布式集群" class="headerlink" title="一、分布式集群"></a>一、分布式集群</h2><p>Kafka本身是分布式集群；同时采用分区技术，并发度高。  </p><blockquote><p>zookeeper在kafka中的作用：kafka集群中有一个broker会被选举成controller，负责管理集群broker的上下线，所有的topic分区副本分配和leader选举等工作。controller的管理工作都依赖于zk。</p></blockquote><h2 id="二、顺序写磁盘"><a href="#二、顺序写磁盘" class="headerlink" title="二、顺序写磁盘"></a>二、顺序写磁盘</h2><p>Kafka的producer生产数据，要写入到log文件中，写的过程是一直追加到文件末端，为顺序写。官网有数据表明，同样的磁盘，顺序写能到600M/s，而随机写只有100K/s。这与磁盘的机械机构有关，顺序写之所以快，是因为其省去了大量磁头寻址的时间。</p><h2 id="三、零复制技术"><a href="#三、零复制技术" class="headerlink" title="三、零复制技术"></a>三、零复制技术</h2><p>kafka零复制技术示意图：</p><p><a href="https://pic.downk.cc/item/5ea7012ec2a9a83be5e629f2.png" data-fancybox="group" data-caption="kafka零拷贝技术" class="fancybox"><img alt="kafka零拷贝技术" title="kafka零拷贝技术" data-src="https://pic.downk.cc/item/5ea7012ec2a9a83be5e629f2.png" class="lazyload"></a></p><p>java复制技术示意图：</p><p>（仅仅复制文件，没有对于文件的应用，效率很低。</p><p>文件要经过操作系统层（OS层）Buffer缓存传给java应用层输入流，输入流再将数据写到输出流，输出流将数据写到OS层缓存，缓存在将数据写到新的文件。。。）</p><p><a href="https://pic.downk.cc/item/5ea701a6c2a9a83be5e6b749.png" data-fancybox="group" data-caption="java拷贝技术原理图解" class="fancybox"><img alt="java拷贝技术原理图解" title="java拷贝技术原理图解" data-src="https://pic.downk.cc/item/5ea701a6c2a9a83be5e6b749.png" class="lazyload"></a></p><p>因为java复制技术在拷贝文件时效率较低，所以对上图做出优化，如下图所示：</p><p>（应用层通知操作系统层：仅仅是复制文件，所以操作系统层就不会将数据传给应用层，直接在操作系统层复制文件即可。）</p><p><a href="https://pic.downk.cc/item/5ea701c6c2a9a83be5e6e1e8.png" data-fancybox="group" data-caption="零拷贝技术图解" class="fancybox"><img alt="零拷贝技术图解" title="零拷贝技术图解" data-src="https://pic.downk.cc/item/5ea701c6c2a9a83be5e6e1e8.png" class="lazyload"></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;kafka高效读写数据&quot;&gt;&lt;a href=&quot;#kafka高效读写数据&quot; class=&quot;headerlink&quot; title=&quot;kafka高效读写数据&quot;&gt;&lt;/a&gt;kafka高效读写数据&lt;/h1&gt;&lt;h2 id=&quot;一、分布式集群&quot;&gt;&lt;a href=&quot;#一、分布式集群&quot; c
      
    
    </summary>
    
    
      <category term="大数据" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="kafka" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/kafka/"/>
    
    
      <category term="面试" scheme="https://masteryang4.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="大数据" scheme="https://masteryang4.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="kafka" scheme="https://masteryang4.github.io/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>flume总结与思考</title>
    <link href="https://masteryang4.github.io/2020/04/24/%E7%B2%BE-flume%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/"/>
    <id>https://masteryang4.github.io/2020/04/24/%E7%B2%BE-flume%E6%80%BB%E7%BB%93%E4%B8%8E%E6%80%9D%E8%80%83/</id>
    <published>2020-04-24T15:50:53.000Z</published>
    <updated>2020-05-14T08:34:21.325Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="大数据" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="flume" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/flume/"/>
    
    
      <category term="易错点" scheme="https://masteryang4.github.io/tags/%E6%98%93%E9%94%99%E7%82%B9/"/>
    
      <category term="面试" scheme="https://masteryang4.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="大数据" scheme="https://masteryang4.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="教程" scheme="https://masteryang4.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="flume" scheme="https://masteryang4.github.io/tags/flume/"/>
    
  </entry>
  
  <entry>
    <title>kafka分区分配策略</title>
    <link href="https://masteryang4.github.io/2020/04/23/kafka%E5%88%86%E5%8C%BA%E5%88%86%E9%85%8D%E7%AD%96%E7%95%A5/"/>
    <id>https://masteryang4.github.io/2020/04/23/kafka%E5%88%86%E5%8C%BA%E5%88%86%E9%85%8D%E7%AD%96%E7%95%A5/</id>
    <published>2020-04-23T09:09:56.000Z</published>
    <updated>2020-05-09T13:25:52.931Z</updated>
    
    <content type="html"><![CDATA[<h1 id="kafka分区分配策略"><a href="#kafka分区分配策略" class="headerlink" title="kafka分区分配策略"></a>kafka分区分配策略</h1><p>kafka系列总结之：kafka分区分配策略[转载&amp;归纳]</p><ul><li>kafka是由Apache软件基金会开发的一个开源流处理平台，由Scala和Java编写。</li><li>Kafka是一种高吞吐量的分布式发布订阅消息系统，它可以处理消费者在网站中的所有动作流数据 </li></ul><p>kafka官网：</p><blockquote><p>kafka.apache.org</p></blockquote><p>kafka分区分配策略文章索引</p><p>1、 <a href="https://blog.csdn.net/u013256816/article/details/81123600" target="_blank" rel="noopener">Kafka分区分配策略（1）——RangeAssignor</a></p><p>2、 <a href="https://blog.csdn.net/u013256816/article/details/81123625" target="_blank" rel="noopener">Kafka分区分配策略（2）——RoundRobinAssignor和StickyAssignor</a></p><p>3、 <a href="https://blog.csdn.net/u013256816/article/details/81123858" target="_blank" rel="noopener">Kafka分区分配策略（3）——自定义分区分配策略</a> </p><p>4、 <a href="https://blog.csdn.net/u013256816/article/details/81123907" target="_blank" rel="noopener">Kafka分区分配策略（4）——分配的实施</a></p><blockquote><p>[注]作者为 《深入理解Kafka:核心设计与实践原理》 的作者：朱忠华老师</p><p>作者更多kafka技术文章： <a href="https://blog.csdn.net/u013256816/category_6500871.html" target="_blank" rel="noopener">https://blog.csdn.net/u013256816/category_6500871.html</a> </p><p>作者个人博客： <a href="http://honeypps.com/" target="_blank" rel="noopener">http://honeypps.com/</a></p><p>作者CSDN博客： <a href="https://blog.csdn.net/u013256816" target="_blank" rel="noopener">https://blog.csdn.net/u013256816</a> </p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;kafka分区分配策略&quot;&gt;&lt;a href=&quot;#kafka分区分配策略&quot; class=&quot;headerlink&quot; title=&quot;kafka分区分配策略&quot;&gt;&lt;/a&gt;kafka分区分配策略&lt;/h1&gt;&lt;p&gt;kafka系列总结之：kafka分区分配策略[转载&amp;amp;归纳]&lt;
      
    
    </summary>
    
    
      <category term="大数据" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="kafka" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/kafka/"/>
    
    
      <category term="易错点" scheme="https://masteryang4.github.io/tags/%E6%98%93%E9%94%99%E7%82%B9/"/>
    
      <category term="大数据" scheme="https://masteryang4.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="kafka" scheme="https://masteryang4.github.io/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>scala中的flatMap和foldLeft函数</title>
    <link href="https://masteryang4.github.io/2020/04/21/scala%E4%B8%AD%E7%9A%84flatMap%E5%92%8CfoldLeft%E5%87%BD%E6%95%B0/"/>
    <id>https://masteryang4.github.io/2020/04/21/scala%E4%B8%AD%E7%9A%84flatMap%E5%92%8CfoldLeft%E5%87%BD%E6%95%B0/</id>
    <published>2020-04-21T14:34:32.000Z</published>
    <updated>2020-04-27T15:10:43.047Z</updated>
    
    <content type="html"><![CDATA[<h1 id="scala中的flatMap和foldLeft函数"><a href="#scala中的flatMap和foldLeft函数" class="headerlink" title="scala中的flatMap和foldLeft函数"></a>scala中的flatMap和foldLeft函数</h1><p>scala由于其函数式编程的特性，在大数据的处理中被广泛使用。</p><p>此文针对scala集合中两个常用的，却不太好理解的函数进行示例讲解。</p><h2 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h2><p>scala中最重要的函数之一，映射扁平化</p><p>把握以下三点即可：</p><blockquote><p>1、flatMap = map + flatten</p><p>2、什么类型调用的flatMap方法，则返回的也是什么类型</p><p>3、<strong>先对集合中的每个元素进行map，</strong></p><p>​      <strong>再对map后的每个元素（map后的每个元素必须还是集合）中的每个元素进行flatten</strong></p></blockquote><p>[注] 进行map的对象可以是只含一层的集合，但进行flatten操作的对象必需是至少含两层的集合</p><p>map和flatten示例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Test0001</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">    <span class="comment">// 集合映射</span></span><br><span class="line">    println(<span class="string">"map =&gt; "</span> + list.map(x=&gt;&#123;x*<span class="number">2</span>&#125;)) <span class="comment">//map =&gt; List(2, 4, 6, 8)</span></span><br><span class="line">    println(<span class="string">"map =&gt; "</span> + list.map(x=&gt;x*<span class="number">2</span>))   <span class="comment">//map =&gt; List(2, 4, 6, 8)</span></span><br><span class="line">    println(<span class="string">"map =&gt; "</span> + list.map(_*<span class="number">2</span>))      <span class="comment">//map =&gt; List(2, 4, 6, 8)</span></span><br><span class="line">    <span class="comment">// 集合扁平化</span></span><br><span class="line">    <span class="keyword">val</span> list1 = <span class="type">List</span>(</span><br><span class="line">      <span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>),</span><br><span class="line">      <span class="type">List</span>(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">    )</span><br><span class="line">    println(<span class="string">"flatten =&gt;"</span> + list1.flatten)   <span class="comment">//flatten =&gt;List(1, 2, 3, 4)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>flatMap示例一：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> words = <span class="type">Set</span>(<span class="string">"scala"</span>, <span class="string">"spark"</span>, <span class="string">"hadoop"</span>)</span><br><span class="line"><span class="keyword">val</span> result = words.flatMap(x =&gt; x.toUpperCase)</span><br><span class="line">println(result)  <span class="comment">//Set(A, L, P, C, H, K, R, O, D, S)</span></span><br></pre></td></tr></table></figure></div><p>flatMap示例二：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> tuples: <span class="type">List</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = <span class="type">List</span>((<span class="string">"Hello Scala"</span>, <span class="number">4</span>), (<span class="string">"Hello Spark"</span>, <span class="number">2</span>))</span><br><span class="line"><span class="keyword">val</span> strings: <span class="type">List</span>[<span class="type">String</span>] = tuples.map(t=&gt;&#123;(t._1+<span class="string">" "</span>)*t._2&#125;)</span><br><span class="line"><span class="comment">//List(Hello Scala Hello Scala Hello Scala Hello Scala , Hello Spark Hello Spark )</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> flatMapList: <span class="type">List</span>[<span class="type">String</span>] = strings.flatMap(t=&gt;&#123;t.split(<span class="string">" "</span>)&#125;)</span><br><span class="line"><span class="comment">//List(Hello, Scala, Hello, Scala, Hello, Scala, Hello, Scala, Hello, Spark, Hello, Spark)</span></span><br></pre></td></tr></table></figure></div><p>flatMap示例三：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> linesList = <span class="type">List</span>((<span class="string">"Hello Scala"</span>, <span class="number">4</span>), (<span class="string">"Hello Spark"</span>, <span class="number">2</span>))</span><br><span class="line"><span class="keyword">val</span> flatMapList: <span class="type">List</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = linesList.flatMap(t =&gt; &#123;</span><br><span class="line">    <span class="keyword">val</span> line: <span class="type">String</span> = t._1</span><br><span class="line">    <span class="keyword">val</span> words = line.split(<span class="string">" "</span>)</span><br><span class="line">    words.map(w =&gt; (w, t._2))</span><br><span class="line">&#125;)</span><br><span class="line">println(flatMapList)  <span class="comment">//List((Hello,4), (Scala,4), (Hello,2), (Spark,2))</span></span><br></pre></td></tr></table></figure></div><p>根据上述三个原则即可算出函数结果。</p><h2 id="foldLeft"><a href="#foldLeft" class="headerlink" title="foldLeft"></a>foldLeft</h2><p>集合折叠函数，fold、foldRight底层都是基于foldLeft函数。</p><p>所以本文用到的函数可以不用严格区分，主要阐述其原理。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fold</span></span>[<span class="type">A1</span> &gt;: <span class="type">A</span>](z: <span class="type">A1</span>)(op: (<span class="type">A1</span>, <span class="type">A1</span>) =&gt; <span class="type">A1</span>): <span class="type">A1</span> = foldLeft(z)(op)</span><br></pre></td></tr></table></figure></div><p>就是将集合的数据和集合之外的数据进行聚合操作。</p><p>fold方法有函数柯里化，有2个参数列表</p><ul><li><p>第一个参数列表：集合之外的数据</p></li><li><p>第二个参数列表：表示计算规则</p></li></ul><p>fold示例一：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="comment">// 集合折叠</span></span><br><span class="line">println(<span class="string">"fold =&gt; "</span> + list.fold(<span class="number">0</span>)(_+_))    <span class="comment">//10</span></span><br><span class="line"><span class="comment">// 集合折叠(左)</span></span><br><span class="line">println(<span class="string">"foldLeft =&gt; "</span> + list.foldLeft(<span class="number">0</span>)(_+_)) <span class="comment">//10</span></span><br></pre></td></tr></table></figure></div><p>  fold示例二：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Scala21_Collection_Method4</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 将两个Map集合进行合并(merge)处理</span></span><br><span class="line">    <span class="keyword">val</span> map1 = mutable.<span class="type">Map</span>(<span class="string">"a"</span> -&gt; <span class="number">1</span>, <span class="string">"b"</span> -&gt; <span class="number">2</span>, <span class="string">"c"</span> -&gt; <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">val</span> map2 = mutable.<span class="type">Map</span>(<span class="string">"a"</span> -&gt; <span class="number">4</span>, <span class="string">"d"</span> -&gt; <span class="number">5</span>, <span class="string">"c"</span> -&gt; <span class="number">6</span>)</span><br><span class="line">    <span class="comment">// Map( "a"-&gt;5, "b"-&gt;2, "c"-&gt;9 ,"d"-&gt;5)</span></span><br><span class="line">    <span class="keyword">val</span> map3 = map2.foldLeft(map1)(</span><br><span class="line">      (map, kv) =&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> k = kv._1</span><br><span class="line">        <span class="keyword">val</span> v = kv._2</span><br><span class="line">        <span class="comment">//map.update(k, map.getOrElse(k, 0) + v)</span></span><br><span class="line">        map(k) = map.getOrElse(k, <span class="number">0</span>) + v</span><br><span class="line">        map</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    println(map3) <span class="comment">//Map(b -&gt; 2, d -&gt; 5, a -&gt; 5, c -&gt; 9)</span></span><br><span class="line">    </span><br><span class="line">    println(map1) <span class="comment">//Map(b -&gt; 2, d -&gt; 5, a -&gt; 5, c -&gt; 9)</span></span><br><span class="line">    println(map2) <span class="comment">//Map(d -&gt; 5, a -&gt; 4, c -&gt; 6)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>原理示意图如下：</p><p><a href="https://pic.downk.cc/item/5e9f0b95c2a9a83be5c27ef7.png" data-fancybox="group" data-caption="folfLeft原理图" class="fancybox"><img alt="folfLeft原理图" title="folfLeft原理图" data-src="https://pic.downk.cc/item/5e9f0b95c2a9a83be5c27ef7.png" class="lazyload"></a></p><p><strong>总结：</strong></p><p><strong>其实，在foldleft函数中，第二个参数规定的就是，</strong></p><p><strong>foldleft第一个参数和foldleft调用者的第一个元素的运算规则</strong></p><p>可以用如下公式理解：</p><blockquote><p>a. foldLeft( b )( (b,a的第一个元素)=&gt;{} )</p></blockquote><p>（对应上面示意图：红色块为b，蓝色块为a）</p><p>只不过在此公式中b和a的第一个元素都是动态变化的：</p><p>​    b一直在迭代，a会继续往后顺序取后面的值。</p><p>​    <strong>其实函数最终返回值就是b的值（上面的例子map1和map3相等也能证明这一点，本质就是map1把值赋给了map3），且a不发生改变。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;scala中的flatMap和foldLeft函数&quot;&gt;&lt;a href=&quot;#scala中的flatMap和foldLeft函数&quot; class=&quot;headerlink&quot; title=&quot;scala中的flatMap和foldLeft函数&quot;&gt;&lt;/a&gt;scala中的flat
      
    
    </summary>
    
    
      <category term="大数据" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="scala" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/scala/"/>
    
    
      <category term="易错点" scheme="https://masteryang4.github.io/tags/%E6%98%93%E9%94%99%E7%82%B9/"/>
    
      <category term="scala" scheme="https://masteryang4.github.io/tags/scala/"/>
    
  </entry>
  
</feed>
