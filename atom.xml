<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MasterYangBlog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://masteryang4.github.io/"/>
  <updated>2020-06-18T14:25:10.271Z</updated>
  <id>https://masteryang4.github.io/</id>
  
  <author>
    <name>Yang4</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>kafka事务</title>
    <link href="https://masteryang4.github.io/2020/06/18/kafka%E4%BA%8B%E5%8A%A1/"/>
    <id>https://masteryang4.github.io/2020/06/18/kafka%E4%BA%8B%E5%8A%A1/</id>
    <published>2020-06-18T14:24:20.000Z</published>
    <updated>2020-06-18T14:25:10.271Z</updated>
    
    <content type="html"><![CDATA[<h1 id="kafka事务"><a href="#kafka事务" class="headerlink" title="kafka事务"></a>kafka事务</h1><p>Kafka从【0.11】版本开始引入了事务支持。</p><p>事务可以保证Kafka在Exactly Once语义的基础上，生产和消费可以跨分区和会话，要么全部成功，要么全部失败。</p><h2 id="Producer事务"><a href="#Producer事务" class="headerlink" title="Producer事务"></a>Producer事务</h2><p>为了实现跨分区跨会话的事务，需要引入一个全局唯一的Transaction ID，并将Producer获得的PID和Transaction ID绑定。这样当Producer重启后就可以通过正在进行的Transaction ID获得原来的PID。</p><p>为了管理Transaction，Kafka引入了一个新的组件Transaction Coordinator。</p><p>Producer就是通过和Transaction Coordinator交互获得Transaction ID对应的任务状态。Transaction Coordinator还负责将事务所有写入Kafka的一个内部Topic，这样即使整个服务重启，由于事务状态得到保存，进行中的事务状态可以得到恢复，从而继续进行。</p><h2 id="Consumer事务"><a href="#Consumer事务" class="headerlink" title="Consumer事务"></a>Consumer事务</h2><p>上述事务机制主要是从Producer方面考虑，对于Consumer而言，事务的保证就会相对较弱，尤其时无法保证Commit的信息被精确消费。</p><p>这是由于Consumer可以通过offset访问任意信息，而且不同的Segment File生命周期不同，同一事务的消息可能会出现重启后被删除的情况。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;kafka事务&quot;&gt;&lt;a href=&quot;#kafka事务&quot; class=&quot;headerlink&quot; title=&quot;kafka事务&quot;&gt;&lt;/a&gt;kafka事务&lt;/h1&gt;&lt;p&gt;Kafka从【0.11】版本开始引入了事务支持。&lt;/p&gt;
&lt;p&gt;事务可以保证Kafka在Exactl
      
    
    </summary>
    
    
      <category term="大数据" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="kafka" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/kafka/"/>
    
    
      <category term="大数据" scheme="https://masteryang4.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="kafka" scheme="https://masteryang4.github.io/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>kafka_exactly_once语义</title>
    <link href="https://masteryang4.github.io/2020/06/18/kafka-exactly-once%E8%AF%AD%E4%B9%89/"/>
    <id>https://masteryang4.github.io/2020/06/18/kafka-exactly-once%E8%AF%AD%E4%B9%89/</id>
    <published>2020-06-18T14:22:35.000Z</published>
    <updated>2020-06-18T14:28:03.087Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Exactly-Once语义"><a href="#Exactly-Once语义" class="headerlink" title="Exactly Once语义"></a>Exactly Once语义</h1><blockquote><p>kafka 每个分区内的 Exactly Once</p></blockquote><p>将服务器的ACK级别设置为<code>-1</code>，可以保证Producer到Server之间不会丢失数据，即At Least Once语义。</p><p>相对的，将服务器ACK级别设置为0，可以保证生产者每条消息只会被发送一次，即At Most Once语义。</p><p>At Least Once可以保证数据不丢失，但是不能保证数据不重复；</p><p>相对的，At Least Once可以保证数据不重复，但是不能保证数据不丢失。</p><p>但是，对于一些非常重要的信息，比如说交易数据，下游数据消费者要求数据既不重复也不丢失，即Exactly Once语义。在0.11版本以前的Kafka，对此是无能为力的，只能保证数据不丢失，再在下游消费者对数据做全局去重。对于多个下游应用的情况，每个都需要单独做全局去重，这就对性能造成了很大影响。</p><blockquote><p>【0.11】版本的Kafka，引入了一项重大特性：幂等性。</p></blockquote><p>开启幂等性<code>enable.idempotence=true</code>。</p><p>所谓的<strong>幂等性就是指Producer不论向Server发送多少次重复数据，Server端都只会持久化一条</strong>。幂等性结合At Least Once语义，就构成了Kafka的Exactly Once语义。即：</p><blockquote><p>At Least Once + 幂等性 = Exactly Once</p></blockquote><p>要启用幂等性，只需要将Producer的参数中<code>enable.idompotence</code>设置为<code>true</code>即可。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Kafka的幂等性实现其实就是将原来下游需要做的去重放在了数据上游。</span><br><span class="line">开启幂等性的Producer在初始化的时候会被分配一个PID，发往同一Partition的消息会附带Sequence Number。</span><br><span class="line">而Broker端会对&lt;PID, Partition, SeqNumber&gt;做缓存，当具有相同主键的消息提交时，Broker只会持久化一条。</span><br></pre></td></tr></table></figure></div><p>但是<strong>PID重启就会变化</strong>，同时不同的Partition也具有不同主键，</p><p>所以幂等性无法保证<strong>跨分区跨会话</strong>的Exactly Once。</p><blockquote><p>保证 kafka 数据无重复</p><p>​    1、幂等性+<code>ack=-1</code>+事务</p><p>​    2、可以在下一级：SparkStreaming、redis 或者 hive 中 dwd 层去重，</p><p>​          去重的手段：分组、按照id开窗只取第一个值；</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Exactly-Once语义&quot;&gt;&lt;a href=&quot;#Exactly-Once语义&quot; class=&quot;headerlink&quot; title=&quot;Exactly Once语义&quot;&gt;&lt;/a&gt;Exactly Once语义&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;kafka 每个分
      
    
    </summary>
    
    
      <category term="大数据" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="kafka" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/kafka/"/>
    
    
      <category term="大数据" scheme="https://masteryang4.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="kafka" scheme="https://masteryang4.github.io/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>MySQL练习题</title>
    <link href="https://masteryang4.github.io/2020/06/18/MySQL%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
    <id>https://masteryang4.github.io/2020/06/18/MySQL%E7%BB%83%E4%B9%A0%E9%A2%98/</id>
    <published>2020-06-18T07:13:23.000Z</published>
    <updated>2020-06-18T07:15:24.523Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL练习题"><a href="#MySQL练习题" class="headerlink" title="MySQL练习题"></a>MySQL练习题</h1><h2 id="1-组合两个表"><a href="#1-组合两个表" class="headerlink" title="1. 组合两个表"></a>1. 组合两个表</h2><p>需求：编写一个 SQL 查询，对两表进行关联，展示列为：<br>FirstName, LastName, City, State</p><p>展示效果：</p><table><thead><tr><th>FirstName</th><th>LastName</th><th>City</th><th>State</th></tr></thead><tbody><tr><td>Allen</td><td>Wang</td><td>New York City</td><td>New York</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Create table Person (PersonId int, FirstName varchar(255), LastName varchar(255));</span><br><span class="line"></span><br><span class="line">Create table Address (AddressId int, PersonId int, City varchar(255), State varchar(255));</span><br><span class="line"></span><br><span class="line">insert into Person (PersonId, LastName, FirstName) values (1, &#39;Wang&#39;, &#39;Allen&#39;);</span><br><span class="line">insert into Address (AddressId, PersonId, City, State) values (1, 1, &#39;New York City&#39;, &#39;New York&#39;);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">     p.FirstName,</span><br><span class="line">     p.LastName,</span><br><span class="line">     a.City,</span><br><span class="line">     a.State</span><br><span class="line">from </span><br><span class="line">     Person as p </span><br><span class="line">left join </span><br><span class="line">     Address as a </span><br><span class="line">on </span><br><span class="line">     p.PersonId &#x3D; a.PersonId;</span><br></pre></td></tr></table></figure></div><h2 id="2-第二高的薪水"><a href="#2-第二高的薪水" class="headerlink" title="2. 第二高的薪水"></a>2. 第二高的薪水</h2><p><strong>需求二</strong>：编写一个 SQL 查询，获取 Employee 表中第二高的薪水（Salary）。如果不存在第二高的薪水，那么查询应返回 null。</p><p>展示效果：</p><table><thead><tr><th>SecondHighestSalary</th></tr></thead><tbody><tr><td>200</td></tr></tbody></table><p>建表语句：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists Employee (Id int, Salary int);</span><br><span class="line"></span><br><span class="line">insert into Employee (Id, Salary) values (1, 100);</span><br><span class="line">insert into Employee (Id, Salary) values (2, 200);</span><br><span class="line">insert into Employee (Id, Salary) values (3, 300);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">方法一：</span><br><span class="line">select (</span><br><span class="line">     select </span><br><span class="line">               DISTINCT Salary</span><br><span class="line">     from  </span><br><span class="line">               Employee</span><br><span class="line">     order by</span><br><span class="line">               Salary DESC</span><br><span class="line">     limit 1,1</span><br><span class="line">      )  as SecondHighestSalary;</span><br><span class="line">方法二：</span><br><span class="line">select </span><br><span class="line">       max(Salary) as SecondHighestSalary </span><br><span class="line">from </span><br><span class="line">       Employee</span><br><span class="line">where </span><br><span class="line">       Salary &lt; (select</span><br><span class="line">                       max(Salary) </span><br><span class="line">                 from </span><br><span class="line">                       Employee</span><br><span class="line">                );</span><br></pre></td></tr></table></figure></div><p>提示：LIMIT 子句可以被用于强制 SELECT 语句返回指定的记录数。LIMIT 接受一个或两个数字参数。参数必须是一个整数常量。如果给定两个参数，第一个参数指定第一个返回记录行的偏移量，第二个参数指定返回记录行的最大数目。</p><p><strong>需求二</strong>：编写一个 SQL 查询，获取 Employee 表中第 n 高的薪水（Salary）。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">方法一：</span><br><span class="line">CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT</span><br><span class="line">BEGIN</span><br><span class="line">  SET n &#x3D; N-1;</span><br><span class="line">  RETURN (     </span><br><span class="line">  SELECT DISTINCT Salary FROM Employee ORDER BY Salary DESC LIMIT n,1</span><br><span class="line">  );</span><br><span class="line">END</span><br><span class="line"></span><br><span class="line">select getNthHighestSalary(2) ;</span><br><span class="line"></span><br><span class="line">方案二：</span><br><span class="line">CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT</span><br><span class="line">BEGIN</span><br><span class="line">  RETURN (     </span><br><span class="line">  SELECT  IF(count&lt;N,NULL,min) </span><br><span class="line">  FROM</span><br><span class="line">    (SELECT MIN(Salary) AS min, COUNT(1) AS count</span><br><span class="line">    FROM</span><br><span class="line">      (SELECT DISTINCT Salary</span><br><span class="line">      FROM Employee ORDER BY Salary DESC LIMIT N) AS a</span><br><span class="line">    ) as b</span><br><span class="line">  );</span><br><span class="line">END</span><br></pre></td></tr></table></figure></div><h2 id="3-分数排名"><a href="#3-分数排名" class="headerlink" title="3. 分数排名"></a>3. 分数排名</h2><p>需求：编写一个 SQL 查询来实现分数排名。如果两个分数相同，则两个分数排名（Rank）相同。请注意，平分后的下一个名次应该是下一个连续的整数值。换句话说，名次之间不应该有“间隔”。</p><p>展示效果：</p><table><thead><tr><th>Score</th><th>Rank</th></tr></thead><tbody><tr><td>4.00</td><td>1</td></tr><tr><td>4.00</td><td>1</td></tr><tr><td>3.85</td><td>2</td></tr><tr><td>3.65</td><td>3</td></tr><tr><td>3.65</td><td>3</td></tr><tr><td>3.50</td><td>4</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists Scores (Id int, Score DECIMAL(3,2));</span><br><span class="line"></span><br><span class="line">insert into Scores (Id, Score) values (1, 3.5);</span><br><span class="line">insert into Scores (Id, Score) values (2, 3.65);</span><br><span class="line">insert into Scores (Id, Score) values (3, 4.0);</span><br><span class="line">insert into Scores (Id, Score) values (4, 3.85);</span><br><span class="line">insert into Scores (Id, Score) values (5, 4.0);</span><br><span class="line">insert into Scores (Id, Score) values (6, 3.65);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">      a.Score as score , </span><br><span class="line">      (select </span><br><span class="line">              count(distinct b.Score) </span><br><span class="line">       from </span><br><span class="line">              Scores b </span><br><span class="line">       where </span><br><span class="line">              b.Score &gt;&#x3D;a.Score) as rank</span><br><span class="line">from </span><br><span class="line">     Scores a </span><br><span class="line">order by </span><br><span class="line">     Score DESC;</span><br></pre></td></tr></table></figure></div><h2 id="4-连续出现的数字"><a href="#4-连续出现的数字" class="headerlink" title="4. 连续出现的数字"></a>4. 连续出现的数字</h2><p>需求：编写一个 SQL 查询，查找所有至少连续出现三次的数字。</p><p>展示效果：</p><table><thead><tr><th>ConsecutiveNums</th></tr></thead><tbody><tr><td>1</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists Logs (Id int, Num int);</span><br><span class="line"></span><br><span class="line">insert into Logs (Id, Num) values (1, 1);</span><br><span class="line">insert into Logs (Id, Num) values (2, 1);</span><br><span class="line">insert into Logs (Id, Num) values (3, 1);</span><br><span class="line">insert into Logs (Id, Num) values (4, 2);</span><br><span class="line">insert into Logs (Id, Num) values (5, 1);</span><br><span class="line">insert into Logs (Id, Num) values (6, 2);</span><br><span class="line">insert into Logs (Id, Num) values (7, 2);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM</span><br><span class="line">    Logs l1,</span><br><span class="line">    Logs l2,</span><br><span class="line">    Logs l3</span><br><span class="line">WHERE</span><br><span class="line">    l1.Id &#x3D; l2.Id - 1 AND l1.Num &#x3D; l2.Num</span><br><span class="line">    AND l2.Id &#x3D; l3.Id - 1 AND l2.Num &#x3D; l3.Num;</span><br></pre></td></tr></table></figure></div><h2 id="5-超过经理收入的员工"><a href="#5-超过经理收入的员工" class="headerlink" title="5. 超过经理收入的员工"></a>5. 超过经理收入的员工</h2><p>需求：Employee 表包含所有员工，他们的经理也属于员工。每个员工都有一个 Id，此外还有一列对应员工的经理的 Id。</p><p>数据样式：</p><table><thead><tr><th>Id</th><th>Name</th><th>Salary</th><th>ManagerId</th></tr></thead><tbody><tr><td>1</td><td>Joe</td><td>70000</td><td>3</td></tr><tr><td>2</td><td>Henry</td><td>80000</td><td>4</td></tr><tr><td>3</td><td>Sam</td><td>60000</td><td>null</td></tr><tr><td>4</td><td>Max</td><td>90000</td><td>null</td></tr></tbody></table><p>展示效果：</p><table><thead><tr><th>Employee</th></tr></thead><tbody><tr><td>Joe</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table If Not Exists Employee (Id int, Name varchar(255), Salary int, ManagerId int);</span><br><span class="line"></span><br><span class="line">insert into Employee (Id, Name, Salary, ManagerId) values (1, &#39;Joe&#39;, 70000, 3);</span><br><span class="line">insert into Employee (Id, Name, Salary, ManagerId) values (2, &#39;Henry&#39;, 80000, 4);</span><br><span class="line">insert into Employee (Id, Name, Salary, ManagerId) values (3, &#39;Sam&#39;, 60000, null);</span><br><span class="line">insert into Employee (Id, Name, Salary, ManagerId) values (4, &#39;Max&#39;, 90000, null);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">     a.NAME AS Employee</span><br><span class="line">FROM </span><br><span class="line">     Employee AS a </span><br><span class="line">JOIN </span><br><span class="line">     Employee AS b</span><br><span class="line">ON </span><br><span class="line">     a.ManagerId &#x3D; b.Id </span><br><span class="line">AND </span><br><span class="line">     a.Salary &gt; b.Salary;</span><br></pre></td></tr></table></figure></div><h2 id="6-查找重复的邮箱"><a href="#6-查找重复的邮箱" class="headerlink" title="6. 查找重复的邮箱"></a>6. 查找重复的邮箱</h2><p>需求：编写一个 SQL 查询，查找 Person 表中所有重复的电子邮箱。</p><p>展示效果：</p><table><thead><tr><th>Email</th></tr></thead><tbody><tr><td><a href="mailto:a@b.com">a@b.com</a></td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists Person (Id int, Email varchar(255))</span><br><span class="line"></span><br><span class="line">insert into Person (Id, Email) values (1, &#39;a@b.com&#39;)</span><br><span class="line">insert into Person (Id, Email) values (2, &#39;c@d.com&#39;)</span><br><span class="line">insert into Person (Id, Email) values (3, &#39;a@b.com&#39;)</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">      Email</span><br><span class="line">from </span><br><span class="line">      Person</span><br><span class="line">group by </span><br><span class="line">      Email</span><br><span class="line">having </span><br><span class="line">      count(Email) &gt; 1;</span><br></pre></td></tr></table></figure></div><h2 id="7-从不订购的客户"><a href="#7-从不订购的客户" class="headerlink" title="7. 从不订购的客户"></a>7. 从不订购的客户</h2><p>需求：某网站包含两个表，Customers 表和 Orders 表。编写一个 SQL 查询，找出所有从不订购任何东西的客户。</p><p>展示效果：</p><table><thead><tr><th>Customers</th></tr></thead><tbody><tr><td>Henry</td></tr><tr><td>Max</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists Customers (Id int, Name varchar(255));</span><br><span class="line">Create table If Not Exists Orders (Id int, CustomerId int);</span><br><span class="line"></span><br><span class="line">insert into Customers (Id, Name) values (1, &#39;Joe&#39;);</span><br><span class="line">insert into Customers (Id, Name) values (2, &#39;Henry&#39;);</span><br><span class="line">insert into Customers (Id, Name) values (3, &#39;Sam&#39;);</span><br><span class="line">insert into Customers (Id, Name) values (4, &#39;Max&#39;);</span><br><span class="line"></span><br><span class="line">insert into Orders (Id, CustomerId) values (1, 3);</span><br><span class="line">insert into Orders (Id, CustomerId) values (2, 1);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">     customers.name as &#39;Customers&#39;</span><br><span class="line">from </span><br><span class="line">     customers</span><br><span class="line">where </span><br><span class="line">     customers.id not in(</span><br><span class="line">        select</span><br><span class="line">              customerid </span><br><span class="line">        from </span><br><span class="line">              orders</span><br><span class="line">     );</span><br></pre></td></tr></table></figure></div><h2 id="8-部门工资最高的员工"><a href="#8-部门工资最高的员工" class="headerlink" title="8. 部门工资最高的员工"></a>8. 部门工资最高的员工</h2><p><strong>需求一</strong>：编写一个 SQL 查询，找出每个部门工资最高的员工。例如，根据上述给定的表格，Max 在 IT 部门有最高工资，Henry 在 Sales 部门有最高工资。</p><p>展示效果：</p><table><thead><tr><th>Department</th><th>Employee</th><th>Salary</th></tr></thead><tbody><tr><td>IT</td><td>Jim</td><td>90000</td></tr><tr><td>IT</td><td>Max</td><td>90000</td></tr><tr><td>Sales</td><td>Henry</td><td>80000</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists Employee (Id int, Name varchar(255), Salary int, DepartmentId int);</span><br><span class="line">Create table If Not Exists Department (Id int, Name varchar(255));</span><br><span class="line"></span><br><span class="line">insert into Employee (Id, Name, Salary, DepartmentId) values (1, &#39;Joe&#39;, 70000, 1);</span><br><span class="line">insert into Employee (Id, Name, Salary, DepartmentId) values (2, &#39;Jim&#39;, 90000, 1);</span><br><span class="line">insert into Employee (Id, Name, Salary, DepartmentId) values (3, &#39;Henry&#39;, 80000, 2);</span><br><span class="line">insert into Employee (Id, Name, Salary, DepartmentId) values (4, &#39;Sam&#39;, 60000, 2);</span><br><span class="line">insert into Employee (Id, Name, Salary, DepartmentId) values (5, &#39;Max&#39;, 90000, 1);</span><br><span class="line">insert into Employee (Id, Name, Salary, DepartmentId) values (6, &#39;Randy&#39;, 85000, 1);</span><br><span class="line">insert into Employee (Id, Name, Salary, DepartmentId) values (7, &#39;Will&#39;, 70000, 1);</span><br><span class="line"></span><br><span class="line">insert into Department (Id, Name) values (1, &#39;IT&#39;);</span><br><span class="line">insert into Department (Id, Name) values (2, &#39;Sales&#39;);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">    Department.name AS &#39;Department&#39;,</span><br><span class="line">    Employee.name AS &#39;Employee&#39;,</span><br><span class="line">    Salary</span><br><span class="line">FROM</span><br><span class="line">    Employee</span><br><span class="line">        JOIN</span><br><span class="line">    Department ON Employee.DepartmentId &#x3D; Department.Id</span><br><span class="line">WHERE</span><br><span class="line">    (Employee.DepartmentId , Salary) IN</span><br><span class="line">    (   SELECT</span><br><span class="line">            DepartmentId, MAX(Salary)</span><br><span class="line">        FROM</span><br><span class="line">            Employee</span><br><span class="line">        GROUP BY DepartmentId</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div><p><strong>需求二</strong>：编写一个 SQL 查询，找出每个部门获得前三高工资的所有员工。</p><p>展示效果：</p><table><thead><tr><th>Department</th><th>Employee</th><th>Salary</th></tr></thead><tbody><tr><td>IT</td><td>Max</td><td>90000</td></tr><tr><td>IT</td><td>Randy</td><td>85000</td></tr><tr><td>IT</td><td>Joe</td><td>85000</td></tr><tr><td>IT</td><td>Will</td><td>70000</td></tr><tr><td>Sales</td><td>Henry</td><td>80000</td></tr><tr><td>Sales</td><td>Sam</td><td>60000</td></tr></tbody></table><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">    d.Name AS &#39;Department&#39;, e1.Name AS &#39;Employee&#39;, e1.Salary</span><br><span class="line">FROM</span><br><span class="line">    Employee e1</span><br><span class="line">        JOIN</span><br><span class="line">    Department d ON e1.DepartmentId &#x3D; d.Id</span><br><span class="line">WHERE</span><br><span class="line">    3 &gt; (SELECT</span><br><span class="line">            COUNT(DISTINCT e2.Salary)</span><br><span class="line">        FROM</span><br><span class="line">            Employee e2</span><br><span class="line">        WHERE</span><br><span class="line">            e2.Salary &gt; e1.Salary</span><br><span class="line">                AND e1.DepartmentId &#x3D; e2.DepartmentId</span><br><span class="line">        );</span><br></pre></td></tr></table></figure></div><h2 id="9-删除重复的电子邮箱"><a href="#9-删除重复的电子邮箱" class="headerlink" title="9. 删除重复的电子邮箱"></a>9. 删除重复的电子邮箱</h2><p>需求：编写一个 SQL 查询，来删除 Person 表中所有重复的电子邮箱，重复的邮箱里只保留 Id 最小 的那个。</p><p>展示效果：</p><table><thead><tr><th>Id</th><th>Email</th></tr></thead><tbody><tr><td>1</td><td><a href="mailto:john@example.com">john@example.com</a></td></tr><tr><td>2</td><td><a href="mailto:bob@example.com">bob@example.com</a></td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists Person (Id int, email varchar(255));</span><br><span class="line"></span><br><span class="line">insert into Person (Id, email) values (1, &#39;john@example.com&#39;);</span><br><span class="line">insert into Person (Id, email) values (2, &#39;bob@example.com&#39;);</span><br><span class="line">insert into Person (Id, email) values (3, &#39;john@example.com&#39;);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DELETE </span><br><span class="line">      p1 </span><br><span class="line">FROM </span><br><span class="line">      Person p1,</span><br><span class="line">      Person p2</span><br><span class="line">WHERE</span><br><span class="line">      p1.Email &#x3D; p2.Email AND p1.Id &gt; p2.Id;</span><br></pre></td></tr></table></figure></div><h2 id="10-上升的温度"><a href="#10-上升的温度" class="headerlink" title="10. 上升的温度"></a>10. 上升的温度</h2><p>需求：编写一个 SQL 查询，来查找与之前（昨天的）日期相比温度更高的所有日期的 Id。</p><table><thead><tr><th>Id</th></tr></thead><tbody><tr><td>2</td></tr><tr><td>4</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists Weather (Id int, RecordDate date, Temperature int);</span><br><span class="line"></span><br><span class="line">insert into Weather (Id, RecordDate, Temperature) values (1, &#39;2015-01-01&#39;, 10);</span><br><span class="line">insert into Weather (Id, RecordDate, Temperature) values (2, &#39;2015-01-02&#39;, 25);</span><br><span class="line">insert into Weather (Id, RecordDate, Temperature) values (3, &#39;2015-01-03&#39;, 20);</span><br><span class="line">insert into Weather (Id, RecordDate, Temperature) values (4, &#39;2015-01-04&#39;, 30);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">    weather.id AS &#39;Id&#39;</span><br><span class="line">FROM</span><br><span class="line">    weather</span><br><span class="line">JOIN</span><br><span class="line">    weather w </span><br><span class="line">ON </span><br><span class="line">    DATEDIFF(weather.RecordDate, w.RecordDate) &#x3D; 1</span><br><span class="line">AND weather.Temperature &gt; w.Temperature;</span><br></pre></td></tr></table></figure></div><h2 id="11-行程和用户"><a href="#11-行程和用户" class="headerlink" title="11. 行程和用户"></a>11. 行程和用户</h2><p>需求：写一段 SQL 语句查出 2019年10月1日 至 2019年10月3日 期间非禁止用户的取消率。基于上表，你的 SQL 语句应返回如下结果，取消率（Cancellation Rate）保留两位小数。</p><p>取消率的计算方式如下：(被司机或乘客取消的非禁止用户生成的订单数量) / (非禁止用户生成的订单总数)</p><p>Trips表：所有出租车的行程信息。每段行程有唯一键 Id，Client_Id 和 Driver_Id 是 Users 表中 Users_Id 的外键。Status 是枚举类型，枚举成员为 (‘completed’, ‘cancelled_by_driver’, ‘cancelled_by_client’)。</p><table><thead><tr><th>Id</th><th>Client_Id</th><th>Driver_Id</th><th>City_Id</th><th>Status</th><th>Request_at</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>10</td><td>1</td><td>completed</td><td>2019-10-01</td></tr><tr><td>2</td><td>2</td><td>11</td><td>1</td><td>cancelled_by_driver</td><td>2019-10-01</td></tr><tr><td>3</td><td>3</td><td>12</td><td>6</td><td>completed</td><td>2019-10-01</td></tr><tr><td>4</td><td>4</td><td>13</td><td>6</td><td>cancelled_by_client</td><td>2019-10-01</td></tr><tr><td>5</td><td>1</td><td>10</td><td>1</td><td>completed</td><td>2019-10-02</td></tr><tr><td>6</td><td>2</td><td>11</td><td>6</td><td>completed</td><td>2019-10-02</td></tr><tr><td>7</td><td>3</td><td>12</td><td>6</td><td>completed</td><td>2019-10-02</td></tr><tr><td>8</td><td>2</td><td>12</td><td>12</td><td>completed</td><td>2019-10-03</td></tr><tr><td>9</td><td>3</td><td>10</td><td>12</td><td>completed</td><td>2019-10-03</td></tr><tr><td>10</td><td>4</td><td>13</td><td>12</td><td>cancelled_by_driver</td><td>2019-10-03</td></tr></tbody></table><p>Users 表存所有用户。每个用户有唯一键 Users_Id。Banned 表示这个用户是否被禁止，Role 则是一个表示（‘client’, ‘driver’, ‘partner’）的枚举类型。</p><table><thead><tr><th>Users_Id</th><th>Banned</th><th>Cancellation Rate</th></tr></thead><tbody><tr><td>1</td><td>No</td><td>client</td></tr><tr><td>2</td><td>Yes</td><td>client</td></tr><tr><td>3</td><td>No</td><td>client</td></tr><tr><td>4</td><td>No</td><td>client</td></tr><tr><td>10</td><td>No</td><td>driver</td></tr><tr><td>11</td><td>No</td><td>driver</td></tr><tr><td>12</td><td>No</td><td>driver</td></tr><tr><td>13</td><td>No</td><td>driver</td></tr></tbody></table><p>展示效果：</p><table><thead><tr><th>Day</th><th>Cancellation Rate</th></tr></thead><tbody><tr><td>2019-10-01</td><td>0.33</td></tr><tr><td>2019-10-02</td><td>0.00</td></tr><tr><td>2019-10-03</td><td>0.50</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists Trips (Id int, Client_Id int, Driver_Id int, City_Id int, Status ENUM(&#39;completed&#39;, &#39;cancelled_by_driver&#39;, &#39;cancelled_by_client&#39;), Request_at varchar(50));</span><br><span class="line"></span><br><span class="line">Create table If Not Exists Users (Users_Id int, Banned varchar(50), Role ENUM(&#39;client&#39;, &#39;driver&#39;, &#39;partner&#39;));</span><br><span class="line"></span><br><span class="line">insert into Trips (Id, Client_Id, Driver_Id, City_Id, Status, Request_at) values (1, 1, 10, 1, &#39;completed&#39;, &#39;2019-10-01&#39;);</span><br><span class="line">insert into Trips (Id, Client_Id, Driver_Id, City_Id, Status, Request_at) values (2, 2, 11, 1, &#39;cancelled_by_driver&#39;, &#39;2019-10-01&#39;);</span><br><span class="line">insert into Trips (Id, Client_Id, Driver_Id, City_Id, Status, Request_at) values (3, 3, 12, 6, &#39;completed&#39;, &#39;2019-10-01&#39;);</span><br><span class="line">insert into Trips (Id, Client_Id, Driver_Id, City_Id, Status, Request_at) values (4, 4, 13, 6, &#39;cancelled_by_client&#39;, &#39;2019-10-01&#39;);</span><br><span class="line">insert into Trips (Id, Client_Id, Driver_Id, City_Id, Status, Request_at) values (5, 1, 10, 1, &#39;completed&#39;, &#39;2019-10-02&#39;);</span><br><span class="line">insert into Trips (Id, Client_Id, Driver_Id, City_Id, Status, Request_at) values (6, 2, 11, 6, &#39;completed&#39;, &#39;2019-10-02&#39;);</span><br><span class="line">insert into Trips (Id, Client_Id, Driver_Id, City_Id, Status, Request_at) values (7, 3, 12, 6, &#39;completed&#39;, &#39;2019-10-02&#39;);</span><br><span class="line">insert into Trips (Id, Client_Id, Driver_Id, City_Id, Status, Request_at) values (8, 2, 12, 12, &#39;completed&#39;, &#39;2019-10-03&#39;);</span><br><span class="line">insert into Trips (Id, Client_Id, Driver_Id, City_Id, Status, Request_at) values (9, 3, 10, 12, &#39;completed&#39;, &#39;2019-10-03&#39;);</span><br><span class="line">insert into Trips (Id, Client_Id, Driver_Id, City_Id, Status, Request_at) values (10, 4, 13, 12, &#39;cancelled_by_driver&#39;, &#39;2019-10-03&#39;);</span><br><span class="line"></span><br><span class="line">insert into Users (Users_Id, Banned, Role) values (1, &#39;No&#39;, &#39;client&#39;);</span><br><span class="line">insert into Users (Users_Id, Banned, Role) values (2, &#39;Yes&#39;, &#39;client&#39;);</span><br><span class="line">insert into Users (Users_Id, Banned, Role) values (3, &#39;No&#39;, &#39;client&#39;);</span><br><span class="line">insert into Users (Users_Id, Banned, Role) values (4, &#39;No&#39;, &#39;client&#39;);</span><br><span class="line">insert into Users (Users_Id, Banned, Role) values (10, &#39;No&#39;, &#39;driver&#39;);</span><br><span class="line">insert into Users (Users_Id, Banned, Role) values (11, &#39;No&#39;, &#39;driver&#39;);</span><br><span class="line">insert into Users (Users_Id, Banned, Role) values (12, &#39;No&#39;, &#39;driver&#39;);</span><br><span class="line">insert into Users (Users_Id, Banned, Role) values (13, &#39;No&#39;, &#39;driver&#39;);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line">方法一：</span><br><span class="line">SELECT </span><br><span class="line">      T.request_at AS &#96;Day&#96;, </span><br><span class="line">  ROUND(</span><br><span class="line">            SUM(IF(T.STATUS &#x3D; &#39;completed&#39;,0,1))&#x2F; COUNT(T.STATUS),</span><br><span class="line">            2</span><br><span class="line">            ) AS &#96;Cancellation Rate&#96;</span><br><span class="line">FROM </span><br><span class="line">      Trips AS T</span><br><span class="line">JOIN </span><br><span class="line">      Users AS U1 </span><br><span class="line">ON </span><br><span class="line">      T.client_id &#x3D; U1.users_id AND U1.banned &#x3D;&#39;No&#39;</span><br><span class="line">JOIN </span><br><span class="line">      Users AS U2 </span><br><span class="line">ON </span><br><span class="line">      T.driver_id &#x3D; U2.users_id AND U2.banned &#x3D;&#39;No&#39;</span><br><span class="line">WHERE </span><br><span class="line">      T.request_at BETWEEN &#39;2019-10-01&#39; AND &#39;2019-10-03&#39;</span><br><span class="line">GROUP BY </span><br><span class="line">      T.request_at;</span><br><span class="line"></span><br><span class="line">方法二：</span><br><span class="line">SELECT </span><br><span class="line">      T.request_at AS &#96;Day&#96;, </span><br><span class="line">  ROUND(</span><br><span class="line">SUM(IF(T.STATUS &#x3D; &#39;completed&#39;,0,1))&#x2F; COUNT(T.STATUS),</span><br><span class="line">2</span><br><span class="line">        ) AS &#96;Cancellation Rate&#96;</span><br><span class="line">FROM </span><br><span class="line">     trips AS T </span><br><span class="line">LEFT JOIN (</span><br><span class="line">        SELECT</span><br><span class="line">                  users_id</span><br><span class="line">        FROM</span><br><span class="line">                  users</span><br><span class="line">        WHERE  </span><br><span class="line">                  banned &#x3D; &#39;Yes&#39;</span><br><span class="line">           ) AS A </span><br><span class="line">ON </span><br><span class="line">     T.Client_Id &#x3D; A.users_id</span><br><span class="line">LEFT JOIN (</span><br><span class="line">        SELECT</span><br><span class="line">                  users_id</span><br><span class="line">        FROM </span><br><span class="line">                  users</span><br><span class="line">        WHERE </span><br><span class="line">                  banned &#x3D; &#39;Yes&#39;</span><br><span class="line">           ) AS A1</span><br><span class="line">ON </span><br><span class="line">     T.Driver_Id &#x3D; A1.users_id</span><br><span class="line">WHERE </span><br><span class="line">     A.users_id IS NULL </span><br><span class="line">     AND A1.users_id IS NULL </span><br><span class="line">     AND T.request_at BETWEEN &#39;2019-10-01&#39; AND &#39;2019-10-03&#39;</span><br><span class="line">GROUP BY </span><br><span class="line">     T.request_at;</span><br><span class="line"></span><br><span class="line">方法三：</span><br><span class="line">SELECT </span><br><span class="line">     T.request_at AS &#96;Day&#96;, </span><br><span class="line"> ROUND(</span><br><span class="line">           SUM(IF(T.STATUS &#x3D; &#39;completed&#39;,0,1))&#x2F; COUNT(T.STATUS),</span><br><span class="line">   2</span><br><span class="line">       ) AS &#96;Cancellation Rate&#96;</span><br><span class="line">FROM</span><br><span class="line">     trips AS T</span><br><span class="line">WHERE </span><br><span class="line">     T.Client_Id NOT IN (</span><br><span class="line">                      SELECT </span><br><span class="line">                                 users_id</span><br><span class="line">                      FROM </span><br><span class="line">                                 users</span><br><span class="line">                      WHERE </span><br><span class="line">                                 banned &#x3D; &#39;Yes&#39;</span><br><span class="line">     )</span><br><span class="line">AND</span><br><span class="line">     T.Driver_Id NOT IN (</span><br><span class="line">                       SELECT </span><br><span class="line">                                 users_id</span><br><span class="line">                       FROM  </span><br><span class="line">                                 users</span><br><span class="line">                       WHERE </span><br><span class="line">                                 banned &#x3D; &#39;Yes&#39;</span><br><span class="line">     )</span><br><span class="line">AND </span><br><span class="line">     T.request_at BETWEEN &#39;2019-10-01&#39; AND &#39;2019-10-03&#39;;</span><br></pre></td></tr></table></figure></div><h2 id="12-游戏玩法分析"><a href="#12-游戏玩法分析" class="headerlink" title="12. 游戏玩法分析"></a>12. 游戏玩法分析</h2><p><strong>需求一</strong>：写一条 SQL 查询语句获取每位玩家 第一次登陆平台的日期。</p><p> Activity表：显示了某些游戏的玩家的活动情况。</p><table><thead><tr><th>player_id</th><th>device_id</th><th>event_date</th><th>games_played</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>2016-03-01</td><td>5</td></tr><tr><td>1</td><td>2</td><td>2016-05-02</td><td>6</td></tr><tr><td>2</td><td>3</td><td>2017-06-25</td><td>1</td></tr><tr><td>3</td><td>1</td><td>2016-03-02</td><td>0</td></tr><tr><td>3</td><td>4</td><td>2018-07-03</td><td>5</td></tr></tbody></table><p>展示效果：</p><table><thead><tr><th>player_id</th><th>first_login</th></tr></thead><tbody><tr><td>1</td><td>2016-03-01</td></tr><tr><td>2</td><td>2017-06-25</td></tr><tr><td>3</td><td>2016-03-02</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists Activity (player_id int, device_id int, event_date date, games_played int);</span><br><span class="line"></span><br><span class="line">insert into Activity (player_id, device_id, event_date, games_played) values (1, 2, &#39;2016-03-01&#39;, 5);</span><br><span class="line">insert into Activity (player_id, device_id, event_date, games_played) values (1, 2, &#39;2016-05-02&#39;, 6);</span><br><span class="line">insert into Activity (player_id, device_id, event_date, games_played) values (2, 3, &#39;2017-06-25&#39;, 1);</span><br><span class="line">insert into Activity (player_id, device_id, event_date, games_played) values (3, 1, &#39;2016-03-02&#39;, 0);</span><br><span class="line">insert into Activity (player_id, device_id, event_date, games_played) values (3, 4, &#39;2018-07-03&#39;, 5);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">      player_id, </span><br><span class="line">      min(event_date) as first_login </span><br><span class="line">from </span><br><span class="line">      Activity </span><br><span class="line">group by </span><br><span class="line">      player_id;</span><br></pre></td></tr></table></figure></div><p><strong>需求二</strong>：描述每一个玩家首次登陆的设备名称</p><table><thead><tr><th>player_id</th><th>device_id</th></tr></thead><tbody><tr><td>1</td><td>2</td></tr><tr><td>2</td><td>3</td></tr><tr><td>3</td><td>1</td></tr></tbody></table><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">      player_id,</span><br><span class="line">      device_id </span><br><span class="line">from</span><br><span class="line">     (select *  </span><br><span class="line">      from </span><br><span class="line">          Activity</span><br><span class="line">      where</span><br><span class="line">          (player_id,event_date) in (select</span><br><span class="line">                                           player_id, </span><br><span class="line">                                           device_id</span><br><span class="line">                                           min(event_date)</span><br><span class="line">                                      from</span><br><span class="line">                                           Activity </span><br><span class="line">                                      group by </span><br><span class="line">                                           player_id</span><br><span class="line">                                      )</span><br><span class="line">      ) as t;</span><br></pre></td></tr></table></figure></div><p><strong>需求三</strong>：编写一个 SQL 查询，同时报告每组玩家和日期，以及玩家到目前为止玩了多少游戏。也就是说，在此日期之前玩家所玩的游戏总数。详细情况请查看示例。</p><table><thead><tr><th>player_id</th><th>event_date</th><th>games_played_so_far</th></tr></thead><tbody><tr><td>1</td><td>2016-03-01</td><td>5</td></tr><tr><td>1</td><td>2016-05-02</td><td>11</td></tr><tr><td>2</td><td>2017-06-25</td><td>1</td></tr><tr><td>3</td><td>2016-03-02</td><td>0</td></tr><tr><td>3</td><td>2018-07-03</td><td>5</td></tr></tbody></table><p>提示：对于 ID 为 3 的玩家，2018-07-03 共玩了 0+5=5 个游戏。</p><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;方法一</span><br><span class="line">SELECT C.player_id,C.event_date,C.games_played_so_far</span><br><span class="line">FROM (</span><br><span class="line">      SELECT </span><br><span class="line">      A.player_id,</span><br><span class="line">      A.event_date,</span><br><span class="line">          @sum_cnt:&#x3D;</span><br><span class="line">      if(A.player_id &#x3D; @pre_id AND A.event_date !&#x3D; @pre_date,</span><br><span class="line">      @sum_cnt + A.games_played,</span><br><span class="line">      A.games_played </span><br><span class="line">      )</span><br><span class="line">      AS &#96;games_played_so_far&#96;,</span><br><span class="line">          @pre_id:&#x3D;A.player_id AS &#96;player_ids&#96;,</span><br><span class="line">          @pre_date:&#x3D;A.event_date AS &#96;event_dates&#96;</span><br><span class="line">      FROM </span><br><span class="line">          activity AS A,</span><br><span class="line">          (SELECT @pre_id:&#x3D;NULL,@pre_date:&#x3D;NULL,@sum_cnt:&#x3D;0) AS B</span><br><span class="line">      order BY </span><br><span class="line">          A.player_id,A.event_date</span><br><span class="line">) AS C</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;方法二</span><br><span class="line">SELECT </span><br><span class="line">      B.player_id,</span><br><span class="line">      B.event_date,</span><br><span class="line">      SUM(A.games_played) AS &#96;games_played_so_far&#96;</span><br><span class="line">FROM </span><br><span class="line">      Activity AS A</span><br><span class="line">JOIN </span><br><span class="line">      Activity AS B </span><br><span class="line">ON </span><br><span class="line">      A.player_id &#x3D; B.player_id </span><br><span class="line">      AND A.event_date &lt;&#x3D; B.event_date</span><br><span class="line">GROUP BY </span><br><span class="line">      B.player_id,B.event_date;</span><br></pre></td></tr></table></figure></div><p><strong>需求四</strong>：编写一个 SQL 查询，报告在首次登录的第二天再次登录的玩家的百分比，四舍五入到小数点后两位。换句话说，您需要计算从首次登录日期开始至少连续两天登录的玩家的数量，然后除以玩家总数。</p><table><thead><tr><th>fraction</th></tr></thead><tbody><tr><td>0.00</td></tr></tbody></table><p>提示：对于 ID 为 1 的玩家，2016-05-02 共玩了 5+6=11 个游戏.<br>对于 ID 为 3 的玩家，2018-07-03 共玩了 0+5=5 个游戏。</p><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">      round(</span><br><span class="line">            sum(case when datediff(a.event_date,b.first_date)&#x3D;1 then 1 else 0 end)</span><br><span class="line">               &#x2F;</span><br><span class="line">               (select count(distinct(player_id)) from activity)</span><br><span class="line">            ,2 ) as fraction</span><br><span class="line">from </span><br><span class="line">      activity a,</span><br><span class="line">     (select </span><br><span class="line">             player_id,</span><br><span class="line">             min(event_date) first_date </span><br><span class="line">      from </span><br><span class="line">             activity </span><br><span class="line">      group by </span><br><span class="line">             player_id</span><br><span class="line">     ) b</span><br><span class="line">where </span><br><span class="line">      a.player_id&#x3D;b.player_id;</span><br></pre></td></tr></table></figure></div><p><strong>需求五</strong>：编写一个 SQL 查询，报告每个安装日期、当天安装游戏的玩家数量和第一天的保留时间。</p><table><thead><tr><th>install_dt</th><th>installs</th><th>Day1_retention</th></tr></thead><tbody><tr><td>2016-03-01</td><td>2</td><td>0.50</td></tr><tr><td>2017-06-25</td><td>1</td><td>0.00</td></tr></tbody></table><p>提示：玩家 1 和 3 在 2016-03-01 安装了游戏，但只有玩家 1 在 2016-03-02 重新登录，所以 2016-03-01 的第一天保留时间是 1/2=0.50<br>玩家 2 在 2017-06-25 安装了游戏，但在 2017-06-26 没有重新登录，因此 2017-06-25 的第一天保留为 0/1=0.00</p><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">#方法一</span><br><span class="line">SELECT</span><br><span class="line">      A.install_date,</span><br><span class="line">      COUNT(A.player_id) AS &#96;installs&#96;,</span><br><span class="line">      COUNT(AA.player_id) AS &#96;return_cnt&#96;</span><br><span class="line">FROM </span><br><span class="line">   (SELECT </span><br><span class="line">           player_id,</span><br><span class="line">           MIN(event_date) AS &#96;install_date&#96;</span><br><span class="line">FROM </span><br><span class="line">           Activity</span><br><span class="line">GROUP BY </span><br><span class="line">           player_id</span><br><span class="line">    ) AS A</span><br><span class="line">left JOIN </span><br><span class="line">    Activity AS AA </span><br><span class="line">ON </span><br><span class="line">    AA.event_date &#x3D; DATE_ADD(A.install_date,INTERVAL 1 DAY) AND AA.player_id &#x3D; A.player_id</span><br><span class="line">GROUP BY</span><br><span class="line">    A.install_date;</span><br><span class="line"></span><br><span class="line">#方法二</span><br><span class="line">SELECT </span><br><span class="line">      A.event_date AS &#96;install_dt&#96;,</span><br><span class="line">      COUNT(A.player_id) AS &#96;installs&#96;,</span><br><span class="line">      round(COUNT(C.player_id)&#x2F;COUNT(A.player_id),2) AS &#96;Day1_retention&#96;</span><br><span class="line">FROM</span><br><span class="line">      Activity AS A </span><br><span class="line">left JOIN </span><br><span class="line">      Activity AS B</span><br><span class="line">ON </span><br><span class="line">      A.player_id &#x3D; B.player_id AND A.event_date &gt; B.event_date</span><br><span class="line">left JOIN </span><br><span class="line">      Activity AS C</span><br><span class="line">ON    </span><br><span class="line">      A.player_id &#x3D; C.player_id AND C.event_date &#x3D; DATE_ADD(A.event_date,INTERVAL 1 DAY)</span><br><span class="line">WHERE </span><br><span class="line">      B.event_date IS NULL</span><br><span class="line">GROUP BY </span><br><span class="line">      A.event_date;</span><br></pre></td></tr></table></figure></div><h2 id="13-员工薪水中位数"><a href="#13-员工薪水中位数" class="headerlink" title="13. 员工薪水中位数"></a>13. 员工薪水中位数</h2><p>需求：请编写SQL查询来查找每个公司的薪水中位数。挑战点：你是否可以在不使用任何内置的SQL函数的情况下解决此问题。</p><p>展示效果：</p><table><thead><tr><th>Id</th><th>Company</th><th>Salary</th></tr></thead><tbody><tr><td>5</td><td>A</td><td>451</td></tr><tr><td>6</td><td>A</td><td>513</td></tr><tr><td>12</td><td>B</td><td>234</td></tr><tr><td>9</td><td>B</td><td>1154</td></tr><tr><td>14</td><td>C</td><td>2645</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists Employee (Id int, Company varchar(255), Salary int);</span><br><span class="line"></span><br><span class="line">insert into Employee (Id, Company, Salary) values (1, &#39;A&#39;, 2341);</span><br><span class="line">insert into Employee (Id, Company, Salary) values (2, &#39;A&#39;, 341);</span><br><span class="line">insert into Employee (Id, Company, Salary) values (3, &#39;A&#39;, 15);</span><br><span class="line">insert into Employee (Id, Company, Salary) values (4, &#39;A&#39;, 15314);</span><br><span class="line">insert into Employee (Id, Company, Salary) values (5, &#39;A&#39;, 451);</span><br><span class="line">insert into Employee (Id, Company, Salary) values (6, &#39;A&#39;, 513);</span><br><span class="line">insert into Employee (Id, Company, Salary) values (7, &#39;B&#39;, 15);</span><br><span class="line">insert into Employee (Id, Company, Salary) values (8, &#39;B&#39;, 13);</span><br><span class="line">insert into Employee (Id, Company, Salary) values (9, &#39;B&#39;, 1154);</span><br><span class="line">insert into Employee (Id, Company, Salary) values (10, &#39;B&#39;, 1345);</span><br><span class="line">insert into Employee (Id, Company, Salary) values (11, &#39;B&#39;, 1221);</span><br><span class="line">insert into Employee (Id, Company, Salary) values (12, &#39;B&#39;, 234);</span><br><span class="line">insert into Employee (Id, Company, Salary) values (13, &#39;C&#39;, 2345);</span><br><span class="line">insert into Employee (Id, Company, Salary) values (14, &#39;C&#39;, 2645);</span><br><span class="line">insert into Employee (Id, Company, Salary) values (15, &#39;C&#39;, 2645);</span><br><span class="line">insert into Employee (Id, Company, Salary) values (16, &#39;C&#39;, 2652);</span><br><span class="line">insert into Employee (Id, Company, Salary) values (17, &#39;C&#39;, 65);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">     b.id,</span><br><span class="line">     b.company,</span><br><span class="line">     b.salary</span><br><span class="line">from </span><br><span class="line">    (select</span><br><span class="line">           id,</span><br><span class="line">           company,</span><br><span class="line">           salary,</span><br><span class="line">           case @com when company then @rk:&#x3D;@rk+1 else @rk:&#x3D;1 end rk,</span><br><span class="line">           @com:&#x3D;company</span><br><span class="line">    from </span><br><span class="line">           employee,</span><br><span class="line">           (select @rk:&#x3D;0, @com:&#x3D;&#39;&#39;) a</span><br><span class="line">    order by</span><br><span class="line">           company,salary</span><br><span class="line">    ) b</span><br><span class="line">left join </span><br><span class="line">    (select</span><br><span class="line">           company,</span><br><span class="line">           count(1)&#x2F;2 cnt</span><br><span class="line">     from </span><br><span class="line">           employee</span><br><span class="line">     group by company</span><br><span class="line">    ) c</span><br><span class="line">on </span><br><span class="line">     b.company&#x3D;c.company</span><br><span class="line">where</span><br><span class="line">     b.rk in (cnt+0.5,cnt+1,cnt);</span><br></pre></td></tr></table></figure></div><h2 id="14-至少有5名直接下属的经理"><a href="#14-至少有5名直接下属的经理" class="headerlink" title="14. 至少有5名直接下属的经理"></a>14. 至少有5名直接下属的经理</h2><p>需求：Employee 表，请编写一个SQL查询来查找至少有5名直接下属的经理。</p><p>展示效果：</p><table><thead><tr><th>Name</th></tr></thead><tbody><tr><td>John</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists Employee (Id int, Name varchar(255), Department varchar(255), ManagerId int);</span><br><span class="line"></span><br><span class="line">insert into Employee (Id, Name, Department, ManagerId) values (101, &#39;John&#39;, &#39;A&#39;, null);</span><br><span class="line">insert into Employee (Id, Name, Department, ManagerId) values (102, &#39;Dan&#39;, &#39;A&#39;, 101);</span><br><span class="line">insert into Employee (Id, Name, Department, ManagerId) values (103, &#39;James&#39;, &#39;A&#39;, 101);</span><br><span class="line">insert into Employee (Id, Name, Department, ManagerId) values (104, &#39;Amy&#39;, &#39;A&#39;, 101);</span><br><span class="line">insert into Employee (Id, Name, Department, ManagerId) values (105, &#39;Anne&#39;, &#39;A&#39;, 101);</span><br><span class="line">insert into Employee (Id, Name, Department, ManagerId) values (106, &#39;Ron&#39;, &#39;B&#39;, 101);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">    Name</span><br><span class="line">FROM</span><br><span class="line">    Employee AS t1 </span><br><span class="line">JOIN </span><br><span class="line">   (SELECT</span><br><span class="line">        ManagerId</span><br><span class="line">    FROM</span><br><span class="line">        Employee</span><br><span class="line">    GROUP BY </span><br><span class="line">        ManagerId</span><br><span class="line">    HAVING</span><br><span class="line">        COUNT(ManagerId) &gt;&#x3D; 5</span><br><span class="line">    ) AS t2</span><br><span class="line">ON  </span><br><span class="line">    t1.Id &#x3D; t2.ManagerId;</span><br></pre></td></tr></table></figure></div><h2 id="15-给定数字的频率查询中位数"><a href="#15-给定数字的频率查询中位数" class="headerlink" title="15. 给定数字的频率查询中位数"></a>15. 给定数字的频率查询中位数</h2><p>需求：编写一个 SQL 查询，满足条件：无论 person 是否有地址信息，都需要基于上述两表提供 person 的以下信息：<br>FirstName, LastName, City, State</p><p>展示效果：</p><table><thead><tr><th>median</th></tr></thead><tbody><tr><td>0.0000</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists Numbers (Number int, Frequency int);</span><br><span class="line"></span><br><span class="line">insert into Numbers (Number, Frequency) values (0, 7);</span><br><span class="line">insert into Numbers (Number, Frequency) values (1, 1);</span><br><span class="line">insert into Numbers (Number, Frequency) values (2, 3);</span><br><span class="line">insert into Numbers (Number, Frequency) values (3, 1);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">      avg(t.number) as median</span><br><span class="line">from</span><br><span class="line">      (select</span><br><span class="line">             n1.number,</span><br><span class="line">             n1.frequency,</span><br><span class="line">             (select </span><br><span class="line">                   sum(frequency) </span><br><span class="line">              from </span><br><span class="line">                   numbers n2</span><br><span class="line">              where </span><br><span class="line">                   n2.number&lt;&#x3D;n1.number</span><br><span class="line">             ) as asc_frequency,</span><br><span class="line">             (select</span><br><span class="line">                   sum(frequency)</span><br><span class="line">              from </span><br><span class="line">                   numbers n3 </span><br><span class="line">              where </span><br><span class="line">                   n3.number&gt;&#x3D;n1.number</span><br><span class="line">             ) as desc_frequency</span><br><span class="line">      from </span><br><span class="line">             numbers n1</span><br><span class="line">      ) t</span><br><span class="line">where </span><br><span class="line">      t.asc_frequency&gt;&#x3D; (select sum(frequency) from numbers)&#x2F;2</span><br><span class="line">      and t.desc_frequency&gt;&#x3D; (select sum(frequency) from numbers)&#x2F;2;</span><br></pre></td></tr></table></figure></div><h2 id="16-当选者"><a href="#16-当选者" class="headerlink" title="16. 当选者"></a>16. 当选者</h2><p>需求：请编写 sql 语句来找到当选者（CandidateId）的名字</p><p>展示效果：</p><table><thead><tr><th>Name</th></tr></thead><tbody><tr><td>B</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists Candidate (id int, Name varchar(255));</span><br><span class="line">Create table If Not Exists Vote (id int, CandidateId int);</span><br><span class="line"></span><br><span class="line">insert into Candidate (id, Name) values (1, &#39;A&#39;);</span><br><span class="line">insert into Candidate (id, Name) values (2, &#39;B&#39;);</span><br><span class="line">insert into Candidate (id, Name) values (3, &#39;C&#39;);</span><br><span class="line">insert into Candidate (id, Name) values (4, &#39;D&#39;);</span><br><span class="line">insert into Candidate (id, Name) values (5, &#39;E&#39;);</span><br><span class="line"></span><br><span class="line">insert into Vote (id, CandidateId) values (1, 2);</span><br><span class="line">insert into Vote (id, CandidateId) values (2, 44);</span><br><span class="line">insert into Vote (id, CandidateId) values (3, 3);</span><br><span class="line">insert into Vote (id, CandidateId) values (4, 2);</span><br><span class="line">insert into Vote (id, CandidateId) values (5, 5);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">    name AS &#39;Name&#39;</span><br><span class="line">FROM</span><br><span class="line">    Candidate</span><br><span class="line">JOIN</span><br><span class="line">    (SELECT</span><br><span class="line">        Candidateid</span><br><span class="line">    FROM</span><br><span class="line">        Vote</span><br><span class="line">    GROUP BY </span><br><span class="line">        Candidateid</span><br><span class="line">    ORDER BY </span><br><span class="line">        COUNT(*) DESC</span><br><span class="line">    LIMIT 1</span><br><span class="line">    ) AS winner</span><br><span class="line">WHERE</span><br><span class="line">    Candidate.id &#x3D; winner.Candidateid;</span><br></pre></td></tr></table></figure></div><h2 id="17-员工奖金"><a href="#17-员工奖金" class="headerlink" title="17. 员工奖金"></a>17. 员工奖金</h2><p>需求：选出所有 bonus &lt; 1000 的员工的 name 及其 bonus。</p><p>展示效果：</p><table><thead><tr><th>name</th><th>bonus</th></tr></thead><tbody><tr><td>John</td><td>null</td></tr><tr><td>Dan</td><td>500</td></tr><tr><td>Brad</td><td>null</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists Employee (EmpId int, Name varchar(255), Supervisor int, Salary int);</span><br><span class="line">Create table If Not Exists Bonus (EmpId int, Bonus int);</span><br><span class="line"></span><br><span class="line">insert into Employee (EmpId, Name, Supervisor, Salary) values (3, &#39;Brad&#39;, null, 4000);</span><br><span class="line">insert into Employee (EmpId, Name, Supervisor, Salary) values (1, &#39;John&#39;, 3, 1000);</span><br><span class="line">insert into Employee (EmpId, Name, Supervisor, Salary) values (2, &#39;Dan&#39;, 3, 2000);</span><br><span class="line">insert into Employee (EmpId, Name, Supervisor, Salary) values (4, &#39;Thomas&#39;, 3, 4000);</span><br><span class="line"></span><br><span class="line">insert into Bonus (EmpId, Bonus) values (2, 500);</span><br><span class="line">insert into Bonus (EmpId, Bonus) values (4, 2000);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">    Employee.name, </span><br><span class="line">    Bonus.bonus</span><br><span class="line">FROM</span><br><span class="line">    Employee</span><br><span class="line">LEFT JOIN</span><br><span class="line">    Bonus</span><br><span class="line">ON </span><br><span class="line">    Employee.empid &#x3D; Bonus.empid</span><br><span class="line">WHERE</span><br><span class="line">    bonus &lt; 1000 OR bonus IS NULL;</span><br></pre></td></tr></table></figure></div><h2 id="18-最高回答率"><a href="#18-最高回答率" class="headerlink" title="18. 最高回答率"></a>18. 最高回答率</h2><p>需求：请编写SQL查询来找到具有最高回答率的问题。</p><p>展示效果：</p><table><thead><tr><th>survey_log</th></tr></thead><tbody><tr><td>285</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists survey_log (uid int, action varchar(255), question_id int, answer_id int, q_num int, timestamp int);</span><br><span class="line"></span><br><span class="line">insert into survey_log (uid, action, question_id, answer_id, q_num, timestamp) values (5, &#39;show&#39;, 285, null, 1, 123);</span><br><span class="line">insert into survey_log (uid, action, question_id, answer_id, q_num, timestamp) values (5, &#39;answer&#39;, 285, 124124, 1, &#39;124&#39;);</span><br><span class="line">insert into survey_log (uid, action, question_id, answer_id, q_num, timestamp) values (5, &#39;show&#39;, 369, null, 2, 125);</span><br><span class="line">insert into survey_log (uid, action, question_id, answer_id, q_num, timestamp) values (5, &#39;skip&#39;, 369, null, 2, 126);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#方法一</span><br><span class="line">SELECT </span><br><span class="line">    question_id as survey_log</span><br><span class="line">FROM</span><br><span class="line">   (SELECT </span><br><span class="line">         question_id,</span><br><span class="line">         SUM(case when action&#x3D;&quot;answer&quot; THEN 1 ELSE 0 END) as num_answer,</span><br><span class="line">         SUM(case when action&#x3D;&quot;show&quot; THEN 1 ELSE 0 END) as num_show</span><br><span class="line">FROM </span><br><span class="line">         survey_log</span><br><span class="line">GROUP BY </span><br><span class="line">         question_id</span><br><span class="line">    ) as tbl</span><br><span class="line">ORDER BY</span><br><span class="line">    (num_answer &#x2F; num_show) DESC</span><br><span class="line">LIMIT 1;</span><br><span class="line"></span><br><span class="line">#方法二</span><br><span class="line">SELECT </span><br><span class="line">    question_id AS &#39;survey_log&#39;</span><br><span class="line">FROM</span><br><span class="line">    survey_log</span><br><span class="line">GROUP BY</span><br><span class="line">    question_id</span><br><span class="line">ORDER BY</span><br><span class="line">    COUNT(answer_id) &#x2F; COUNT(IF(action &#x3D; &#39;show&#39;, 1, 0)) DESC</span><br><span class="line">LIMIT 1;</span><br></pre></td></tr></table></figure></div><h2 id="19-员工累计薪水"><a href="#19-员工累计薪水" class="headerlink" title="19. 员工累计薪水"></a>19. 员工累计薪水</h2><p>需求：查询一个员工三个月内的累计薪水，但是不包括最近一个月的薪水。</p><p>展示效果：</p><table><thead><tr><th>Id</th><th>Month</th><th>Salary</th></tr></thead><tbody><tr><td>1</td><td>3</td><td>90</td></tr><tr><td>1</td><td>2</td><td>50</td></tr><tr><td>1</td><td>1</td><td>20</td></tr><tr><td>2</td><td>1</td><td>20</td></tr><tr><td>3</td><td>3</td><td>100</td></tr><tr><td>3</td><td>2</td><td>40</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists Employee (Id int, Month int, Salary int);</span><br><span class="line"></span><br><span class="line">insert into Employee (Id, Month, Salary) values (1, 1, 20);</span><br><span class="line">insert into Employee (Id, Month, Salary) values (2, 1, 20);</span><br><span class="line">insert into Employee (Id, Month, Salary) values (1, 2, 30);</span><br><span class="line">insert into Employee (Id, Month, Salary) values (2, 2, 30);</span><br><span class="line">insert into Employee (Id, Month, Salary) values (3, 2, 40);</span><br><span class="line">insert into Employee (Id, Month, Salary) values (1, 3, 40);</span><br><span class="line">insert into Employee (Id, Month, Salary) values (3, 3, 60);</span><br><span class="line">insert into Employee (Id, Month, Salary) values (1, 4, 60);</span><br><span class="line">insert into Employee (Id, Month, Salary) values (3, 4, 70);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">    E1.id,</span><br><span class="line">    E1.month,</span><br><span class="line">    (IFNULL(E1.salary, 0) + IFNULL(E2.salary, 0) + IFNULL(E3.salary, 0)) AS Salary</span><br><span class="line">FROM</span><br><span class="line">    (SELECT</span><br><span class="line">        id, MAX(month) AS month</span><br><span class="line">    FROM</span><br><span class="line">        Employee</span><br><span class="line">    GROUP BY </span><br><span class="line">        id</span><br><span class="line">    HAVING </span><br><span class="line">        COUNT(*) &gt; 1) AS maxmonth</span><br><span class="line">    LEFT JOIN</span><br><span class="line">        Employee E1 </span><br><span class="line">    ON </span><br><span class="line">        (maxmonth.id &#x3D; E1.id AND maxmonth.month &gt; E1.month)</span><br><span class="line">    LEFT JOIN</span><br><span class="line">        Employee E2 </span><br><span class="line">    ON </span><br><span class="line">        (E2.id &#x3D; E1.id AND E2.month &#x3D; E1.month - 1)</span><br><span class="line">    LEFT JOIN </span><br><span class="line">        Employee E3 </span><br><span class="line">    ON</span><br><span class="line">        (E3.id &#x3D; E1.id AND E3.month &#x3D; E1.month - 2)</span><br><span class="line">ORDER BY </span><br><span class="line">    id ASC , month DESC;</span><br></pre></td></tr></table></figure></div><h2 id="20-统计各专业人数"><a href="#20-统计各专业人数" class="headerlink" title="20. 统计各专业人数"></a>20. 统计各专业人数</h2><p>需求：查询 department 表中每个专业的学生人数 （即使没有学生的专业也需列出）。</p><p>展示效果：</p><table><thead><tr><th>dept_name</th><th>student_number</th></tr></thead><tbody><tr><td>Engineering</td><td>2</td></tr><tr><td>Science</td><td>1</td></tr><tr><td>Law</td><td>0</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE IF NOT EXISTS student (student_id INT,student_name VARCHAR(45), gender VARCHAR(6), dept_id INT);</span><br><span class="line">CREATE TABLE IF NOT EXISTS department (dept_id INT, dept_name VARCHAR(255));</span><br><span class="line"></span><br><span class="line">insert into student (student_id, student_name, gender, dept_id) values (1, &#39;Jack&#39;, &#39;M&#39;, 1);</span><br><span class="line">insert into student (student_id, student_name, gender, dept_id) values (2, &#39;Jane&#39;, &#39;F&#39;, 1);</span><br><span class="line">insert into student (student_id, student_name, gender, dept_id) values (3, &#39;Mark&#39;, &#39;M&#39;, 2);</span><br><span class="line"></span><br><span class="line">insert into department (dept_id, dept_name) values (1, &#39;Engineering&#39;);</span><br><span class="line">insert into department (dept_id, dept_name) values (2, &#39;Science&#39;);</span><br><span class="line">insert into department (dept_id, dept_name) values (3, &#39;Law&#39;);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">    dept_name,</span><br><span class="line">    COUNT(student_id) AS student_number</span><br><span class="line">FROM</span><br><span class="line">    department</span><br><span class="line">LEFT OUTER JOIN</span><br><span class="line">    student </span><br><span class="line">ON</span><br><span class="line">    department.dept_id &#x3D; student.dept_id</span><br><span class="line">GROUP BY </span><br><span class="line">    department.dept_name</span><br><span class="line">ORDER BY </span><br><span class="line">    student_number DESC, </span><br><span class="line">    department.dept_name;</span><br></pre></td></tr></table></figure></div><h2 id="21-寻找用户推荐人"><a href="#21-寻找用户推荐人" class="headerlink" title="21. 寻找用户推荐人"></a>21. 寻找用户推荐人</h2><p>需求：写一个查询语句，返回一个编号列表，列表中编号的推荐人的编号都 <strong>不是</strong> 2</p><p>展示效果：</p><table><thead><tr><th>name</th></tr></thead><tbody><tr><td>Will</td></tr><tr><td>Jane</td></tr><tr><td>Bill</td></tr><tr><td>Zack</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE IF NOT EXISTS customer (id INT,name VARCHAR(25),referee_id INT);</span><br><span class="line"></span><br><span class="line">insert into customer (id, name, referee_id) values (1, &#39;Will&#39;, null);</span><br><span class="line">insert into customer (id, name, referee_id) values (2, &#39;Jane&#39;, null);</span><br><span class="line">insert into customer (id, name, referee_id) values (3, &#39;Alex&#39;, 2);</span><br><span class="line">insert into customer (id, name, referee_id) values (4, &#39;Bill&#39;, null);</span><br><span class="line">insert into customer (id, name, referee_id) values (5, &#39;Zack&#39;, 1);</span><br><span class="line">insert into customer (id, name, referee_id) values (6, &#39;Mark&#39;, 2);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">      name</span><br><span class="line">FROM </span><br><span class="line">      customer</span><br><span class="line">WHERE </span><br><span class="line">      referee_id &lt;&gt; 2 OR referee_id IS NULL;</span><br></pre></td></tr></table></figure></div><h2 id="22-2016年的投资"><a href="#22-2016年的投资" class="headerlink" title="22. 2016年的投资"></a>22. 2016年的投资</h2><p>需求：写一个查询语句，将 2016 年 (TIV_2016) 所有成功投资的金额加起来，保留 2 位小数。</p><p>展示效果：</p><table><thead><tr><th>TIV_2016</th></tr></thead><tbody><tr><td>45.00</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE IF NOT EXISTS insurance (PID INTEGER(11), TIV_2015 NUMERIC(15,2), TIV_2016 NUMERIC(15,2), LAT NUMERIC(5,2), LON NUMERIC(5,2) );</span><br><span class="line"></span><br><span class="line">insert into insurance (PID, TIV_2015, TIV_2016, LAT, LON) values (1, 10, 5, 10, 10);</span><br><span class="line">insert into insurance (PID, TIV_2015, TIV_2016, LAT, LON) values (2, 20, 20, 20, 20);</span><br><span class="line">insert into insurance (PID, TIV_2015, TIV_2016, LAT, LON) values (3, 10, 30, 20, 20);</span><br><span class="line">insert into insurance (PID, TIV_2015, TIV_2016, LAT, LON) values (4, 10, 40, 40, 40);</span><br></pre></td></tr></table></figure></div><p>提示：</p><p>对于一个投保人，他在 2016 年成功投资的条件是：</p><p>他在 2015 年的投保额 (TIV_2015) 至少跟一个其他投保人在 2015 年的投保额相同。<br>他所在的城市必须与其他投保人都不同（也就是说维度和经度不能跟其他任何一个投保人完全相同）。</p><p>就如最后一个投保人，第一个投保人同时满足两个条件：</p><ol><li>他在 2015 年的投保金额 TIV_2015 为 10 ，与第三个和第四个投保人在 2015 年的投保金额相同。</li><li>他所在城市的经纬度是独一无二的。</li></ol><p>第二个投保人两个条件都不满足。他在 2015 年的投资 TIV_2015 与其他任何投保人都不相同。<br>且他所在城市的经纬度与第三个投保人相同。基于同样的原因，第三个投保人投资失败。</p><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">    SUM(insurance.TIV_2016) AS TIV_2016</span><br><span class="line">FROM</span><br><span class="line">    insurance</span><br><span class="line">WHERE</span><br><span class="line">    insurance.TIV_2015 IN(</span><br><span class="line">                          SELECT</span><br><span class="line">                                TIV_2015</span><br><span class="line">                          FROM</span><br><span class="line">                                insurance</span><br><span class="line">                          GROUP BY </span><br><span class="line">                                TIV_2015</span><br><span class="line">                          HAVING </span><br><span class="line">                                COUNT(*) &gt; 1</span><br><span class="line">                          )</span><br><span class="line">                      AND </span><br><span class="line">                          CONCAT(LAT, LON) IN(</span><br><span class="line">                                              SELECT</span><br><span class="line">                                                    CONCAT(LAT, LON)</span><br><span class="line">                                              FROM</span><br><span class="line">                                                    insurance</span><br><span class="line">                                              GROUP BY </span><br><span class="line">                                                    LAT , LON</span><br><span class="line">                                              HAVING COUNT(*) &#x3D; 1</span><br><span class="line">    );</span><br></pre></td></tr></table></figure></div><h2 id="23-订单最多的客户"><a href="#23-订单最多的客户" class="headerlink" title="23. 订单最多的客户"></a>23. 订单最多的客户</h2><p>需求：在表 orders 中找到订单数最多客户对应的 customer_number 。</p><p>展示效果：</p><table><thead><tr><th>customer_number</th></tr></thead><tbody><tr><td>3</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists orders (order_number int, customer_number int, order_date date, required_date date, shipped_date date, status char(15), comment char(200), key(order_number));</span><br><span class="line"></span><br><span class="line">insert into orders (order_number, customer_number) values (1, 1);</span><br><span class="line">insert into orders (order_number, customer_number) values (2, 2);</span><br><span class="line">insert into orders (order_number, customer_number) values (3, 3);</span><br><span class="line">insert into orders (order_number, customer_number) values (4, 3);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">    customer_number</span><br><span class="line">FROM</span><br><span class="line">    orders</span><br><span class="line">GROUP BY </span><br><span class="line">    customer_number</span><br><span class="line">ORDER BY</span><br><span class="line">    COUNT(*) DESC</span><br><span class="line">LIMIT 1;</span><br></pre></td></tr></table></figure></div><p>进阶： 如果有多位顾客订单数并列最多，你能找到他们所有的 customer_number 吗？</p><h2 id="24-大的国家"><a href="#24-大的国家" class="headerlink" title="24. 大的国家"></a>24. 大的国家</h2><p>需求：编写一个SQL查询，输出表中所有大国家的名称、人口和面积。</p><p>展示效果：</p><table><thead><tr><th>name</th><th>population</th><th>area</th></tr></thead><tbody><tr><td>Afghanistan</td><td>25500100</td><td>652230</td></tr><tr><td>Algeria</td><td>37100000</td><td>2381741</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists World (name varchar(255), continent varchar(255), area int, population int, gdp bigint);</span><br><span class="line"></span><br><span class="line">insert into World (name, continent, area, population, gdp) values (&#39;Afghanistan&#39;, &#39;Asia&#39;, 652230, 25500100, 20343000000);</span><br><span class="line">insert into World (name, continent, area, population, gdp) values (&#39;Albania&#39;, &#39;Europe&#39;, 28748, 2831741, 12960000000);</span><br><span class="line">insert into World (name, continent, area, population, gdp) values (&#39;Algeria&#39;, &#39;Africa&#39;, 2381741, 37100000, 188681000000);</span><br><span class="line">insert into World (name, continent, area, population, gdp) values (&#39;Andorra&#39;, &#39;Europe&#39;, 468, 78115, 3712000000);</span><br><span class="line">insert into World (name, continent, area, population, gdp) values (&#39;Angola&#39;, &#39;Africa&#39;, 1246700, 20609294, 100990000000);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#方法一：or</span><br><span class="line">select </span><br><span class="line">      w.name,</span><br><span class="line">      w.population,</span><br><span class="line">      w.area</span><br><span class="line">from </span><br><span class="line">      world w</span><br><span class="line">where </span><br><span class="line">      w.area &gt;3000000 or w.population &gt;25000000</span><br><span class="line"></span><br><span class="line">#方法二：union</span><br><span class="line">select </span><br><span class="line">      w.name,</span><br><span class="line">      w.population,</span><br><span class="line">      w.area</span><br><span class="line">from </span><br><span class="line">      world w</span><br><span class="line">where </span><br><span class="line">      w.area&gt;3000000</span><br><span class="line">union</span><br><span class="line">select</span><br><span class="line">      w.name,</span><br><span class="line">      w.population,</span><br><span class="line">      w.area</span><br><span class="line">from </span><br><span class="line">      world w</span><br><span class="line">where </span><br><span class="line">      w.population&gt;25000000</span><br></pre></td></tr></table></figure></div><h2 id="25-超过五名学生的课"><a href="#25-超过五名学生的课" class="headerlink" title="25. 超过五名学生的课"></a>25. 超过五名学生的课</h2><p>需求：编写一个 SQL 查询，列出所有超过或等于5名学生的课。</p><p>展示效果：</p><table><thead><tr><th>class</th></tr></thead><tbody><tr><td>Math</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists courses (student varchar(255), class varchar(255));</span><br><span class="line"></span><br><span class="line">insert into courses (student, class) values (&#39;A&#39;, &#39;Math&#39;);</span><br><span class="line">insert into courses (student, class) values (&#39;B&#39;, &#39;English&#39;);</span><br><span class="line">insert into courses (student, class) values (&#39;C&#39;, &#39;Math&#39;);</span><br><span class="line">insert into courses (student, class) values (&#39;D&#39;, &#39;Biology&#39;);</span><br><span class="line">insert into courses (student, class) values (&#39;E&#39;, &#39;Math&#39;);</span><br><span class="line">insert into courses (student, class) values (&#39;F&#39;, &#39;Computer&#39;);</span><br><span class="line">insert into courses (student, class) values (&#39;G&#39;, &#39;Math&#39;);</span><br><span class="line">insert into courses (student, class) values (&#39;H&#39;, &#39;Math&#39;);</span><br><span class="line">insert into courses (student, class) values (&#39;I&#39;, &#39;Math&#39;);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">      class </span><br><span class="line">from </span><br><span class="line">      courses </span><br><span class="line">group by </span><br><span class="line">      class</span><br><span class="line">having </span><br><span class="line">      count(distinct student)&gt;&#x3D;5 ;</span><br></pre></td></tr></table></figure></div><h2 id="26-好友申请"><a href="#26-好友申请" class="headerlink" title="26. 好友申请"></a>26. 好友申请</h2><p>需求一：写一个查询语句，求出好友申请的通过率，用 2 位小数表示。通过率由接受好友申请的数目除以申请总数。</p><p>展示效果：</p><table><thead><tr><th>accept_rate</th></tr></thead><tbody><tr><td>0.80</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists friend_request ( sender_id INT NOT NULL, send_to_id INT NULL, request_date DATE NULL);</span><br><span class="line">Create table If Not Exists request_accepted ( requester_id INT NOT NULL, accepter_id INT NULL, accept_date DATE NULL);</span><br><span class="line"></span><br><span class="line">insert into friend_request (sender_id, send_to_id, request_date) values (1, 2, &#39;2016&#x2F;06&#x2F;01&#39;);</span><br><span class="line">insert into friend_request (sender_id, send_to_id, request_date) values (1, 3, &#39;2016&#x2F;06&#x2F;01&#39;);</span><br><span class="line">insert into friend_request (sender_id, send_to_id, request_date) values (1, 4, &#39;2016&#x2F;06&#x2F;01&#39;);</span><br><span class="line">insert into friend_request (sender_id, send_to_id, request_date) values (2, 3, &#39;2016&#x2F;06&#x2F;02&#39;);</span><br><span class="line">insert into friend_request (sender_id, send_to_id, request_date) values (3, 4, &#39;2016&#x2F;06&#x2F;09&#39;);</span><br><span class="line"></span><br><span class="line">insert into request_accepted (requester_id, accepter_id, accept_date) values (1, 2, &#39;2016&#x2F;06&#x2F;03&#39;);</span><br><span class="line">insert into request_accepted (requester_id, accepter_id, accept_date) values (1, 3, &#39;2016&#x2F;06&#x2F;08&#39;);</span><br><span class="line">insert into request_accepted (requester_id, accepter_id, accept_date) values (2, 3, &#39;2016&#x2F;06&#x2F;08&#39;);</span><br><span class="line">insert into request_accepted (requester_id, accepter_id, accept_date) values (3, 4, &#39;2016&#x2F;06&#x2F;09&#39;);</span><br><span class="line">insert into request_accepted (requester_id, accepter_id, accept_date) values (3, 4, &#39;2016&#x2F;06&#x2F;10&#39;);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">      round(</span><br><span class="line">            ifnull(</span><br><span class="line">                   (select count(*) from (select distinct requester_id, accepter_id from request_accepted) as A)</span><br><span class="line">                   &#x2F;</span><br><span class="line">                   (select count(*) from (select distinct sender_id, send_to_id from friend_request) as B)</span><br><span class="line">            , 0)</span><br><span class="line">      , 2) as accept_rate;</span><br></pre></td></tr></table></figure></div><p>需求二：写一个查询语句，求出谁拥有最多的好友和他拥有的好友数目。</p><p>展示效果：</p><table><thead><tr><th>id</th><th>num</th></tr></thead><tbody><tr><td>3</td><td>3</td></tr></tbody></table><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">select ids as id, cnt as num</span><br><span class="line">from</span><br><span class="line">    (select</span><br><span class="line">           ids,</span><br><span class="line">           count(*) as cnt</span><br><span class="line">     from</span><br><span class="line">           (select </span><br><span class="line">                  requester_id as ids </span><br><span class="line">            from</span><br><span class="line">                  request_accepted</span><br><span class="line">            union all</span><br><span class="line">            select</span><br><span class="line">                  accepter_id </span><br><span class="line">            from</span><br><span class="line">                  request_accepted</span><br><span class="line">            ) as tbl1</span><br><span class="line">     group by ids</span><br><span class="line">     ) as tbl2</span><br><span class="line">order by </span><br><span class="line">     cnt desc</span><br><span class="line">limit 1;</span><br></pre></td></tr></table></figure></div><h2 id="27-体育馆人流量"><a href="#27-体育馆人流量" class="headerlink" title="27. 体育馆人流量"></a>27. 体育馆人流量</h2><p>需求：请编写一个查询语句，找出人流量的高峰期。高峰期时，至少连续三行记录中的人流量不少于100。</p><p>展示效果：</p><table><thead><tr><th>id</th><th>visit_date</th><th>people</th></tr></thead><tbody><tr><td>5</td><td>2017-01-05</td><td>145</td></tr><tr><td>6</td><td>2017-01-06</td><td>1455</td></tr><tr><td>7</td><td>2017-01-07</td><td>199</td></tr><tr><td>8</td><td>2017-01-08</td><td>188</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists stadium (id int, visit_date DATE NULL, people int);</span><br><span class="line"></span><br><span class="line">insert into stadium (id, visit_date, people) values (1, &#39;2017-01-01&#39;, 10);</span><br><span class="line">insert into stadium (id, visit_date, people) values (2, &#39;2017-01-02&#39;, 109);</span><br><span class="line">insert into stadium (id, visit_date, people) values (3, &#39;2017-01-03&#39;, 150);</span><br><span class="line">insert into stadium (id, visit_date, people) values (4, &#39;2017-01-04&#39;, 99);</span><br><span class="line">insert into stadium (id, visit_date, people) values (5, &#39;2017-01-05&#39;, 145);</span><br><span class="line">insert into stadium (id, visit_date, people) values (6, &#39;2017-01-06&#39;, 1455);</span><br><span class="line">insert into stadium (id, visit_date, people) values (7, &#39;2017-01-07&#39;, 199);</span><br><span class="line">insert into stadium (id, visit_date, people) values (8, &#39;2017-01-08&#39;, 188);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">     distinct a.*</span><br><span class="line">FROM </span><br><span class="line">     stadium as a,</span><br><span class="line">     stadium as b,</span><br><span class="line">     stadium as c</span><br><span class="line">where</span><br><span class="line">     ((a.id &#x3D; b.id-1 and b.id+1 &#x3D; c.id) or(a.id-1 &#x3D; b.id and a.id+1 &#x3D; c.id) or(a.id-1 &#x3D; c.id and c.id-1 &#x3D; b.id))</span><br><span class="line">      and </span><br><span class="line">     (a.people&gt;&#x3D;100 and b.people&gt;&#x3D;100 and c.people&gt;&#x3D;100)</span><br><span class="line">order by </span><br><span class="line">     a.id;</span><br></pre></td></tr></table></figure></div><h2 id="28-连续空余座位"><a href="#28-连续空余座位" class="headerlink" title="28. 连续空余座位"></a>28. 连续空余座位</h2><p>需求：编写一个 SQL 查询，获取所有空余座位，并将它们按照 seat_id 排序</p><p>展示效果：</p><table><thead><tr><th>seat_id</th></tr></thead><tbody><tr><td>3</td></tr><tr><td>4</td></tr><tr><td>5</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists cinema (seat_id int primary key auto_increment, free bool);</span><br><span class="line"></span><br><span class="line">insert into cinema (seat_id, free) values (1, 1);</span><br><span class="line">insert into cinema (seat_id, free) values (2, 0);</span><br><span class="line">insert into cinema (seat_id, free) values (3, 1);</span><br><span class="line">insert into cinema (seat_id, free) values (4, 1);</span><br><span class="line">insert into cinema (seat_id, free) values (5, 1);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">     distinct a.seat_id</span><br><span class="line">from </span><br><span class="line">     cinema a </span><br><span class="line">join </span><br><span class="line">     cinema b</span><br><span class="line">on </span><br><span class="line">     abs(a.seat_id - b.seat_id) &#x3D; 1 and a.free &#x3D; true and b.free &#x3D; true</span><br><span class="line">order by </span><br><span class="line">     a.seat_id;</span><br></pre></td></tr></table></figure></div><h2 id="29-销售员"><a href="#29-销售员" class="headerlink" title="29. 销售员"></a>29. 销售员</h2><p>需求：输出所有表 salesperson中，没有向公司 ‘RED’ 销售任何东西的销售员。</p><p>展示效果：</p><table><thead><tr><th>name</th></tr></thead><tbody><tr><td>Amy</td></tr><tr><td>Mark</td></tr><tr><td>Alex</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists salesperson (sales_id int, name varchar(255), salary int,commission_rate int, hire_date varchar(255));</span><br><span class="line">Create table If Not Exists company (com_id int, name varchar(255), city varchar(255));</span><br><span class="line">Create table If Not Exists orders (order_id int, order_date varchar(255), com_id int, sales_id int, amount int);</span><br><span class="line"></span><br><span class="line">insert into salesperson (sales_id, name, salary, commission_rate, hire_date) values (1,&#39;John&#39;,100000, 6, &#39;4&#x2F;1&#x2F;2006&#39;);</span><br><span class="line">insert into salesperson (sales_id, name, salary, commission_rate, hire_date) values (2,&#39;Amy&#39;, 12000, 5, &#39;5&#x2F;1&#x2F;2010&#39;);</span><br><span class="line">insert into salesperson (sales_id, name, salary, commission_rate, hire_date) values (3,&#39;Mark&#39;,65000, 12, &#39;12&#x2F;25&#x2F;2008&#39;);</span><br><span class="line">insert into salesperson (sales_id, name, salary, commission_rate, hire_date) values (4,&#39;Pam&#39;, 25000, 25, &#39;1&#x2F;1&#x2F;2005&#39;);</span><br><span class="line">insert into salesperson (sales_id, name, salary, commission_rate, hire_date) values (5,&#39;Alex&#39;, 5000, 10, &#39;2&#x2F;3&#x2F;2007&#39;);</span><br><span class="line"></span><br><span class="line">insert into company (com_id, name, city) values (1, &#39;RED&#39;, &#39;Boston&#39;);</span><br><span class="line">insert into company (com_id, name, city) values (2, &#39;ORANGE&#39;, &#39;New York&#39;);</span><br><span class="line">insert into company (com_id, name, city) values (3, &#39;YELLOW&#39;, &#39;Boston&#39;);</span><br><span class="line">insert into company (com_id, name, city) values (4, &#39;GREEN&#39;, &#39;Austin&#39;);</span><br><span class="line"></span><br><span class="line">insert into orders (order_id, order_date, com_id, sales_id, amount) values (1, &#39;1&#x2F;1&#x2F;2014&#39;, 3, 4, 10000);</span><br><span class="line">insert into orders (order_id, order_date, com_id, sales_id, amount) values (2, &#39;2&#x2F;1&#x2F;2014&#39;, 4, 5, 5000);</span><br><span class="line">insert into orders (order_id, order_date, com_id, sales_id, amount) values (3, &#39;3&#x2F;1&#x2F;2014&#39;, 1, 1, 50000);</span><br><span class="line">insert into orders (order_id, order_date, com_id, sales_id, amount) values (4, &#39;4&#x2F;1&#x2F;2014&#39;, 1, 4, 25000);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">    s.name</span><br><span class="line">FROM</span><br><span class="line">    salesperson s</span><br><span class="line">WHERE</span><br><span class="line">    s.sales_id NOT IN (</span><br><span class="line">                       SELECT</span><br><span class="line">                             o.sales_id</span><br><span class="line">                       FROM</span><br><span class="line">                             orders o</span><br><span class="line">                       LEFT JOIN</span><br><span class="line">                             company c </span><br><span class="line">                       ON</span><br><span class="line">                             o.com_id &#x3D; c.com_id</span><br><span class="line">                       WHERE</span><br><span class="line">                             c.name &#x3D; &#39;RED&#39;</span><br><span class="line">    );</span><br></pre></td></tr></table></figure></div><h2 id="30-节点树"><a href="#30-节点树" class="headerlink" title="30. 节点树"></a>30. 节点树</h2><p>需求：写一个查询语句，输出所有节点的编号和节点的类型，并将结果按照节点编号排序。</p><p>表 tree，<strong>id</strong> 是树节点的编号， <strong>p_id</strong> 是它父节点的 <strong>id 。</strong></p><p>树中每个节点属于以下三种类型之一：</p><p>​        叶子：如果这个节点没有任何孩子节点。</p><p>​        根：如果这个节点是整棵树的根，即没有父节点。</p><p>​        内部节点：如果这个节点既不是叶子节点也不是根节点。</p><table><thead><tr><th>id</th><th>p_id</th></tr></thead><tbody><tr><td>1</td><td>null</td></tr><tr><td>2</td><td>1</td></tr><tr><td>3</td><td>1</td></tr><tr><td>4</td><td>2</td></tr><tr><td>5</td><td>2</td></tr></tbody></table><p>展示效果：</p><table><thead><tr><th>id</th><th>Type</th></tr></thead><tbody><tr><td>1</td><td>Root</td></tr><tr><td>2</td><td>Inner</td></tr><tr><td>3</td><td>Leaf</td></tr><tr><td>4</td><td>Leaf</td></tr><tr><td>5</td><td>Leaf</td></tr></tbody></table><p>解释:</p><p>节点 1 是根节点，因为它的父节点是 NULL ，同时它有孩子节点 2 和 3 。</p><p>节点 2 是内部节点，因为它有父节点 1 ，也有孩子节点 4 和 5 。</p><p>节点 3, 4 和 5 都是叶子节点，因为它们都有父节点同时没有孩子节点。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists tree (id int, p_id int);</span><br><span class="line"></span><br><span class="line">insert into tree (id, p_id) values (1, null);</span><br><span class="line">insert into tree (id, p_id) values (2, 1);</span><br><span class="line">insert into tree (id, p_id) values (3, 1);</span><br><span class="line">insert into tree (id, p_id) values (4, 2);</span><br><span class="line">insert into tree (id, p_id) values (5, 2);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">方法一：</span><br><span class="line">SELECT</span><br><span class="line">    id, &#39;Root&#39; AS Type</span><br><span class="line">FROM</span><br><span class="line">    tree</span><br><span class="line">WHERE</span><br><span class="line">    p_id IS NULL</span><br><span class="line"></span><br><span class="line">UNION</span><br><span class="line"></span><br><span class="line">SELECT</span><br><span class="line">    id, &#39;Leaf&#39; AS Type</span><br><span class="line">FROM</span><br><span class="line">    tree</span><br><span class="line">WHERE</span><br><span class="line">    id NOT IN (SELECT DISTINCT</span><br><span class="line">            p_id</span><br><span class="line">        FROM</span><br><span class="line">            tree</span><br><span class="line">        WHERE</span><br><span class="line">            p_id IS NOT NULL)</span><br><span class="line">        AND p_id IS NOT NULL</span><br><span class="line"></span><br><span class="line">UNION</span><br><span class="line"></span><br><span class="line">SELECT</span><br><span class="line">    id, &#39;Inner&#39; AS Type</span><br><span class="line">FROM</span><br><span class="line">    tree</span><br><span class="line">WHERE</span><br><span class="line">    id IN (SELECT DISTINCT</span><br><span class="line">            p_id</span><br><span class="line">        FROM</span><br><span class="line">            tree</span><br><span class="line">        WHERE</span><br><span class="line">            p_id IS NOT NULL)</span><br><span class="line">        AND p_id IS NOT NULL</span><br><span class="line">ORDER BY id;</span><br><span class="line"></span><br><span class="line">方法二：</span><br><span class="line">SELECT</span><br><span class="line">      id AS &#96;Id&#96;,</span><br><span class="line">      CASE </span><br><span class="line">          WHEN tree.id &#x3D; (SELECT atree.id FROM tree atree WHERE atree.p_id IS NULL) THEN &#39;Root&#39;</span><br><span class="line">          WHEN tree.id IN (SELECT atree.p_id FROM tree atree) THEN &#39;Inner&#39;</span><br><span class="line">          ELSE &#39;Leaf&#39;</span><br><span class="line">      END AS Type</span><br><span class="line">FROM</span><br><span class="line">      tree</span><br><span class="line">ORDER BY &#96;Id&#96;;</span><br><span class="line"></span><br><span class="line">方法三：</span><br><span class="line">SELECT</span><br><span class="line">    atree.id,</span><br><span class="line">    IF(ISNULL(atree.p_id),&#39;Root&#39;, IF(atree.id IN (SELECT p_id FROM tree), &#39;Inner&#39;,&#39;Leaf&#39;)) Type</span><br><span class="line">FROM</span><br><span class="line">    tree atree</span><br><span class="line">ORDER BY atree.id;</span><br></pre></td></tr></table></figure></div><h2 id="31-判断是否是三角形"><a href="#31-判断是否是三角形" class="headerlink" title="31. 判断是否是三角形"></a>31. 判断是否是三角形</h2><p>需求：编写一个 SQL 查询，判断三条线段是否能形成一个三角形。</p><p>展示效果：</p><table><thead><tr><th>x</th><th>y</th><th>z</th><th>triangle</th></tr></thead><tbody><tr><td>13</td><td>15</td><td>15</td><td>No</td></tr><tr><td>10</td><td>20</td><td>15</td><td>Yes</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists triangle (x int, y int, z int);</span><br><span class="line"></span><br><span class="line">insert into triangle (x, y, z) values (13, 15, 30);</span><br><span class="line">insert into triangle (x, y, z) values (10, 20, 15);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">      x,</span><br><span class="line">      y,</span><br><span class="line">      z,</span><br><span class="line">      if((x + y &lt;&#x3D; z or x + z &lt;&#x3D; y or y + z &lt;&#x3D; x), &quot;No&quot;, &quot;Yes&quot;) as triangle</span><br><span class="line">from triangle;</span><br></pre></td></tr></table></figure></div><h2 id="32-平面上的最近距离"><a href="#32-平面上的最近距离" class="headerlink" title="32. 平面上的最近距离"></a>32. 平面上的最近距离</h2><p>需求：写一个查询语句找到两点之间的最近距离，保留 2 位小数。</p><p>展示效果：</p><table><thead><tr><th>shortest</th></tr></thead><tbody><tr><td>1.00</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE If Not Exists point_2d (x INT NOT NULL, y INT NOT NULL);</span><br><span class="line"></span><br><span class="line">insert into point_2d (x, y) values (-1, -1);</span><br><span class="line">insert into point_2d (x, y) values (0, 0);</span><br><span class="line">insert into point_2d (x, y) values (-1, -2);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#方法一：</span><br><span class="line">SELECT</span><br><span class="line">    ROUND(SQRT(MIN((POW(p1.x - p2.x, 2) + POW(p1.y - p2.y, 2)))), 2) AS shortest</span><br><span class="line">FROM</span><br><span class="line">    point_2d p1</span><br><span class="line">JOIN</span><br><span class="line">    point_2d p2 </span><br><span class="line">ON </span><br><span class="line">    p1.x !&#x3D; p2.x OR p1.y !&#x3D; p2.y;</span><br><span class="line"></span><br><span class="line">#方法二：</span><br><span class="line">SELECT</span><br><span class="line">    ROUND(SQRT(MIN((POW(p1.x - p2.x, 2) + POW(p1.y - p2.y, 2)))),2) AS shortest</span><br><span class="line">FROM</span><br><span class="line">    point_2d p1</span><br><span class="line">JOIN</span><br><span class="line">    point_2d p2 </span><br><span class="line">ON (p1.x &lt;&#x3D; p2.x AND p1.y &lt; p2.y) OR (p1.x &lt;&#x3D; p2.x AND p1.y &gt; p2.y) OR (p1.x &lt; p2.x AND p1.y &#x3D; p2.y);</span><br></pre></td></tr></table></figure></div><h2 id="33-直线上最近距离"><a href="#33-直线上最近距离" class="headerlink" title="33. 直线上最近距离"></a>33. 直线上最近距离</h2><p>需求：找到这些点中最近两个点之间的距离。</p><p>展示效果：</p><table><thead><tr><th>shortest</th></tr></thead><tbody><tr><td>1</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE If Not Exists point (x INT NOT NULL, UNIQUE INDEX x_UNIQUE (x ASC));</span><br><span class="line"></span><br><span class="line">insert into point (x) values (-1);</span><br><span class="line">insert into point (x) values (0);</span><br><span class="line">insert into point (x) values (2);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">    MIN(ABS(p1.x - p2.x)) AS shortest</span><br><span class="line">FROM</span><br><span class="line">    point p1</span><br><span class="line">JOIN</span><br><span class="line">    point p2 </span><br><span class="line">ON p1.x !&#x3D; p2.x;</span><br></pre></td></tr></table></figure></div><h2 id="34-二级关注者"><a href="#34-二级关注者" class="headerlink" title="34. 二级关注者"></a>34. 二级关注者</h2><p>需求：对每一个关注者(follower)，查询他的关注者数目。</p><p>展示效果：</p><table><thead><tr><th>follower</th><th>num</th></tr></thead><tbody><tr><td>B</td><td>2</td></tr><tr><td>D</td><td>1</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists follow (followee varchar(255), follower varchar(255));</span><br><span class="line"></span><br><span class="line">insert into follow (followee, follower) values (&#39;A&#39;, &#39;B&#39;);</span><br><span class="line">insert into follow (followee, follower) values (&#39;B&#39;, &#39;C&#39;);</span><br><span class="line">insert into follow (followee, follower) values (&#39;B&#39;, &#39;D&#39;);</span><br><span class="line">insert into follow (followee, follower) values (&#39;D&#39;, &#39;E&#39;);</span><br></pre></td></tr></table></figure></div><p>解释：</p><p>以A为主体，A为被关注者，B为被关注者，求出关注B的关注者。这里需要注意，被关注者永远不会被他 / 她自己关注。<br>将结果按照字典序返回。</p><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">      followee as &#39;follower&#39;,</span><br><span class="line">      count(distinct follower) as num</span><br><span class="line">from</span><br><span class="line">      follow</span><br><span class="line">where</span><br><span class="line">      followee in(select follower from follow)</span><br><span class="line">group by </span><br><span class="line">      1</span><br><span class="line">order by</span><br><span class="line">      1;</span><br></pre></td></tr></table></figure></div><h2 id="35-平均工资"><a href="#35-平均工资" class="headerlink" title="35. 平均工资"></a>35. 平均工资</h2><p>需求：写一个查询语句，求出在每一个工资发放日，每个部门的平均工资与公司的平均工资的比较结果 （高 / 低 / 相同）</p><p>展示效果：</p><table><thead><tr><th>pay_month</th><th>department_id</th><th>comparison</th></tr></thead><tbody><tr><td>2017-03</td><td>1</td><td>higher</td></tr><tr><td>2017-03</td><td>2</td><td>lower</td></tr><tr><td>2017-02</td><td>1</td><td>same</td></tr><tr><td>2017-02</td><td>2</td><td>same</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists salary (id int, employee_id int, amount int, pay_date date);</span><br><span class="line">Create table If Not Exists employee (employee_id int, department_id int);</span><br><span class="line"></span><br><span class="line">insert into salary (id, employee_id, amount, pay_date) values (1, 1, 9000, &#39;2017&#x2F;03&#x2F;31&#39;);</span><br><span class="line">insert into salary (id, employee_id, amount, pay_date) values (2, 2, 6000, &#39;2017&#x2F;03&#x2F;31&#39;);</span><br><span class="line">insert into salary (id, employee_id, amount, pay_date) values (3, 3, 10000, &#39;2017&#x2F;03&#x2F;31&#39;);</span><br><span class="line">insert into salary (id, employee_id, amount, pay_date) values (4, 1, 7000, &#39;2017&#x2F;02&#x2F;28&#39;);</span><br><span class="line">insert into salary (id, employee_id, amount, pay_date) values (5, 2, 6000, &#39;2017&#x2F;02&#x2F;28&#39;);</span><br><span class="line">insert into salary (id, employee_id, amount, pay_date) values (6, 3, 8000, &#39;2017&#x2F;02&#x2F;28&#39;);</span><br><span class="line"></span><br><span class="line">insert into employee (employee_id, department_id) values (1, 1);</span><br><span class="line">insert into employee (employee_id, department_id) values (2, 2);</span><br><span class="line">insert into employee (employee_id, department_id) values (3, 2);</span><br></pre></td></tr></table></figure></div><p>解释:</p><p>在三月，公司的平均工资是 (9000+6000+10000)/3 = 8333.33…</p><p>由于部门 1 里只有一个 employee_id 为 1 的员工，所以部门 1 的平均工资就是此人的工资 9000 。因为 9000 &gt; 8333.33 ，所以比较结果是 ‘higher’。</p><p>第二个部门的平均工资为 employee_id 为 2 和 3 两个人的平均工资，为 (6000+10000)/2=8000 。因为 8000 &lt; 8333.33 ，所以比较结果是 ‘lower’ 。</p><p> 在二月用同样的公式求平均工资并比较，比较结果为 ‘same’ ，因为部门 1 和部门 2 的平均工资与公司的平均工资相同，都是 7000 。</p><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">      department_salary.pay_month,</span><br><span class="line">      department_id,</span><br><span class="line">      case</span><br><span class="line">          when department_avg&gt;company_avg then &#39;higher&#39;</span><br><span class="line">          when department_avg&lt;company_avg then &#39;lower&#39;</span><br><span class="line">          else &#39;same&#39;</span><br><span class="line">      end as comparison</span><br><span class="line">from</span><br><span class="line">     (select</span><br><span class="line">            department_id,</span><br><span class="line">            avg(amount) as department_avg,</span><br><span class="line">            date_format(pay_date, &#39;%Y-%m&#39;) as pay_month</span><br><span class="line">      from </span><br><span class="line">            salary </span><br><span class="line">      join</span><br><span class="line">            employee</span><br><span class="line">      on  </span><br><span class="line">            salary.employee_id &#x3D; employee.employee_id</span><br><span class="line">     group by</span><br><span class="line">            department_id, pay_month</span><br><span class="line">     ) as department_salary</span><br><span class="line">join</span><br><span class="line">    (select</span><br><span class="line">           avg(amount) as company_avg,</span><br><span class="line">           date_format(pay_date, &#39;%Y-%m&#39;) as pay_month </span><br><span class="line">     from </span><br><span class="line">           salary</span><br><span class="line">     group by</span><br><span class="line">           date_format(pay_date, &#39;%Y-%m&#39;)</span><br><span class="line">     ) as company_salary</span><br><span class="line">on </span><br><span class="line">     department_salary.pay_month &#x3D; company_salary.pay_month;</span><br></pre></td></tr></table></figure></div><h2 id="36-学生地理信息报告"><a href="#36-学生地理信息报告" class="headerlink" title="36. 学生地理信息报告"></a>36. 学生地理信息报告</h2><p>需求：写一个查询语句实现对大洲（continent）列的 透视表 操作，使得每个学生按照姓名的字母顺序依次排列在对应的大洲下面。输出的标题应依次为美洲（America）、亚洲（Asia）和欧洲（Europe）。数据保证来自美洲的学生不少于来自亚洲或者欧洲的学生。</p><p>展示效果：</p><table><thead><tr><th>America</th><th>Asia</th><th>Europe</th></tr></thead><tbody><tr><td>Jack</td><td>Xi</td><td>Pascal</td></tr><tr><td>Jane</td><td></td><td></td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists student (name varchar(50), continent varchar(7));</span><br><span class="line"></span><br><span class="line">insert into student (name, continent) values (&#39;Jane&#39;, &#39;America&#39;);</span><br><span class="line">insert into student (name, continent) values (&#39;Pascal&#39;, &#39;Europe&#39;);</span><br><span class="line">insert into student (name, continent) values (&#39;Xi&#39;, &#39;Asia&#39;);</span><br><span class="line">insert into student (name, continent) values (&#39;Jack&#39;, &#39;America&#39;);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">      MAX(if(A.continent &#x3D; &#39;America&#39;,A.NAME,NULL)) AS &#96;America&#96;,</span><br><span class="line">      MAX(if(A.continent &#x3D; &#39;Asia&#39;,A.NAME,NULL)) AS &#96;Asia&#96;,</span><br><span class="line">      MAX(if(A.continent &#x3D; &#39;Europe&#39;,A.NAME,NULL)) AS &#96;Europe&#96;</span><br><span class="line">FROM</span><br><span class="line">     (SELECT </span><br><span class="line">             S1.continent,</span><br><span class="line">             S1.NAME,</span><br><span class="line">             S1.row_id,</span><br><span class="line">             COUNT(*) AS &#96;trank&#96;</span><br><span class="line">  FROM </span><br><span class="line">        (SELECT</span><br><span class="line">                    S.*,</span><br><span class="line">                    @row_id:&#x3D;(@row_id + 1) AS &#96;row_id&#96;</span><br><span class="line">     FROM</span><br><span class="line">                    student AS S,</span><br><span class="line">                    (SELECT @row_id:&#x3D;0) AS T</span><br><span class="line">             ) AS S1 </span><br><span class="line">  JOIN </span><br><span class="line">        (SELECT</span><br><span class="line">                    S.*,</span><br><span class="line">                    @n_row_id:&#x3D;(@n_row_id + 1) AS &#96;n_row_id&#96;</span><br><span class="line">     FROM </span><br><span class="line">                    student AS S,</span><br><span class="line">                    (SELECT @n_row_id:&#x3D;0) AS T</span><br><span class="line">         ) AS S2 </span><br><span class="line">  ON </span><br><span class="line">            (S1.continent &#x3D; S2.continent AND</span><br><span class="line">            (S1.NAME &gt; S2.NAME OR (S1.NAME &#x3D; S2.NAME AND S1.row_id &gt;&#x3D; S2.n_row_id)))</span><br><span class="line">  group BY</span><br><span class="line">             S1.continent,S1.NAME,S1.row_id</span><br><span class="line">  order BY</span><br><span class="line">             S1.continent,S1.NAME</span><br><span class="line">      ) AS A</span><br><span class="line">GROUP BY </span><br><span class="line">      A.trank;</span><br></pre></td></tr></table></figure></div><h2 id="37-只出现一次的最大数字"><a href="#37-只出现一次的最大数字" class="headerlink" title="37. 只出现一次的最大数字"></a>37. 只出现一次的最大数字</h2><p>需求：编写一个 SQL 查询，找到只出现过一次的数字中，最大的一个数字。如果没有只出现一次的数字，输出 null 。</p><p>展示效果：</p><table><thead><tr><th>num</th></tr></thead><tbody><tr><td>6</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists my_numbers (num int);</span><br><span class="line"></span><br><span class="line">insert into my_numbers (num) values (8);</span><br><span class="line">insert into my_numbers (num) values (8);</span><br><span class="line">insert into my_numbers (num) values (3);</span><br><span class="line">insert into my_numbers (num) values (3);</span><br><span class="line">insert into my_numbers (num) values (1);</span><br><span class="line">insert into my_numbers (num) values (4);</span><br><span class="line">insert into my_numbers (num) values (5);</span><br><span class="line">insert into my_numbers (num) values (6);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">      ifnull((SELECT </span><br><span class="line">                    num</span><br><span class="line">              FROM </span><br><span class="line">                    my_numbers</span><br><span class="line">              group by </span><br><span class="line">                    num</span><br><span class="line">              having</span><br><span class="line">                    count(*) &#x3D; 1</span><br><span class="line">              order by </span><br><span class="line">                    num desc</span><br><span class="line">              limit 1), null) as num;</span><br></pre></td></tr></table></figure></div><h2 id="38-有趣的电影"><a href="#38-有趣的电影" class="headerlink" title="38. 有趣的电影"></a>38. 有趣的电影</h2><p>需求：编写一个 SQL 查询，找出所有影片描述为非 boring (不无聊) 的并且 id 为奇数 的影片，结果请按等级 rating 排列</p><p>展示效果：</p><table><thead><tr><th>id</th><th>movie</th><th>description</th><th>rating</th></tr></thead><tbody><tr><td>5</td><td>House card</td><td>Interesting</td><td>9.1</td></tr><tr><td>1</td><td>War</td><td>great 3D</td><td>8.9</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists cinema (id int, movie varchar(255), description varchar(255), rating float(2, 1));</span><br><span class="line"></span><br><span class="line">insert into cinema (id, movie, description, rating) values (1, &#39;War&#39;, &#39;great 3D&#39;, 8.9);</span><br><span class="line">insert into cinema (id, movie, description, rating) values (2, &#39;Science&#39;, &#39;fiction&#39;, 8.5);</span><br><span class="line">insert into cinema (id, movie, description, rating) values (3, &#39;irish&#39;, &#39;boring&#39;, 6.2);</span><br><span class="line">insert into cinema (id, movie, description, rating) values (4, &#39;Ice song&#39;, &#39;Fantacy&#39;, 8.6);</span><br><span class="line">insert into cinema (id, movie, description, rating) values (5, &#39;House card&#39;, &#39;Interesting&#39;, 9.1);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">      id,</span><br><span class="line">      movie,</span><br><span class="line">      description,</span><br><span class="line">      rating</span><br><span class="line">from </span><br><span class="line">      cinema</span><br><span class="line">where </span><br><span class="line">      mod(id, 2) &#x3D; 1 and description !&#x3D; &#39;boring&#39;</span><br><span class="line">order by </span><br><span class="line">      rating DESC;</span><br></pre></td></tr></table></figure></div><h2 id="39-换座位"><a href="#39-换座位" class="headerlink" title="39. 换座位"></a>39. 换座位</h2><p>需求：编写一个 SQL 查询，小美是一所中学的信息科技老师，她有一张 seat 座位表，平时用来储存学生名字和与他们相对应的座位 id。</p><p>展示效果：</p><table><thead><tr><th>id</th><th>student</th></tr></thead><tbody><tr><td>1</td><td>Doris</td></tr><tr><td>2</td><td>Abbot</td></tr><tr><td>3</td><td>Green</td></tr><tr><td>4</td><td>Emerson</td></tr><tr><td>5</td><td>Jeames</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists seat(id int, student varchar(255));</span><br><span class="line"></span><br><span class="line">insert into seat (id, student) values (1, &#39;Abbot&#39;);</span><br><span class="line">insert into seat (id, student) values (2, &#39;Doris&#39;);</span><br><span class="line">insert into seat (id, student) values (3, &#39;Emerson&#39;);</span><br><span class="line">insert into seat (id, student) values (4, &#39;Green&#39;);</span><br><span class="line">insert into seat (id, student) values (5, &#39;Jeames&#39;);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">#方法一</span><br><span class="line">select </span><br><span class="line">      a.id,</span><br><span class="line">      ifnull(b.student,a.student) as student </span><br><span class="line">from </span><br><span class="line">      seat as a </span><br><span class="line">left </span><br><span class="line">      join seat as b </span><br><span class="line">on </span><br><span class="line">      (a.id%2&#x3D;1 &amp;&amp; a.id&#x3D;b.id-1) || (a.id%2&#x3D;0 &amp;&amp; a.id&#x3D;b.id+1) </span><br><span class="line">order by </span><br><span class="line">      a.id;</span><br><span class="line"></span><br><span class="line">#方法二</span><br><span class="line">select </span><br><span class="line">      if(id%2&#x3D;0,id-1,if(id&#x3D;cnt,id,id+1)) as id,</span><br><span class="line">      student</span><br><span class="line">from </span><br><span class="line">      (select </span><br><span class="line">             count(*) as cnt</span><br><span class="line">       from </span><br><span class="line">             seat</span><br><span class="line">      )as a,</span><br><span class="line">      seat</span><br><span class="line">order by id;</span><br><span class="line"></span><br><span class="line">#方法三      </span><br><span class="line">select </span><br><span class="line">      b.id,</span><br><span class="line">      a.student</span><br><span class="line">from </span><br><span class="line">      seat as a,</span><br><span class="line">      seat as b,</span><br><span class="line">      (select</span><br><span class="line">             count(*) as cnt</span><br><span class="line">       from</span><br><span class="line">             seat</span><br><span class="line">      ) as c </span><br><span class="line">where </span><br><span class="line">      b.id&#x3D;1^(a.id-1)+1 || (c.cnt%2 &amp;&amp; b.id&#x3D;c.cnt &amp;&amp; a.id&#x3D;c.cnt);</span><br></pre></td></tr></table></figure></div><h2 id="40-交换工资"><a href="#40-交换工资" class="headerlink" title="40. 交换工资"></a>40. 交换工资</h2><p>需求：编写一个 SQL 查询，判断三条线段是否能形成一个三角形。</p><p>展示效果：</p><table><thead><tr><th>id</th><th>name</th><th>sex</th><th>salary</th></tr></thead><tbody><tr><td>1</td><td>A</td><td>f</td><td>2500</td></tr><tr><td>2</td><td>B</td><td>m</td><td>1500</td></tr><tr><td>3</td><td>C</td><td>f</td><td>5500</td></tr><tr><td>4</td><td>D</td><td>m</td><td>500</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table if not exists salary(id int, name varchar(100), sex char(1), salary int);</span><br><span class="line"></span><br><span class="line">insert into salary (id, name, sex, salary) values (1, &#39;A&#39;, &#39;m&#39;, 2500);</span><br><span class="line">insert into salary (id, name, sex, salary) values (2, &#39;B&#39;, &#39;f&#39;, 1500);</span><br><span class="line">insert into salary (id, name, sex, salary) values (3, &#39;C&#39;, &#39;m&#39;, 5500);</span><br><span class="line">insert into salary (id, name, sex, salary) values (4, &#39;D&#39;, &#39;f&#39;, 500);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">UPDATE salary</span><br><span class="line">SET</span><br><span class="line">    sex &#x3D; CASE sex</span><br><span class="line">               WHEN &#39;m&#39; THEN &#39;f&#39;</span><br><span class="line">               ELSE &#39;m&#39;</span><br><span class="line">          END;</span><br></pre></td></tr></table></figure></div><h2 id="41-买下所有产品的用户"><a href="#41-买下所有产品的用户" class="headerlink" title="41. 买下所有产品的用户"></a>41. 买下所有产品的用户</h2><p>需求：编写一个 SQL 查询，从 Customer 表中查询购买了 Product 表中所有产品的客户的 id。</p><p>展示效果：</p><table><thead><tr><th>customer_id</th></tr></thead><tbody><tr><td>1</td></tr><tr><td>3</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists Customer (customer_id int, product_key int)</span><br><span class="line">Create table Product (product_key int)</span><br><span class="line"></span><br><span class="line">insert into Customer (customer_id, product_key) values (1, 5)</span><br><span class="line">insert into Customer (customer_id, product_key) values (2, &#39;6&#39;)</span><br><span class="line">insert into Customer (customer_id, product_key) values (3, 5)</span><br><span class="line">insert into Customer (customer_id, product_key) values (3, &#39;6&#39;)</span><br><span class="line">insert into Customer (customer_id, product_key) values (1, &#39;6&#39;)</span><br><span class="line"></span><br><span class="line">insert into Product (product_key) values (5)</span><br><span class="line">insert into Product (product_key) values (&#39;6&#39;)</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">select customer_id</span><br><span class="line">from </span><br><span class="line">(select customer_id,count(distinct product_key) as num </span><br><span class="line"> from Customer</span><br><span class="line"> group by customer_id</span><br><span class="line">) t</span><br><span class="line">join (</span><br><span class="line">    select count(product_key) as num</span><br><span class="line">    from Product</span><br><span class="line">) m </span><br><span class="line">on t.num &#x3D; m.num;</span><br></pre></td></tr></table></figure></div><h2 id="42-合作过至少三次的演员和导演"><a href="#42-合作过至少三次的演员和导演" class="headerlink" title="42. 合作过至少三次的演员和导演"></a>42. 合作过至少三次的演员和导演</h2><p>需求：编写一个 SQL 查询，查询语句获取合作过至少三次的演员和导演的 id 对 (actor_id, director_id)</p><p>展示效果：</p><table><thead><tr><th>actor_id</th><th>director_id</th></tr></thead><tbody><tr><td>1</td><td>15</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists ActorDirector (actor_id int, director_id int, timestamp int);</span><br><span class="line"></span><br><span class="line">insert into ActorDirector (actor_id, director_id, timestamp) values (1, 1, 0);</span><br><span class="line">insert into ActorDirector (actor_id, director_id, timestamp) values (1, 1, 1);</span><br><span class="line">insert into ActorDirector (actor_id, director_id, timestamp) values (1, 1, 2);</span><br><span class="line">insert into ActorDirector (actor_id, director_id, timestamp) values (1, 2, 3);</span><br><span class="line">insert into ActorDirector (actor_id, director_id, timestamp) values (1, 2, 4);</span><br><span class="line">insert into ActorDirector (actor_id, director_id, timestamp) values (2, 1, 5);</span><br><span class="line">insert into ActorDirector (actor_id, director_id, timestamp) values (2, 1, 6);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">      actor_id as ACTOR_ID ,</span><br><span class="line">      director_id as DIRECTOR_ID</span><br><span class="line">from </span><br><span class="line">      ActorDirector </span><br><span class="line">group by </span><br><span class="line">      actor_id,director_id </span><br><span class="line">having </span><br><span class="line">      count(*)&gt;&#x3D;3;</span><br></pre></td></tr></table></figure></div><h2 id="43-产品销售分析"><a href="#43-产品销售分析" class="headerlink" title="43. 产品销售分析"></a>43. 产品销售分析</h2><p>需求一：获取产品表 <code>Product</code> 中所有的 <strong>产品名称 product name</strong> 以及 该产品在 <code>Sales</code> 表中相对应的 <strong>上市年份 year</strong> 和 <strong>价格 price</strong>。</p><p>展示效果：</p><table><thead><tr><th>product_name</th><th>year</th><th>price</th></tr></thead><tbody><tr><td>Nokia</td><td>2008</td><td>5000</td></tr><tr><td>Nokia</td><td>2009</td><td>5000</td></tr><tr><td>Apple</td><td>2011</td><td>9000</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Create table Sales (sale_id int, product_id int, year int, quantity int, price int);</span><br><span class="line">Create table Product (product_id int, product_name varchar(10));</span><br><span class="line"></span><br><span class="line">insert into Sales (sale_id, product_id, year, quantity, price) values (1, 100, 2008, 10, 5000);</span><br><span class="line">insert into Sales (sale_id, product_id, year, quantity, price) values (2, 100, 2009, 12, 5000);</span><br><span class="line">insert into Sales (sale_id, product_id, year, quantity, price) values (7, 200, 2011, 15, 9000);</span><br><span class="line"></span><br><span class="line">insert into Product (product_id, product_name) values (100, &#39;Nokia&#39;);</span><br><span class="line">insert into Product (product_id, product_name) values (200, &#39;Apple&#39;);</span><br><span class="line">insert into Product (product_id, product_name) values (300, &#39;Samsung&#39;);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">      product_name,</span><br><span class="line">      year,</span><br><span class="line">      price</span><br><span class="line">from </span><br><span class="line">      Sales </span><br><span class="line">inner join </span><br><span class="line">      Product</span><br><span class="line">on</span><br><span class="line">      Sales.product_id &#x3D; Product.product_id;</span><br></pre></td></tr></table></figure></div><p>需求二：按产品 id product_id 来统计每个产品的销售总量。</p><p>展示效果：</p><table><thead><tr><th>product_id</th><th>total_quantity</th></tr></thead><tbody><tr><td>100</td><td>22</td></tr><tr><td>200</td><td>15</td></tr></tbody></table><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">    product_id, </span><br><span class="line">    SUM(quantity) as total_quantity</span><br><span class="line">FROM</span><br><span class="line">    Sales</span><br><span class="line">GROUP BY</span><br><span class="line">    product_id;</span><br></pre></td></tr></table></figure></div><p>需求三：选出每个销售产品的 第一年 的 产品 id、年份、数量 和 价格。</p><p>展示效果：</p><table><thead><tr><th>product_id</th><th>first_year</th><th>quantity</th><th>price</th></tr></thead><tbody><tr><td>100</td><td>2008</td><td>10</td><td>5000</td></tr><tr><td>200</td><td>2011</td><td>15</td><td>9000</td></tr></tbody></table><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">      product_id,</span><br><span class="line">      year as first_year, </span><br><span class="line">      quantity,</span><br><span class="line">      price</span><br><span class="line">from </span><br><span class="line">      Sales</span><br><span class="line">where </span><br><span class="line">     (product_id , year) in(</span><br><span class="line">                            select</span><br><span class="line">                                  product_id ,</span><br><span class="line">                                  min(year)</span><br><span class="line">                            from</span><br><span class="line">                                  Sales</span><br><span class="line">                            group by </span><br><span class="line">                                  product_id</span><br><span class="line">                            );</span><br></pre></td></tr></table></figure></div><h2 id="44-项目员工"><a href="#44-项目员工" class="headerlink" title="44. 项目员工"></a>44. 项目员工</h2><p>需求一：查询每一个项目中员工的平均工作年限，精确到小数点后两位。</p><p>展示效果：</p><table><thead><tr><th>project_id</th><th>average_years</th></tr></thead><tbody><tr><td>1</td><td>2.00</td></tr><tr><td>2</td><td>2.50</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists Project (project_id int, employee_id int);</span><br><span class="line">Create table If Not Exists Employee (employee_id int, name varchar(10), experience_years int);</span><br><span class="line"></span><br><span class="line">insert into Project (project_id, employee_id) values (1, 1);</span><br><span class="line">insert into Project (project_id, employee_id) values (1, 2);</span><br><span class="line">insert into Project (project_id, employee_id) values (1, 3);</span><br><span class="line">insert into Project (project_id, employee_id) values (2, 1);</span><br><span class="line">insert into Project (project_id, employee_id) values (2, 4);</span><br><span class="line"></span><br><span class="line">insert into Employee (employee_id, name, experience_years) values (1, &#39;Khaled&#39;, 3);</span><br><span class="line">insert into Employee (employee_id, name, experience_years) values (2, &#39;Ali&#39;, 2);</span><br><span class="line">insert into Employee (employee_id, name, experience_years) values (3, &#39;John&#39;, 1);</span><br><span class="line">insert into Employee (employee_id, name, experience_years) values (4, &#39;Doe&#39;, 2);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">      project_id ,</span><br><span class="line">      round(avg(experience_years),2) as average_years</span><br><span class="line">from </span><br><span class="line">      Project</span><br><span class="line">left join </span><br><span class="line">      Employee</span><br><span class="line">on </span><br><span class="line">      Project.employee_id &#x3D; Employee.employee_id</span><br><span class="line">group by </span><br><span class="line">      project_id</span><br><span class="line">order by</span><br><span class="line">      project_id;</span><br></pre></td></tr></table></figure></div><p>需求二：报告所有雇员最多的项目。</p><p>展示效果：</p><table><thead><tr><th>project_id</th></tr></thead><tbody><tr><td>1</td></tr></tbody></table><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">      project_id</span><br><span class="line">FROM </span><br><span class="line">      Project</span><br><span class="line">GROUP BY </span><br><span class="line">      project_id</span><br><span class="line">HAVING </span><br><span class="line">      COUNT(employee_id) &#x3D; (SELECT</span><br><span class="line">                                  MAX(count_employee_id)</span><br><span class="line">                            FROM</span><br><span class="line">                                (SELECT </span><br><span class="line">                                       project_id,</span><br><span class="line">                                       COUNT(employee_id) AS count_employee_id</span><br><span class="line">                                 FROM</span><br><span class="line">                                       Project</span><br><span class="line">                                 GROUP BY </span><br><span class="line">                                       project_id</span><br><span class="line">                                ) As temp</span><br><span class="line">                           );</span><br></pre></td></tr></table></figure></div><p>需求三：报告在每一个项目中经验最丰富的雇员是谁。如果出现经验年数相同的情况，请报告所有具有最大经验年数的员工。</p><p>展示效果：</p><table><thead><tr><th>project_id</th><th>employee_id</th></tr></thead><tbody><tr><td>1</td><td>1</td></tr><tr><td>1</td><td>3</td></tr><tr><td>2</td><td>1</td></tr></tbody></table><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">      p.project_id,</span><br><span class="line">      p.employee_id</span><br><span class="line">from </span><br><span class="line">      Project p</span><br><span class="line">join </span><br><span class="line">      Employee e</span><br><span class="line">on </span><br><span class="line">      p.employee_id &#x3D; e.employee_id</span><br><span class="line">where </span><br><span class="line">     (p.project_id, e.experience_years) in (select</span><br><span class="line">                                                  p.project_id,</span><br><span class="line">                                                  max(e.experience_years)</span><br><span class="line">                                            from</span><br><span class="line">                                                  project p </span><br><span class="line">                                            join</span><br><span class="line">                                                  employee e</span><br><span class="line">                                            on </span><br><span class="line">                                                  p.employee_id &#x3D; e.employee_id</span><br><span class="line">                                            group by</span><br><span class="line">                                                  p.project_id</span><br><span class="line">                                           );</span><br></pre></td></tr></table></figure></div><h2 id="45-销售分析"><a href="#45-销售分析" class="headerlink" title="45. 销售分析"></a>45. 销售分析</h2><p>需求一：编写一个 SQL 查询，查询总销售额最高的销售者，如果有并列的，就都展示出来。</p><p>展示效果：</p><table><thead><tr><th>seller_id</th></tr></thead><tbody><tr><td>1</td></tr><tr><td>3</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists Product (product_id int, product_name varchar(10), unit_price int);</span><br><span class="line">Create table If Not Exists Sales (seller_id int, product_id int,buyer_id int, sale_date date, quantity int, price int);</span><br><span class="line"></span><br><span class="line">insert into Product (product_id, product_name, unit_price) values (1, &#39;S8&#39;, 1000);</span><br><span class="line">insert into Product (product_id, product_name, unit_price) values (2, &#39;G4&#39;, 800);</span><br><span class="line">insert into Product (product_id, product_name, unit_price) values (3, &#39;iPhone&#39;, 1400);</span><br><span class="line"></span><br><span class="line">insert into Sales (seller_id, product_id, buyer_id, sale_date, quantity, price) values (1, 1, 1,&#39;2019-01-21&#39;, 2, 2000);</span><br><span class="line">insert into Sales (seller_id, product_id, buyer_id, sale_date, quantity, price) values (1, 2, 2,&#39;2019-02-17&#39;, 1, 800);</span><br><span class="line">insert into Sales (seller_id, product_id, buyer_id, sale_date, quantity, price) values (2, 1, 3,&#39;2019-06-02&#39;, 1, 800);</span><br><span class="line">insert into Sales (seller_id, product_id, buyer_id, sale_date, quantity, price) values (3, 3, 3,&#39;2019-05-13&#39;, 2, 2800);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">      seller_id </span><br><span class="line">from </span><br><span class="line">      Sales</span><br><span class="line">group by </span><br><span class="line">      seller_id</span><br><span class="line">having </span><br><span class="line">      sum(price) &#x3D; (select</span><br><span class="line">                          sum(price) as ye_ji</span><br><span class="line">                    from  </span><br><span class="line">                          Sales</span><br><span class="line">                    group by</span><br><span class="line">                          seller_id</span><br><span class="line">                    order by </span><br><span class="line">                          ye_ji desc</span><br><span class="line">                    limit 1</span><br><span class="line">                   );</span><br></pre></td></tr></table></figure></div><p>需求二：编写一个 SQL 查询，查询购买了 S8 手机却没有购买 iPhone 的买家。注意这里 S8 和 iPhone 是 Product 表中的产品。</p><p>展示效果：</p><table><thead><tr><th>buyer_id</th></tr></thead><tbody><tr><td>1</td></tr></tbody></table><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">#方法一</span><br><span class="line">select </span><br><span class="line">      distinct buyer_id</span><br><span class="line">from </span><br><span class="line">      product p </span><br><span class="line">inner join </span><br><span class="line">      sales s</span><br><span class="line">on </span><br><span class="line">      p.product_id&#x3D;s.product_id</span><br><span class="line">where </span><br><span class="line">      product_name&#x3D;&#39;S8&#39; and buyer_id not in (select</span><br><span class="line">                                                    buyer_id</span><br><span class="line">                                              from</span><br><span class="line">                                                    product p</span><br><span class="line">                                              inner join</span><br><span class="line">                                                    sales s</span><br><span class="line">                                              on</span><br><span class="line">                                                    p.product_id&#x3D;s.product_id</span><br><span class="line">                                              where</span><br><span class="line">                                                    product_name&#x3D;&#39;iPhone&#39;</span><br><span class="line">                                              );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#方法二</span><br><span class="line">select </span><br><span class="line">      s8 as buyer_id</span><br><span class="line">from </span><br><span class="line">      (select </span><br><span class="line">             distinct buyer_id s8</span><br><span class="line">       from</span><br><span class="line">             product p </span><br><span class="line">       inner join </span><br><span class="line">             sales s</span><br><span class="line">       on</span><br><span class="line">             p.product_id&#x3D;s.product_id</span><br><span class="line">       where</span><br><span class="line">             product_name&#x3D;&#39;S8&#39;) t1</span><br><span class="line">left join</span><br><span class="line">      (select</span><br><span class="line">             distinct buyer_id ip</span><br><span class="line">       from</span><br><span class="line">             product p</span><br><span class="line">       inner join </span><br><span class="line">             sales s</span><br><span class="line">       on</span><br><span class="line">             p.product_id&#x3D;s.product_id</span><br><span class="line">       where</span><br><span class="line">             product_name&#x3D;&#39;iPhone&#39;</span><br><span class="line">      ) t2</span><br><span class="line">on </span><br><span class="line">       s8&#x3D;ip</span><br><span class="line">where </span><br><span class="line">       ip is null;</span><br></pre></td></tr></table></figure></div><p>需求三：编写一个 SQL 查询，报告2019年春季才售出的产品。即在2019-01-01至2019-03-31（含）之间。</p><p>展示效果：</p><table><thead><tr><th>product_id</th><th>product_name</th></tr></thead><tbody><tr><td>1</td><td>S8</td></tr><tr><td>2</td><td>G4</td></tr></tbody></table><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">      s.product_id,</span><br><span class="line">      product_name</span><br><span class="line">FROM </span><br><span class="line">      Sales s</span><br><span class="line">JOIN </span><br><span class="line">      Product p</span><br><span class="line">ON </span><br><span class="line">      s.product_id &#x3D; p.product_id</span><br><span class="line">GROUP BY </span><br><span class="line">      s.product_id</span><br><span class="line">HAVING </span><br><span class="line">      sale_date &gt;&#x3D; &#39;2019-01-01&#39; AND </span><br><span class="line">      sale_date &lt;&#x3D; &#39;2019-03-31&#39;;</span><br></pre></td></tr></table></figure></div><h2 id="46-小众书籍"><a href="#46-小众书籍" class="headerlink" title="46. 小众书籍"></a>46. 小众书籍</h2><p>需求：筛选出订单总量 少于10本 的 书籍 。</p><p>展示效果：</p><table><thead><tr><th>book_id</th><th>name</th></tr></thead><tbody><tr><td>1</td><td>“Kalila And Demna”</td></tr><tr><td>2</td><td>“28 Letters”</td></tr><tr><td>5</td><td>“The Hunger Games”</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists Books (book_id int, name varchar(50), available_from date);</span><br><span class="line">Create table If Not Exists Orders (order_id int, book_id int, quantity int, dispatch_date date);</span><br><span class="line"></span><br><span class="line">insert into Books (book_id, name, available_from) values (1, &#39;Kalila And Demna&#39;, &#39;2010-01-01&#39;);</span><br><span class="line">insert into Books (book_id, name, available_from) values (2, &#39;28 Letters&#39;, &#39;2012-05-12&#39;);</span><br><span class="line">insert into Books (book_id, name, available_from) values (3, &#39;The Hobbit&#39;, &#39;2019-06-10&#39;);</span><br><span class="line">insert into Books (book_id, name, available_from) values (4, &#39;13 Reasons Why&#39;, &#39;2019-06-01&#39;);</span><br><span class="line">insert into Books (book_id, name, available_from) values (5, &#39;The Hunger Games&#39;, &#39;2008-09-21&#39;);</span><br><span class="line"></span><br><span class="line">insert into Orders (order_id, book_id, quantity, dispatch_date) values (1, 1, 2, &#39;2018-07-26&#39;);</span><br><span class="line">insert into Orders (order_id, book_id, quantity, dispatch_date) values (2, 1, 1, &#39;2018-11-05&#39;);</span><br><span class="line">insert into Orders (order_id, book_id, quantity, dispatch_date) values (3, 3, 8, &#39;2019-06-11&#39;);</span><br><span class="line">insert into Orders (order_id, book_id, quantity, dispatch_date) values (4, 4, 6, &#39;2019-06-05&#39;);</span><br><span class="line">insert into Orders (order_id, book_id, quantity, dispatch_date) values (5, 4, 5, &#39;2019-06-20&#39;);</span><br><span class="line">insert into Orders (order_id, book_id, quantity, dispatch_date) values (6, 5, 9, &#39;2009-02-02&#39;);</span><br><span class="line">insert into Orders (order_id, book_id, quantity, dispatch_date) values (7, 5, 8, &#39;2010-04-13&#39;);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">      t1.book_id,</span><br><span class="line">      t1.name</span><br><span class="line">from </span><br><span class="line">      (select * from books where available_from &lt;date_sub(&#39;2019-06-23&#39;,interval 1 Month)) t1 </span><br><span class="line">left join </span><br><span class="line">      (select </span><br><span class="line">             *,</span><br><span class="line">             case</span><br><span class="line">                  when dispatch_date between &#39;2018-06-23&#39; and &#39;2019-06-23&#39; then quantity</span><br><span class="line">                  else 0 </span><br><span class="line">              end num </span><br><span class="line">       from orders</span><br><span class="line">      )  t2 </span><br><span class="line">on </span><br><span class="line">     t1.book_id&#x3D;t2.book_id </span><br><span class="line">group by </span><br><span class="line">     t1.book_id </span><br><span class="line">having </span><br><span class="line">     sum(if(t2.num is null,0,t2.num))&lt;10;</span><br></pre></td></tr></table></figure></div><h2 id="47-每日新用户统计"><a href="#47-每日新用户统计" class="headerlink" title="47. 每日新用户统计"></a>47. 每日新用户统计</h2><p>需求一：查询每一个项目中员工的平均工作年限，精确到小数点后两位。</p><p>展示效果：</p><table><thead><tr><th>login_date</th><th>user_count</th></tr></thead><tbody><tr><td>2019-05-01</td><td>1</td></tr><tr><td>2019-06-21</td><td>2</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists Traffic (user_id int, activity ENUM(&#39;login&#39;, &#39;logout&#39;, &#39;jobs&#39;, &#39;groups&#39;, &#39;homepage&#39;), activity_date date);</span><br><span class="line"></span><br><span class="line">insert into Traffic (user_id, activity, activity_date) values (1, &#39;login&#39;, &#39;2019-05-01&#39;);</span><br><span class="line">insert into Traffic (user_id, activity, activity_date) values (1, &#39;homepage&#39;, &#39;2019-05-01&#39;);</span><br><span class="line">insert into Traffic (user_id, activity, activity_date) values (1, &#39;logout&#39;, &#39;2019-05-01&#39;);</span><br><span class="line">insert into Traffic (user_id, activity, activity_date) values (2, &#39;login&#39;, &#39;2019-06-21&#39;);</span><br><span class="line">insert into Traffic (user_id, activity, activity_date) values (2, &#39;logout&#39;, &#39;2019-06-21&#39;);</span><br><span class="line">insert into Traffic (user_id, activity, activity_date) values (3, &#39;login&#39;, &#39;2019-01-01&#39;);</span><br><span class="line">insert into Traffic (user_id, activity, activity_date) values (3, &#39;jobs&#39;, &#39;2019-01-01&#39;);</span><br><span class="line">insert into Traffic (user_id, activity, activity_date) values (3, &#39;logout&#39;, &#39;2019-01-01&#39;);</span><br><span class="line">insert into Traffic (user_id, activity, activity_date) values (4, &#39;login&#39;, &#39;2019-06-21&#39;);</span><br><span class="line">insert into Traffic (user_id, activity, activity_date) values (4, &#39;groups&#39;, &#39;2019-06-21&#39;);</span><br><span class="line">insert into Traffic (user_id, activity, activity_date) values (4, &#39;logout&#39;, &#39;2019-06-21&#39;);</span><br><span class="line">insert into Traffic (user_id, activity, activity_date) values (5, &#39;login&#39;, &#39;2019-03-01&#39;);</span><br><span class="line">insert into Traffic (user_id, activity, activity_date) values (5, &#39;logout&#39;, &#39;2019-03-01&#39;);</span><br><span class="line">insert into Traffic (user_id, activity, activity_date) values (5, &#39;login&#39;, &#39;2019-06-21&#39;);</span><br><span class="line">insert into Traffic (user_id, activity, activity_date) values (5, &#39;logout&#39;, &#39;2019-06-21&#39;);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">    minx as login_date,</span><br><span class="line">    count(user_id) as user_count</span><br><span class="line">from </span><br><span class="line">   (select </span><br><span class="line">          user_id,</span><br><span class="line">          min(activity_date) as minx</span><br><span class="line">    from </span><br><span class="line">          Traffic</span><br><span class="line">    where</span><br><span class="line">          activity&#x3D;&#39;login&#39;</span><br><span class="line">    group by </span><br><span class="line">          user_id</span><br><span class="line">    having </span><br><span class="line">          datediff(&#39;2019-06-30&#39;,minx)&lt;&#x3D;90</span><br><span class="line">    )s</span><br><span class="line">group by </span><br><span class="line">    minx;</span><br></pre></td></tr></table></figure></div><h2 id="48-每位学生的最高成绩"><a href="#48-每位学生的最高成绩" class="headerlink" title="48. 每位学生的最高成绩"></a>48. 每位学生的最高成绩</h2><p>需求一：查询每一个项目中员工的平均工作年限，精确到小数点后两位。</p><p>展示效果：</p><table><thead><tr><th>student_id</th><th>average_years</th><th>grade</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>99</td></tr><tr><td>2</td><td>2</td><td>95</td></tr><tr><td>3</td><td>3</td><td>82</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists Enrollments (student_id int, course_id int, grade int);</span><br><span class="line"></span><br><span class="line">insert into Enrollments (student_id, course_id, grade) values (2, 2, 95);</span><br><span class="line">insert into Enrollments (student_id, course_id, grade) values (2, 3, 95);</span><br><span class="line">insert into Enrollments (student_id, course_id, grade) values (1, 1, 90);</span><br><span class="line">insert into Enrollments (student_id, course_id, grade) values (1, 2, 99);</span><br><span class="line">insert into Enrollments (student_id, course_id, grade) values (3, 1, 80);</span><br><span class="line">insert into Enrollments (student_id, course_id, grade) values (3, 2, 75);</span><br><span class="line">insert into Enrollments (student_id, course_id, grade) values (3, 3, 82);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">      t.student_id,</span><br><span class="line">      if(count(e.grade) &gt; 1 ,min(e.course_id),course_id) as course_id,</span><br><span class="line">      t.max1 as grade</span><br><span class="line">from </span><br><span class="line">      Enrollments e </span><br><span class="line">right join</span><br><span class="line">     (select</span><br><span class="line">            student_id,</span><br><span class="line">            max(grade) as max1 </span><br><span class="line">      from </span><br><span class="line">            Enrollments</span><br><span class="line">      group by</span><br><span class="line">            student_id </span><br><span class="line">     )t</span><br><span class="line">on</span><br><span class="line">      t.student_id&#x3D;e.student_id and</span><br><span class="line">      t.max1 &#x3D; e.grade</span><br><span class="line">group by </span><br><span class="line">      e.student_id </span><br><span class="line">order by</span><br><span class="line">      t.student_id;</span><br></pre></td></tr></table></figure></div><h2 id="49-Reported-Posts"><a href="#49-Reported-Posts" class="headerlink" title="49. Reported Posts"></a>49. Reported Posts</h2><p>需求一：Write an SQL query that reports the number of posts reported yesterday for each report reason. Assume today is 2019-07-05.</p><p>展示效果：</p><table><thead><tr><th>report_reason</th><th>report_count</th></tr></thead><tbody><tr><td>spam</td><td>1</td></tr><tr><td>racism</td><td>2</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists Actions (user_id int, post_id int, action_date date, action ENUM(&#39;view&#39;, &#39;like&#39;, &#39;reaction&#39;, &#39;comment&#39;, &#39;report&#39;, &#39;share&#39;), extra varchar(10));</span><br><span class="line"></span><br><span class="line">insert into Actions (user_id, post_id, action_date, action, extra) values (1, 1, &#39;2019-07-01&#39;, &#39;view&#39;, null);</span><br><span class="line">insert into Actions (user_id, post_id, action_date, action, extra) values (1, 1, &#39;2019-07-01&#39;, &#39;like&#39;, null);</span><br><span class="line">insert into Actions (user_id, post_id, action_date, action, extra) values (1, 1, &#39;2019-07-01&#39;, &#39;share&#39;, null);</span><br><span class="line">insert into Actions (user_id, post_id, action_date, action, extra) values (2, 4, &#39;2019-07-04&#39;, &#39;view&#39;, null);</span><br><span class="line">insert into Actions (user_id, post_id, action_date, action, extra) values (2, 4, &#39;2019-07-04&#39;, &#39;report&#39;, &#39;spam&#39;);</span><br><span class="line">insert into Actions (user_id, post_id, action_date, action, extra) values (3, 4, &#39;2019-07-04&#39;, &#39;view&#39;, null);</span><br><span class="line">insert into Actions (user_id, post_id, action_date, action, extra) values (3, 4, &#39;2019-07-04&#39;, &#39;report&#39;, &#39;spam&#39;);</span><br><span class="line">insert into Actions (user_id, post_id, action_date, action, extra) values (4, 3, &#39;2019-07-02&#39;, &#39;view&#39;, null);</span><br><span class="line">insert into Actions (user_id, post_id, action_date, action, extra) values (4, 3, &#39;2019-07-02&#39;, &#39;report&#39;, &#39;spam&#39;);</span><br><span class="line">insert into Actions (user_id, post_id, action_date, action, extra) values (5, 2, &#39;2019-07-04&#39;, &#39;view&#39;, null);</span><br><span class="line">insert into Actions (user_id, post_id, action_date, action, extra) values (5, 2, &#39;2019-07-04&#39;, &#39;report&#39;, &#39;racism&#39;);</span><br><span class="line">insert into Actions (user_id, post_id, action_date, action, extra) values (5, 5, &#39;2019-07-04&#39;, &#39;view&#39;, null);</span><br><span class="line">insert into Actions (user_id, post_id, action_date, action, extra) values (5, 5, &#39;2019-07-04&#39;, &#39;report&#39;, &#39;racism&#39;);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">      extra report_reason,</span><br><span class="line">      count(distinct post_id) report_count </span><br><span class="line">from </span><br><span class="line">      Actions </span><br><span class="line">where </span><br><span class="line">      datediff(&#39;2019-07-05&#39;, action_date) &#x3D; 1 and</span><br><span class="line">      extra is not null and</span><br><span class="line">      action &#x3D; &#39;report&#39; </span><br><span class="line">group by</span><br><span class="line">      extra;</span><br></pre></td></tr></table></figure></div><p>需求二：Write an SQL query to find the average for daily percentage of posts that got removed after being reported as spam, rounded to 2 decimal places.</p><p>展示效果：</p><table><thead><tr><th>average_daily_percent</th></tr></thead><tbody><tr><td>50.00</td></tr></tbody></table><p>The percentage for 2019-07-04 is 50% because only one post of two spam reported posts was removed.<br>The percentage for 2019-07-02 is 100% because one post was reported as spam and it was removed.<br>The other days had no spam reports so the average is (50 + 100) / 2 = 75%<br>Note that the output is only one number and that we do not care about the remove dates.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table if not exists Removals (post_id int, remove_date date);</span><br><span class="line"></span><br><span class="line">insert into Removals (post_id, remove_date) values (2, &#39;2019-07-20&#39;);</span><br><span class="line">insert into Removals (post_id, remove_date) values (3, &#39;2019-07-18&#39;);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">      round(</span><br><span class="line">             SUM(delCount &#x2F; spamCount * 100) </span><br><span class="line">             &#x2F;</span><br><span class="line">             COUNT(DISTINCT action_date),</span><br><span class="line">          2) AS average_daily_percent</span><br><span class="line">FROM </span><br><span class="line">     (SELECT</span><br><span class="line">             action_date,</span><br><span class="line">             COUNT(distinct a.post_id) AS spamCount, </span><br><span class="line">             count(distinct b.post_id) AS delCount</span><br><span class="line">  FROM</span><br><span class="line">             Actions a</span><br><span class="line">      LEFT JOIN</span><br><span class="line">             Removals b </span><br><span class="line">      ON </span><br><span class="line">             a.post_id &#x3D; b.post_id</span><br><span class="line">      where</span><br><span class="line">             a.extra &#x3D; &#39;spam&#39;</span><br><span class="line">  GROUP BY </span><br><span class="line">             a.action_date</span><br><span class="line">     ) a;</span><br></pre></td></tr></table></figure></div><h2 id="50-Active-Businesses"><a href="#50-Active-Businesses" class="headerlink" title="50. Active Businesses"></a>50. Active Businesses</h2><p>需求：Write an SQL query to find all active businesses. An active business is a business that has more than one event type with occurences greater than the average occurences of that event type among all businesses.</p><p>展示效果：</p><table><thead><tr><th>business_id</th></tr></thead><tbody><tr><td>1</td></tr></tbody></table><p>Average for ‘reviews’, ‘ads’ and ‘page views’ are (7+3)/2=5, (11+7+6)/3=8, (3+12)/2=7.5 respectively.<br>Business with id 1 has 7 ‘reviews’ events (more than 5) and 11 ‘ads’ events (more than 8) so it is an active business.</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists Events (business_id int, event_type varchar(10), occurences int);</span><br><span class="line"></span><br><span class="line">insert into Events (business_id, event_type, occurences) values (1, &#39;reviews&#39;, 7);</span><br><span class="line">insert into Events (business_id, event_type, occurences) values (3, &#39;reviews&#39;, 3);</span><br><span class="line">insert into Events (business_id, event_type, occurences) values (1, &#39;ads&#39;, 11);</span><br><span class="line">insert into Events (business_id, event_type, occurences) values (2, &#39;ads&#39;, 7);</span><br><span class="line">insert into Events (business_id, event_type, occurences) values (3, &#39;ads&#39;, 6);</span><br><span class="line">insert into Events (business_id, event_type, occurences) values (1, &#39;page views&#39;, 3);</span><br><span class="line">insert into Events (business_id, event_type, occurences) values (2, &#39;page views&#39;, 12);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">      DISTINCT(business_id) </span><br><span class="line">FROM </span><br><span class="line">      Events e </span><br><span class="line">LEFT JOIN</span><br><span class="line">      Events tmp</span><br><span class="line">ON    </span><br><span class="line">      e.event_type &#x3D; tmp.event_type </span><br><span class="line">WHERE</span><br><span class="line">      e.occurences &gt; tmp.avg_count</span><br><span class="line">GROUP BY </span><br><span class="line">      business_id</span><br><span class="line">HAVING </span><br><span class="line">      COUNT(1) &gt; 1</span><br></pre></td></tr></table></figure></div><h2 id="51-User-Purchase-Platform"><a href="#51-User-Purchase-Platform" class="headerlink" title="51. User Purchase Platform"></a>51. User Purchase Platform</h2><p>需求一：Write an SQL query to find the total number of users and the total amount spent using mobile only, desktop only and both mobile and desktop together for each date.</p><p>展示效果：</p><table><thead><tr><th>spend_date</th><th>platform</th><th>total_amount</th><th>total_users</th></tr></thead><tbody><tr><td>2019-07-01</td><td>desktop</td><td>100</td><td>1</td></tr><tr><td>2019-07-01</td><td>mobile</td><td>100</td><td>1</td></tr><tr><td>2019-07-01</td><td>both</td><td>200</td><td>1</td></tr><tr><td>2019-07-02</td><td>desktop</td><td>100</td><td>1</td></tr><tr><td>2019-07-02</td><td>mobile</td><td>100</td><td>1</td></tr><tr><td>2019-07-02</td><td>both</td><td>0</td><td>0</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists Spending (user_id int, spend_date date, platform ENUM(&#39;desktop&#39;, &#39;mobile&#39;), amount int);</span><br><span class="line"></span><br><span class="line">insert into Spending (user_id, spend_date, platform, amount) values (1, &#39;2019-07-01&#39;, &#39;mobile&#39;, 100);</span><br><span class="line">insert into Spending (user_id, spend_date, platform, amount) values (1, &#39;2019-07-01&#39;, &#39;desktop&#39;, 100);</span><br><span class="line">insert into Spending (user_id, spend_date, platform, amount) values (2, &#39;2019-07-01&#39;, &#39;mobile&#39;, 100);</span><br><span class="line">insert into Spending (user_id, spend_date, platform, amount) values (2, &#39;2019-07-02&#39;, &#39;mobile&#39;, 100);</span><br><span class="line">insert into Spending (user_id, spend_date, platform, amount) values (3, &#39;2019-07-01&#39;, &#39;desktop&#39;, 100);</span><br><span class="line">insert into Spending (user_id, spend_date, platform, amount) values (3, &#39;2019-07-02&#39;, &#39;desktop&#39;, 100);</span><br></pre></td></tr></table></figure></div><p>On 2019-07-01, user 1 purchased using both desktop and mobile, user 2 purchased using mobile only and user 3 purchased using desktop only.<br>On 2019-07-02, user 2 purchased using mobile only, user 3 purchased using desktop only and no one purchased using both platforms.</p><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">      temp1.spend_date,</span><br><span class="line">      temp1.platform, </span><br><span class="line">      ifnull(temp3.total_amount, 0) total_amount, </span><br><span class="line">      ifnull(temp3.total_users,0) total_users</span><br><span class="line">from</span><br><span class="line">     (select</span><br><span class="line">            distinct(spend_date),</span><br><span class="line">            p.platform   </span><br><span class="line">      from </span><br><span class="line">            Spending,</span><br><span class="line">           (select</span><br><span class="line">                  &#39;desktop&#39; as platform union</span><br><span class="line">            select </span><br><span class="line">                  &#39;mobile&#39; as platform union</span><br><span class="line">            select</span><br><span class="line">                  &#39;both&#39; as platform</span><br><span class="line">           ) as p </span><br><span class="line">       ) as temp1</span><br><span class="line">left join </span><br><span class="line">      (select</span><br><span class="line">             spend_date,</span><br><span class="line">             platform,</span><br><span class="line">             sum(amount) as total_amount,</span><br><span class="line">             count(user_id) total_users</span><br><span class="line">       from</span><br><span class="line">            (select</span><br><span class="line">                   spend_date,</span><br><span class="line">                   user_id, </span><br><span class="line">                   case count(distinct platform)</span><br><span class="line">                        when 1 then platform</span><br><span class="line">                        when 2 then &#39;both&#39;</span><br><span class="line">                   end as  platform, </span><br><span class="line">                   sum(amount) as amount</span><br><span class="line">             from </span><br><span class="line">                   Spending</span><br><span class="line">             group by</span><br><span class="line">                   spend_date,</span><br><span class="line">                   user_id</span><br><span class="line">            ) as temp2</span><br><span class="line">      group by</span><br><span class="line">             spend_date,</span><br><span class="line">             platform</span><br><span class="line">      ) as  temp3</span><br><span class="line">on </span><br><span class="line">      temp1.platform &#x3D; temp3.platform and</span><br><span class="line">      temp1.spend_date &#x3D; temp3.spend_date;</span><br></pre></td></tr></table></figure></div><h2 id="52-User-Activity-for-the-Past-30-Days"><a href="#52-User-Activity-for-the-Past-30-Days" class="headerlink" title="52. User Activity for the Past 30 Days"></a>52. User Activity for the Past 30 Days</h2><p>需求一：Write an SQL query to find the average for daily percentage of posts that got removed after being reported as spam, rounded to 2 decimal places.</p><p>展示效果：</p><table><thead><tr><th>day</th><th>active_users</th></tr></thead><tbody><tr><td>2019-07-20</td><td>2</td></tr><tr><td>2019-07-21</td><td>2</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists Activity (user_id int, session_id int, activity_date date, activity_type ENUM(&#39;open_session&#39;, &#39;end_session&#39;, &#39;scroll_down&#39;, &#39;send_message&#39;));</span><br><span class="line"></span><br><span class="line">insert into Activity (user_id, session_id, activity_date, activity_type) values (1, 1, &#39;2019-07-20&#39;, &#39;open_session&#39;);</span><br><span class="line">insert into Activity (user_id, session_id, activity_date, activity_type) values (1, 1, &#39;2019-07-20&#39;, &#39;scroll_down&#39;);</span><br><span class="line">insert into Activity (user_id, session_id, activity_date, activity_type) values (1, 1, &#39;2019-07-20&#39;, &#39;end_session&#39;);</span><br><span class="line">insert into Activity (user_id, session_id, activity_date, activity_type) values (2, 4, &#39;2019-07-20&#39;, &#39;open_session&#39;);</span><br><span class="line">insert into Activity (user_id, session_id, activity_date, activity_type) values (2, 4, &#39;2019-07-21&#39;, &#39;send_message&#39;);</span><br><span class="line">insert into Activity (user_id, session_id, activity_date, activity_type) values (2, 4, &#39;2019-07-21&#39;, &#39;end_session&#39;);</span><br><span class="line">insert into Activity (user_id, session_id, activity_date, activity_type) values (3, 2, &#39;2019-07-21&#39;, &#39;open_session&#39;);</span><br><span class="line">insert into Activity (user_id, session_id, activity_date, activity_type) values (3, 2, &#39;2019-07-21&#39;, &#39;send_message&#39;);</span><br><span class="line">insert into Activity (user_id, session_id, activity_date, activity_type) values (3, 2, &#39;2019-07-21&#39;, &#39;end_session&#39;);</span><br><span class="line">insert into Activity (user_id, session_id, activity_date, activity_type) values (4, 3, &#39;2019-06-25&#39;, &#39;open_session&#39;);</span><br><span class="line">insert into Activity (user_id, session_id, activity_date, activity_type) values (4, 3, &#39;2019-06-25&#39;, &#39;end_session&#39;);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">      t.activity_date as day,</span><br><span class="line">      count(distinct t.user_id) as active_users</span><br><span class="line">from </span><br><span class="line">     (select </span><br><span class="line">            activity_date,</span><br><span class="line">            user_id</span><br><span class="line">      from</span><br><span class="line">            Activity</span><br><span class="line">      where </span><br><span class="line">            datediff(&#39;2019-07-27&#39;,activity_date) &lt;30 and</span><br><span class="line">            datediff( &#39;2019-07-27&#39;, activity_date) &gt;&#x3D;0</span><br><span class="line">      group by</span><br><span class="line">            user_id,</span><br><span class="line">            activity_date</span><br><span class="line">      having </span><br><span class="line">            count(activity_type)&gt;0</span><br><span class="line">     ) as t</span><br><span class="line">group by </span><br><span class="line">      t.activity_date;</span><br></pre></td></tr></table></figure></div><p>需求二：编写SQL查询以查找截至2019年7月27日（含）的30天内每个用户的平均会话数，四舍五入到小数点后两位。我们要为用户计算的会话是在该时间段内至少进行了一项活动的会话。</p><p>展示效果：</p><table><thead><tr><th>average_sessions_per_user</th></tr></thead><tbody><tr><td>1.00</td></tr></tbody></table><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">      ROUND(IFNULL(AVG(count_session_id), 0), 2) AS average_sessions_per_user</span><br><span class="line">FROM</span><br><span class="line">     (SELECT</span><br><span class="line">            COUNT(DISTINCT session_id) AS count_session_id</span><br><span class="line">      FROM</span><br><span class="line">            Activity</span><br><span class="line">      WHERE </span><br><span class="line">            activity_date BETWEEN DATE_SUB(&quot;2019-07-27&quot;, INTERVAL 29 DAY) AND &quot;2019-07-27&quot;</span><br><span class="line">      GROUP BY</span><br><span class="line">            user_id</span><br><span class="line">      ) AS temp;</span><br></pre></td></tr></table></figure></div><h2 id="52-文章浏览"><a href="#52-文章浏览" class="headerlink" title="52. 文章浏览"></a>52. 文章浏览</h2><p>需求一：查询每一个项目中员工的平均工作年限，精确到小数点后两位。</p><p>展示效果：</p><table><thead><tr><th>id</th></tr></thead><tbody><tr><td>4</td></tr><tr><td>7</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists Views (article_id int, author_id int, viewer_id int, view_date date);</span><br><span class="line">Truncate table Views;</span><br><span class="line">insert into Views (article_id, author_id, viewer_id, view_date) values (1, 3, 5, &#39;2019-08-01&#39;);</span><br><span class="line">insert into Views (article_id, author_id, viewer_id, view_date) values (3, 4, 5, &#39;2019-08-01&#39;);</span><br><span class="line">insert into Views (article_id, author_id, viewer_id, view_date) values (1, 3, &#39;6&#39;, &#39;2019-08-02&#39;);</span><br><span class="line">insert into Views (article_id, author_id, viewer_id, view_date) values (2, &#39;7&#39;, &#39;7&#39;, &#39;2019-08-01&#39;);</span><br><span class="line">insert into Views (article_id, author_id, viewer_id, view_date) values (2, &#39;7&#39;, &#39;6&#39;, &#39;2019-08-02&#39;);</span><br><span class="line">insert into Views (article_id, author_id, viewer_id, view_date) values (4, &#39;7&#39;, 1, &#39;2019-07-22&#39;);</span><br><span class="line">insert into Views (article_id, author_id, viewer_id, view_date) values (3, 4, 4, &#39;2019-07-21&#39;);</span><br><span class="line">insert into Views (article_id, author_id, viewer_id, view_date) values (3, 4, 4, &#39;2019-07-21&#39;);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">      distinct viewer_id as id</span><br><span class="line">from </span><br><span class="line">      Views </span><br><span class="line">where </span><br><span class="line">      viewer_id &#x3D; author_id</span><br><span class="line">order by </span><br><span class="line">      viewer_id;</span><br></pre></td></tr></table></figure></div><p>需求二：Write an SQL query to find all the people who viewed more than one article on the same date, sorted in ascending order by their id.</p><p>展示效果：</p><table><thead><tr><th>project_id</th></tr></thead><tbody><tr><td>5</td></tr><tr><td>6</td></tr></tbody></table><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">      DISTINCT viewer_id as id </span><br><span class="line">FROM </span><br><span class="line">      views</span><br><span class="line">GROUP BY </span><br><span class="line">      viewer_id,view_date</span><br><span class="line">HAVING</span><br><span class="line">      COUNT(DISTINCT article_id)&gt;&#x3D;2</span><br><span class="line">ORDER BY </span><br><span class="line">      viewer_id;</span><br></pre></td></tr></table></figure></div><h2 id="53-Market-Analysis"><a href="#53-Market-Analysis" class="headerlink" title="53. Market Analysis"></a>53. Market Analysis</h2><p>需求一：Write an SQL query to find for each user, the join date and the number of orders they made as a buyer in 2019.</p><p>展示效果：</p><table><thead><tr><th>buyer_id</th><th>join_date</th><th>orders_in_2019</th></tr></thead><tbody><tr><td>1</td><td>2018-01-01</td><td>1</td></tr><tr><td>2</td><td>2018-02-09</td><td>2</td></tr><tr><td>3</td><td>2018-01-19</td><td>0</td></tr><tr><td>4</td><td>2018-05-21</td><td>0</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists Users (user_id int, join_date date, favorite_brand varchar(10));</span><br><span class="line">create table if not exists Orders (order_id int, order_date date, item_id int, buyer_id int, seller_id int);</span><br><span class="line">create table if not exists Items (item_id int, item_brand varchar(10));</span><br><span class="line"></span><br><span class="line">insert into Users (user_id, join_date, favorite_brand) values (1, &#39;2018-01-01&#39;, &#39;Lenovo&#39;);</span><br><span class="line">insert into Users (user_id, join_date, favorite_brand) values (2, &#39;2018-02-09&#39;, &#39;Samsung&#39;);</span><br><span class="line">insert into Users (user_id, join_date, favorite_brand) values (3, &#39;2018-01-19&#39;, &#39;LG&#39;);</span><br><span class="line">insert into Users (user_id, join_date, favorite_brand) values (4, &#39;2018-05-21&#39;, &#39;HP&#39;);</span><br><span class="line"></span><br><span class="line">insert into Orders (order_id, order_date, item_id, buyer_id, seller_id) values (1, &#39;2019-08-01&#39;, 4, 1, 2);</span><br><span class="line">insert into Orders (order_id, order_date, item_id, buyer_id, seller_id) values (2, &#39;2018-08-02&#39;, 2, 1, 3);</span><br><span class="line">insert into Orders (order_id, order_date, item_id, buyer_id, seller_id) values (3, &#39;2019-08-03&#39;, 3, 2, 3);</span><br><span class="line">insert into Orders (order_id, order_date, item_id, buyer_id, seller_id) values (4, &#39;2018-08-04&#39;, 1, 4, 2);</span><br><span class="line">insert into Orders (order_id, order_date, item_id, buyer_id, seller_id) values (5, &#39;2018-08-04&#39;, 1, 3, 4);</span><br><span class="line">insert into Orders (order_id, order_date, item_id, buyer_id, seller_id) values (6, &#39;2019-08-05&#39;, 2, 2, 4);</span><br><span class="line"></span><br><span class="line">insert into Items (item_id, item_brand) values (1, &#39;Samsung&#39;);</span><br><span class="line">insert into Items (item_id, item_brand) values (2, &#39;Lenovo&#39;);</span><br><span class="line">insert into Items (item_id, item_brand) values (3, &#39;LG&#39;);</span><br><span class="line">insert into Items (item_id, item_brand) values (4, &#39;HP&#39;);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">       user_id AS buyer_id,</span><br><span class="line">       join_date,</span><br><span class="line">       IFNULL(COUNT(buyer_Id), 0) AS orders_in_2019</span><br><span class="line">FROM </span><br><span class="line">       Users u </span><br><span class="line">LEFT JOIN</span><br><span class="line">       Orders o</span><br><span class="line">ON  </span><br><span class="line">       U.user_id &#x3D; o.buyer_id AND</span><br><span class="line">       order_date &gt;&#x3D; &#39;2019-01-01&#39;</span><br><span class="line">GROUP BY</span><br><span class="line">       user_id</span><br><span class="line">ORDER BY</span><br><span class="line">       user_id;</span><br></pre></td></tr></table></figure></div><p>需求二：Write an SQL query to find for each user, whether the brand of the second item (by date) they sold is their favorite brand. If a user sold less than two items, report the answer for that user as no.</p><p>展示效果：</p><table><thead><tr><th>product_id</th><th>2nd_item_fav_brand</th></tr></thead><tbody><tr><td>1</td><td>no</td></tr><tr><td>2</td><td>no</td></tr><tr><td>3</td><td>yes</td></tr><tr><td>4</td><td>no</td></tr></tbody></table><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">      user_id as seller_id,</span><br><span class="line">      case</span><br><span class="line">         when t3.item_brand is null then &#39;no&#39;</span><br><span class="line">         when t3.item_brand &#x3D; u.favorite_brand then &#39;yes&#39;</span><br><span class="line">         else &#39;no&#39; </span><br><span class="line">      end as 2nd_item_fav_brand</span><br><span class="line">from </span><br><span class="line">      Users u</span><br><span class="line">left join </span><br><span class="line">     (select</span><br><span class="line">            order_id,</span><br><span class="line">            order_date,</span><br><span class="line">            t2.item_id,</span><br><span class="line">            buyer_id,</span><br><span class="line">            seller_id,</span><br><span class="line">            i.item_brand as item_brand</span><br><span class="line">      from </span><br><span class="line">           (select</span><br><span class="line">                  order_id,</span><br><span class="line">                  order_date,</span><br><span class="line">                  item_id,</span><br><span class="line">                  buyer_id,</span><br><span class="line">                  seller_id,</span><br><span class="line">                  cast(if(@prev &#x3D; seller_id,@rank :&#x3D; @rank + 1,@rank :&#x3D; 1) as unsigned) as rank,</span><br><span class="line">                  @prev :&#x3D; seller_id as prev</span><br><span class="line">            from </span><br><span class="line">                 (select</span><br><span class="line">                         order_id,</span><br><span class="line">                         order_date,</span><br><span class="line">                         item_id,</span><br><span class="line">                         buyer_id,</span><br><span class="line">                         seller_id</span><br><span class="line">                  from</span><br><span class="line">                         Orders</span><br><span class="line">                  group by</span><br><span class="line">                         seller_id,</span><br><span class="line">                         order_date</span><br><span class="line">                 ) as t1,</span><br><span class="line">                 (select </span><br><span class="line">                         @rank :&#x3D; 0,</span><br><span class="line">                         @prev :&#x3D; null</span><br><span class="line">                 ) as init) t2,</span><br><span class="line">                 Items i</span><br><span class="line">            where</span><br><span class="line">                  rank &#x3D; 2 and</span><br><span class="line">                  t2.item_id &#x3D; i.item_id</span><br><span class="line">     ) as t3</span><br><span class="line">on </span><br><span class="line">       u.user_id &#x3D; t3.seller_id;</span><br></pre></td></tr></table></figure></div><h2 id="54-Product-Price-at-a-Given-Date"><a href="#54-Product-Price-at-a-Given-Date" class="headerlink" title="54. Product Price at a Given Date"></a>54. Product Price at a Given Date</h2><p>需求一：Write an SQL query to find the prices of all products on 2019-08-16. Assume the price of all products before any change is 10.</p><p>展示效果：</p><table><thead><tr><th>project_id</th><th>price</th></tr></thead><tbody><tr><td>2</td><td>50</td></tr><tr><td>1</td><td>35</td></tr><tr><td>3</td><td>10</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists Products (product_id int, new_price int, change_date date);</span><br><span class="line">Truncate table Products;</span><br><span class="line">insert into Products (product_id, new_price, change_date) values (1, 20, &#39;2019-08-14&#39;);</span><br><span class="line">insert into Products (product_id, new_price, change_date) values (2, 50, &#39;2019-08-14&#39;);</span><br><span class="line">insert into Products (product_id, new_price, change_date) values (1, 30, &#39;2019-08-15&#39;);</span><br><span class="line">insert into Products (product_id, new_price, change_date) values (1, 35, &#39;2019-08-16&#39;);</span><br><span class="line">insert into Products (product_id, new_price, change_date) values (2, 65, &#39;2019-08-17&#39;);</span><br><span class="line">insert into Products (product_id, new_price, change_date) values (3, 20, &#39;2019-08-18&#39;);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">    * </span><br><span class="line">FROM </span><br><span class="line">    (SELECT </span><br><span class="line">           product_id,</span><br><span class="line">           new_price AS price</span><br><span class="line">     FROM </span><br><span class="line">           Products</span><br><span class="line">     WHERE (product_id, change_date) IN (</span><br><span class="line">                                          SELECT</span><br><span class="line">                                                product_id,</span><br><span class="line">                                                MAX(change_date)</span><br><span class="line">                                          FROM </span><br><span class="line">                                                Products</span><br><span class="line">                                          WHERE </span><br><span class="line">                                                change_date &lt;&#x3D; &#39;2019-08-16&#39;</span><br><span class="line">                                          GROUP BY</span><br><span class="line">                                                product_id</span><br><span class="line">                                         )</span><br><span class="line">     UNION</span><br><span class="line">     SELECT</span><br><span class="line">            DISTINCT product_id, 10 AS price</span><br><span class="line">     FROM </span><br><span class="line">            Products</span><br><span class="line">     WHERE </span><br><span class="line">            product_id NOT IN (SELECT</span><br><span class="line">                                     product_id</span><br><span class="line">                               FROM  </span><br><span class="line">                                     Products</span><br><span class="line">                               WHERE change_date &lt;&#x3D; &#39;2019-08-16&#39;</span><br><span class="line">                              )</span><br><span class="line">     ) tmp</span><br><span class="line">ORDER BY </span><br><span class="line">     price DESC;</span><br></pre></td></tr></table></figure></div><h2 id="55-Immediate-Food-Delivery"><a href="#55-Immediate-Food-Delivery" class="headerlink" title="55. Immediate Food Delivery"></a>55. Immediate Food Delivery</h2><p>需求一：Write an SQL query to find the percentage of immediate orders in the table, rounded to 2 decimal places.</p><p>展示效果：</p><table><thead><tr><th>immediate_percentage</th></tr></thead><tbody><tr><td>42.86</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists Delivery (delivery_id int, customer_id int, order_date date, customer_pref_delivery_date date);</span><br><span class="line">Truncate table Delivery;</span><br><span class="line">insert into Delivery (delivery_id, customer_id, order_date, customer_pref_delivery_date) values (1, 1, &#39;2019-08-01&#39;, &#39;2019-08-02&#39;);</span><br><span class="line">insert into Delivery (delivery_id, customer_id, order_date, customer_pref_delivery_date) values (2, 5, &#39;2019-08-02&#39;, &#39;2019-08-02&#39;);</span><br><span class="line">insert into Delivery (delivery_id, customer_id, order_date, customer_pref_delivery_date) values (3, 1, &#39;2019-08-11&#39;, &#39;2019-08-11&#39;);</span><br><span class="line">insert into Delivery (delivery_id, customer_id, order_date, customer_pref_delivery_date) values (4, 3, &#39;2019-08-24&#39;, &#39;2019-08-26&#39;);</span><br><span class="line">insert into Delivery (delivery_id, customer_id, order_date, customer_pref_delivery_date) values (5, 4, &#39;2019-08-21&#39;, &#39;2019-08-22&#39;);</span><br><span class="line">insert into Delivery (delivery_id, customer_id, order_date, customer_pref_delivery_date) values (6, 2, &#39;2019-08-11&#39;, &#39;2019-08-13&#39;);</span><br><span class="line">insert into Delivery (delivery_id, customer_id, order_date, customer_pref_delivery_date) values (7, 4, &#39;2019-08-09&#39;, &#39;2019-08-09&#39;);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT ROUND(</span><br><span class="line">    (SELECT COUNT(delivery_id)</span><br><span class="line">    FROM Delivery</span><br><span class="line">    WHERE order_date &#x3D; customer_pref_delivery_date)</span><br><span class="line">    * 100 &#x2F; COUNT(delivery_id)</span><br><span class="line">        , 2) </span><br><span class="line">AS immediate_percentage</span><br><span class="line">FROM Delivery;</span><br></pre></td></tr></table></figure></div><p>需求二：Write an SQL query to find the percentage of immediate orders in the first orders of all customers, rounded to 2 decimal places.</p><p>展示效果：</p><table><thead><tr><th>immediate_percentage</th></tr></thead><tbody><tr><td>40.00</td></tr></tbody></table><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">      round(</span><br><span class="line">               count(case when d.order_date &#x3D; d.customer_pref_delivery_date then 1 end)</span><br><span class="line">               * </span><br><span class="line">               100&#x2F;count(*),</span><br><span class="line">            2) as immediate_percentage</span><br><span class="line">from </span><br><span class="line">     Delivery d,</span><br><span class="line">    (select</span><br><span class="line">           delivery_id,</span><br><span class="line">           customer_id,</span><br><span class="line">           min(order_date) as order_date</span><br><span class="line">     from</span><br><span class="line">           Delivery</span><br><span class="line">     group by</span><br><span class="line">           customer_id</span><br><span class="line">    ) as t</span><br><span class="line">where</span><br><span class="line">     d.customer_id &#x3D; t.customer_id</span><br><span class="line">     and d.order_date &#x3D; t.order_date;</span><br></pre></td></tr></table></figure></div><h2 id="56-重新格式化部门表"><a href="#56-重新格式化部门表" class="headerlink" title="56. 重新格式化部门表"></a>56. 重新格式化部门表</h2><p>需求一：编写一个 SQL 查询来重新格式化表，使得新的表中有一个部门 id 列和一些对应 每个月 的收入（revenue）列。</p><p>展示效果：</p><table><thead><tr><th>id</th><th>Jan_Revenue</th><th>Feb_Revenue</th><th>Mar_Revenue</th><th>…</th><th>Dec_Revenue</th></tr></thead><tbody><tr><td>1</td><td>8000</td><td>7000</td><td>6000</td><td>…</td><td>null</td></tr><tr><td>2</td><td>9000</td><td>null</td><td>null</td><td>…</td><td>null</td></tr><tr><td>3</td><td>null</td><td>10000</td><td>null</td><td>…</td><td>null</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists Department (id int, revenue int, month varchar(5));</span><br><span class="line">Truncate table Department;</span><br><span class="line">insert into Department (id, revenue, month) values (1, 8000, &#39;Jan&#39;);</span><br><span class="line">insert into Department (id, revenue, month) values (2, 9000, &#39;Jan&#39;);</span><br><span class="line">insert into Department (id, revenue, month) values (3, 10000, &#39;Feb&#39;);</span><br><span class="line">insert into Department (id, revenue, month) values (1, 7000, &#39;Feb&#39;);</span><br><span class="line">insert into Department (id, revenue, month) values (1, 6000, &#39;Mar&#39;);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">      DISTINCT id AS &quot;id&quot;,</span><br><span class="line">      SUM(IF (month &#x3D; &quot;Jan&quot;, revenue, null)) AS &quot;Jan_Revenue&quot;,</span><br><span class="line">      SUM(IF (month &#x3D; &quot;Feb&quot;, revenue, null)) AS &quot;Feb_Revenue&quot;,</span><br><span class="line">      SUM(IF (month &#x3D; &quot;Mar&quot;, revenue, null)) AS &quot;Mar_Revenue&quot;,</span><br><span class="line">      SUM(IF (month &#x3D; &quot;Apr&quot;, revenue, null)) AS &quot;Apr_Revenue&quot;,</span><br><span class="line">      SUM(IF (month &#x3D; &quot;May&quot;, revenue, null)) AS &quot;May_Revenue&quot;,</span><br><span class="line">      SUM(IF (month &#x3D; &quot;Jun&quot;, revenue, null)) AS &quot;Jun_Revenue&quot;,</span><br><span class="line">      SUM(IF (month &#x3D; &quot;Jul&quot;, revenue, null)) AS &quot;Jul_Revenue&quot;,</span><br><span class="line">      SUM(IF (month &#x3D; &quot;Aug&quot;, revenue, null)) AS &quot;Aug_Revenue&quot;,</span><br><span class="line">      SUM(IF (month &#x3D; &quot;Sep&quot;, revenue, null)) AS &quot;Sep_Revenue&quot;,</span><br><span class="line">      SUM(IF (month &#x3D; &quot;Oct&quot;, revenue, null)) AS &quot;Oct_Revenue&quot;,</span><br><span class="line">      SUM(IF (month &#x3D; &quot;Nov&quot;, revenue, null)) AS &quot;Nov_Revenue&quot;,</span><br><span class="line">      SUM(IF (month &#x3D; &quot;Dec&quot;, revenue, null)) AS &quot;Dec_Revenue&quot; </span><br><span class="line">FROM </span><br><span class="line">      Department</span><br><span class="line">GROUP BY id;</span><br></pre></td></tr></table></figure></div><h2 id="57-每月交易"><a href="#57-每月交易" class="headerlink" title="57. 每月交易"></a>57. 每月交易</h2><p>需求一：查询每一个项目中员工的平均工作年限，精确到小数点后两位。</p><p>展示效果：</p><table><thead><tr><th>month</th><th>country</th><th>trans_count</th><th>approved_count</th><th>trans_total_amount</th><th>approved_total_amount</th></tr></thead><tbody><tr><td>2018-12</td><td>US</td><td>2</td><td>1</td><td>3000</td><td>1000</td></tr><tr><td>2019-01</td><td>US</td><td>1</td><td>1</td><td>2000</td><td>2000</td></tr><tr><td>2019-01</td><td>DE</td><td>1</td><td>1</td><td>2000</td><td>2000</td></tr><tr><td>2019-05</td><td>US</td><td>2</td><td>1</td><td>3000</td><td>1000</td></tr><tr><td>2019-06</td><td>US</td><td>3</td><td>2</td><td>12000</td><td>8000</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">create table if not exists Transactions (id int, country varchar(4), state enum(&#39;approved&#39;, &#39;declined&#39;), amount int, trans_date date);</span><br><span class="line">create table if not exists Chargebacks (trans_id int, trans_date date);</span><br><span class="line"></span><br><span class="line">insert into Transactions (id, country, state, amount, trans_date) values (101, &#39;US&#39;, &#39;approved&#39;, 1000, &#39;2018-12-18&#39;);</span><br><span class="line">insert into Transactions (id, country, state, amount, trans_date) values (102, &#39;US&#39;, &#39;declined&#39;, 2000, &#39;2018-12-19&#39;);</span><br><span class="line">insert into Transactions (id, country, state, amount, trans_date) values (103, &#39;US&#39;, &#39;approved&#39;, 2000, &#39;2019-01-01&#39;);</span><br><span class="line">insert into Transactions (id, country, state, amount, trans_date) values (104, &#39;DE&#39;, &#39;approved&#39;, 2000, &#39;2019-01-07&#39;);</span><br><span class="line">insert into Transactions (id, country, state, amount, trans_date) values (105, &#39;US&#39;, &#39;approved&#39;, 1000, &#39;2019-05-18&#39;);</span><br><span class="line">insert into Transactions (id, country, state, amount, trans_date) values (106, &#39;US&#39;, &#39;declined&#39;, 2000, &#39;2019-05-19&#39;);</span><br><span class="line">insert into Transactions (id, country, state, amount, trans_date) values (107, &#39;US&#39;, &#39;approved&#39;, 3000, &#39;2019-06-10&#39;);</span><br><span class="line">insert into Transactions (id, country, state, amount, trans_date) values (108, &#39;US&#39;, &#39;declined&#39;, 4000, &#39;2019-06-13&#39;);</span><br><span class="line">insert into Transactions (id, country, state, amount, trans_date) values (109, &#39;US&#39;, &#39;approved&#39;, 5000, &#39;2019-06-15&#39;);</span><br><span class="line"></span><br><span class="line">insert into Chargebacks (trans_id, trans_date) values (102, &#39;2019-05-29&#39;);</span><br><span class="line">insert into Chargebacks (trans_id, trans_date) values (101, &#39;2019-06-30&#39;);</span><br><span class="line">insert into Chargebacks (trans_id, trans_date) values (105, &#39;2019-09-18&#39;);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">      date_format(trans_date,&#39;%Y-%m&#39;) as month,</span><br><span class="line">      country,</span><br><span class="line">      count(*) as trans_count,</span><br><span class="line">      sum(if(state&#x3D;&#39;approved&#39;,1,0)) as approved_count,</span><br><span class="line">      sum(amount) as trans_total_amount,</span><br><span class="line">      sum(if(state&#x3D;&#39;approved&#39;,amount,0)) as approved_total_amount</span><br><span class="line">from </span><br><span class="line">      Transactions t</span><br><span class="line">group by</span><br><span class="line">      date_format(trans_date,&#39;%Y-%m&#39;),</span><br><span class="line">      country;</span><br></pre></td></tr></table></figure></div><p>需求二：编写一个 SQL 查询，以查找每个月和每个国家/地区的已批准交易的数量及其总金额、退单的数量及其总金额。</p><p>展示效果：</p><table><thead><tr><th>month</th><th>country</th><th>approved_count</th><th>approved_amount</th><th>chargeback_count</th><th>chargeback_amount</th></tr></thead><tbody><tr><td>2018-12</td><td>US</td><td>1</td><td>1000</td><td>0</td><td>0</td></tr><tr><td>2019-01</td><td>DE</td><td>1</td><td>2000</td><td>0</td><td>0</td></tr><tr><td>2019-01</td><td>US</td><td>1</td><td>2000</td><td>0</td><td>0</td></tr><tr><td>2019-05</td><td>US</td><td>1</td><td>1000</td><td>1</td><td>2000</td></tr><tr><td>2019-06</td><td>US</td><td>2</td><td>8000</td><td>1</td><td>1000</td></tr><tr><td>2019-09</td><td>US</td><td>0</td><td>0</td><td>1</td><td>1000</td></tr></tbody></table><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">       month as MONTH,</span><br><span class="line">       country as COUNTRY,</span><br><span class="line">       SUM(IF(type &#x3D; &#39;approved&#39;, 1, 0)) AS APPROVED_COUNT,</span><br><span class="line">       SUM(IF(type &#x3D; &#39;approved&#39;, amount, 0)) AS APPROVED_AMOUNT,</span><br><span class="line">       SUM(IF(type &#x3D; &#39;chargeback&#39;, 1, 0)) AS CHARGEBACK_COUNT,</span><br><span class="line">       SUM(IF(type &#x3D; &#39;chargeback&#39;, amount, 0)) AS CHARGEBACK_AMOUNT</span><br><span class="line">FROM </span><br><span class="line">      (SELECT </span><br><span class="line">              date_format(t.trans_date,&#39;%Y-%m&#39;) AS month,</span><br><span class="line">              t.country,</span><br><span class="line">              amount,</span><br><span class="line">              &#39;approved&#39; AS type</span><br><span class="line">        FROM</span><br><span class="line">              Transactions AS t</span><br><span class="line">        WHERE </span><br><span class="line">              state &#x3D; &#39;approved&#39;</span><br><span class="line">        UNION ALL</span><br><span class="line">        SELECT</span><br><span class="line">              date_format(c.trans_date,&#39;%Y-%m&#39;) AS month,</span><br><span class="line">              t.country,</span><br><span class="line">              amount,</span><br><span class="line">              &#39;chargeback&#39; AS type</span><br><span class="line">         FROM </span><br><span class="line">              Transactions AS t</span><br><span class="line">         INNER JOIN</span><br><span class="line">              Chargebacks AS c </span><br><span class="line">         ON t.id &#x3D; c.trans_id</span><br><span class="line">         ) AS tt</span><br><span class="line">GROUP BY </span><br><span class="line">         tt.month,</span><br><span class="line">         tt.country;</span><br></pre></td></tr></table></figure></div><h2 id="58-锦标赛优胜者"><a href="#58-锦标赛优胜者" class="headerlink" title="58. 锦标赛优胜者"></a>58. 锦标赛优胜者</h2><p>需求一：编写一个 SQL 查询来查找每组中的获胜者。每组的获胜者是在组内得分最高的选手。如果平局，得分最低的选手获胜。</p><p>展示效果：</p><table><thead><tr><th>group_id</th><th>player_id</th></tr></thead><tbody><tr><td>1</td><td>15</td></tr><tr><td>2</td><td>35</td></tr><tr><td>3</td><td>40</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists Players (player_id int, group_id int);</span><br><span class="line">Create table If Not Exists Matches (match_id int, first_player int, second_player int, first_score int, second_score int);</span><br><span class="line">Truncate table Players;</span><br><span class="line">insert into Players (player_id, group_id) values (10, 2);</span><br><span class="line">insert into Players (player_id, group_id) values (15, 1);</span><br><span class="line">insert into Players (player_id, group_id) values (20, 3);</span><br><span class="line">insert into Players (player_id, group_id) values (25, 1);</span><br><span class="line">insert into Players (player_id, group_id) values (30, 1);</span><br><span class="line">insert into Players (player_id, group_id) values (35, 2);</span><br><span class="line">insert into Players (player_id, group_id) values (40, 3);</span><br><span class="line">insert into Players (player_id, group_id) values (45, 1);</span><br><span class="line">insert into Players (player_id, group_id) values (50, 2);</span><br><span class="line">Truncate table Matches;</span><br><span class="line">insert into Matches (match_id, first_player, second_player, first_score, second_score) values (1, 15, 45, 3, 0);</span><br><span class="line">insert into Matches (match_id, first_player, second_player, first_score, second_score) values (2, 30, 25, 1, 2);</span><br><span class="line">insert into Matches (match_id, first_player, second_player, first_score, second_score) values (3, 30, 15, 2, 0);</span><br><span class="line">insert into Matches (match_id, first_player, second_player, first_score, second_score) values (4, 40, 20, 5, 2);</span><br><span class="line">insert into Matches (match_id, first_player, second_player, first_score, second_score) values (5, 35, 50, 1, 1);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">      group_id,</span><br><span class="line">      player_id</span><br><span class="line">from </span><br><span class="line">    (select </span><br><span class="line">           group_id,</span><br><span class="line">           player_id,</span><br><span class="line">           sum(</span><br><span class="line">               case</span><br><span class="line">                   when player_id &#x3D; first_player then first_score</span><br><span class="line">                   when player_id &#x3D; second_player then second_score</span><br><span class="line">               end</span><br><span class="line">               ) as totalScores</span><br><span class="line">     from </span><br><span class="line">          Players p,</span><br><span class="line">          Matches m</span><br><span class="line">     where</span><br><span class="line">          p.player_id &#x3D; m.first_player or</span><br><span class="line">          p.player_id &#x3D; m.second_player</span><br><span class="line">     group by</span><br><span class="line">          group_id,</span><br><span class="line">          player_id</span><br><span class="line">     order by</span><br><span class="line">          group_id,</span><br><span class="line">          totalScores desc,</span><br><span class="line">          player_id</span><br><span class="line">    ) as temp</span><br><span class="line">group by </span><br><span class="line">     group_id</span><br><span class="line">order by </span><br><span class="line">     group_id,</span><br><span class="line">     totalScores desc,</span><br><span class="line">     player_id;</span><br></pre></td></tr></table></figure></div><h2 id="59-Last-Person-to-Fit-in-the-Elevator"><a href="#59-Last-Person-to-Fit-in-the-Elevator" class="headerlink" title="59. Last Person to Fit in the Elevator"></a>59. Last Person to Fit in the Elevator</h2><p>需求：Queue table is ordered by turn in the example for simplicity.<br>In the example George Washington(id 5), John Adams(id 3) and Thomas Jefferson(id 6) will enter the elevator as their weight sum is 250 + 350 + 400 = 1000.<br>Thomas Jefferson(id 6) is the last person to fit in the elevator because he has the last turn in these three people.</p><p>展示效果：</p><table><thead><tr><th>person_name</th></tr></thead><tbody><tr><td>Thomas Jefferson</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists Queue (person_id int, person_name varchar(30), weight int, turn int);</span><br><span class="line">Truncate table Queue;</span><br><span class="line">insert into Queue (person_id, person_name, weight, turn) values (5, &#39;George Washington&#39;, 250, 1);</span><br><span class="line">insert into Queue (person_id, person_name, weight, turn) values (4, &#39;Thomas Jefferson&#39;, 175, 5);</span><br><span class="line">insert into Queue (person_id, person_name, weight, turn) values (3, &#39;John Adams&#39;, 350, 2);</span><br><span class="line">insert into Queue (person_id, person_name, weight, turn) values (6, &#39;Thomas Jefferson&#39;, 400, 3);</span><br><span class="line">insert into Queue (person_id, person_name, weight, turn) values (1, &#39;James Elephant&#39;, 500, 6);</span><br><span class="line">insert into Queue (person_id, person_name, weight, turn) values (2, &#39;Will Johnliams&#39;, 200, 4);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">      person_name</span><br><span class="line">from </span><br><span class="line">      Queue q1</span><br><span class="line">where </span><br><span class="line">     (select</span><br><span class="line">           sum(weight)</span><br><span class="line">      from</span><br><span class="line">           Queue</span><br><span class="line">      where turn &lt;&#x3D; q1.turn) &lt;&#x3D; 1000</span><br><span class="line">order by </span><br><span class="line">      turn desc </span><br><span class="line">limit 1;</span><br></pre></td></tr></table></figure></div><h2 id="60-Queries-Quality-and-Percentage"><a href="#60-Queries-Quality-and-Percentage" class="headerlink" title="60. Queries Quality and Percentage"></a>60. Queries Quality and Percentage</h2><p>需求：Write an SQL query to find each query_name, the quality and poor_query_percentage.</p><p>展示效果：</p><table><thead><tr><th>query_name</th><th>quality</th><th>poor_query_percentage</th></tr></thead><tbody><tr><td>Dog</td><td>2.50</td><td>33.33</td></tr><tr><td>Cat</td><td>0.66</td><td>33.33</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists Queries (query_name varchar(30), result varchar(50), position int, rating int);</span><br><span class="line">Truncate table Queries;</span><br><span class="line">insert into Queries (query_name, result, position, rating) values (&#39;Dog&#39;, &#39;Golden Retriever&#39;, 1, 5);</span><br><span class="line">insert into Queries (query_name, result, position, rating) values (&#39;Dog&#39;, &#39;German Shepherd&#39;, 2, 5);</span><br><span class="line">insert into Queries (query_name, result, position, rating) values (&#39;Dog&#39;, &#39;Mule&#39;, &#39;200&#39;, 1);</span><br><span class="line">insert into Queries (query_name, result, position, rating) values (&#39;Cat&#39;, &#39;Shirazi&#39;, 5, 2);</span><br><span class="line">insert into Queries (query_name, result, position, rating) values (&#39;Cat&#39;, &#39;Siamese&#39;, 3, 3);</span><br><span class="line">insert into Queries (query_name, result, position, rating) values (&#39;Cat&#39;, &#39;Sphynx&#39;, 7, 4);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">      query_name,</span><br><span class="line">      round(avg(rating&#x2F;position), 2) as quality ,</span><br><span class="line">      round((count(if(rating&lt;3, True, null)) &#x2F; count(query_name)) *100 , 2) as poor_query_percentage</span><br><span class="line">from</span><br><span class="line">      Queries</span><br><span class="line">group by </span><br><span class="line">      query_name;</span><br></pre></td></tr></table></figure></div><h2 id="61-Team-Scores-in-Football-Tournament"><a href="#61-Team-Scores-in-Football-Tournament" class="headerlink" title="61. Team Scores in Football Tournament"></a>61. Team Scores in Football Tournament</h2><p>需求一：You would like to compute the scores of all teams after all matches. Points are awarded as follows:<br>A team receives three points if they win a match (Score strictly more goals than the opponent team).<br>A team receives one point if they draw a match (Same number of goals as the opponent team).<br>A team receives no points if they lose a match (Score less goals than the opponent team).<br>Write an SQL query that selects the team_id, team_name and num_points of each team in the tournament after all described matches. Result table should be ordered by num_points (decreasing order). In case of a tie, order the records by team_id (increasing order).</p><p>展示效果：</p><table><thead><tr><th>team_id</th><th>team_name</th><th>num_points</th></tr></thead><tbody><tr><td>10</td><td>Leetcode FC</td><td>7</td></tr><tr><td>20</td><td>NewYork FC</td><td>3</td></tr><tr><td>50</td><td>Toronto FC</td><td>3</td></tr><tr><td>30</td><td>Atlanta FC</td><td>1</td></tr><tr><td>40</td><td>Chicago FC</td><td>0</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists Teams (team_id int, team_name varchar(30));</span><br><span class="line">Create table If Not Exists Matches (match_id int, host_team int, guest_team int, host_goals int, guest_goals int);</span><br><span class="line">Truncate table Teams;</span><br><span class="line">insert into Teams (team_id, team_name) values (10, &#39;Leetcode FC&#39;);</span><br><span class="line">insert into Teams (team_id, team_name) values (20, &#39;NewYork FC&#39;);</span><br><span class="line">insert into Teams (team_id, team_name) values (30, &#39;Atlanta FC&#39;);</span><br><span class="line">insert into Teams (team_id, team_name) values (40, &#39;Chicago FC&#39;);</span><br><span class="line">insert into Teams (team_id, team_name) values (50, &#39;Toronto FC&#39;);</span><br><span class="line">Truncate table Matches;</span><br><span class="line">insert into Matches (match_id, host_team, guest_team, host_goals, guest_goals) values (1, 10, 20, 30, 0);</span><br><span class="line">insert into Matches (match_id, host_team, guest_team, host_goals, guest_goals) values (2, 30, 10, 2, 2);</span><br><span class="line">insert into Matches (match_id, host_team, guest_team, host_goals, guest_goals) values (3, 10, 50, 5, 1);</span><br><span class="line">insert into Matches (match_id, host_team, guest_team, host_goals, guest_goals) values (4, 20, 30, 1, 0);</span><br><span class="line">insert into Matches (match_id, host_team, guest_team, host_goals, guest_goals) values (5, 50, 30, 1, 0);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">     *</span><br><span class="line">FROM</span><br><span class="line">    (SELECT </span><br><span class="line">           a.team_id,</span><br><span class="line">           MAX(team_name) AS team_name,</span><br><span class="line">           SUM(</span><br><span class="line">                CASE </span><br><span class="line">        WHEN a.team_id &#x3D; b.host_team THEN </span><br><span class="line">    CASE </span><br><span class="line">    WHEN b.host_goals &gt; b.guest_goals THEN 3</span><br><span class="line">    WHEN b.host_goals &#x3D; b.guest_goals THEN 1</span><br><span class="line">            ELSE 0</span><br><span class="line">    END</span><br><span class="line">        WHEN a.team_id &#x3D; b.guest_team THEN </span><br><span class="line">    CASE </span><br><span class="line">    WHEN b.host_goals &lt; b.guest_goals THEN 3</span><br><span class="line">    WHEN b.host_goals &#x3D; b.guest_goals THEN 1</span><br><span class="line">    ELSE 0</span><br><span class="line">    END</span><br><span class="line">        ELSE 0</span><br><span class="line">       END</span><br><span class="line">           ) AS num_points</span><br><span class="line">FROM </span><br><span class="line">         Teams a</span><br><span class="line">    LEFT JOIN</span><br><span class="line">         Matches b</span><br><span class="line">    ON </span><br><span class="line">         a.team_id &#x3D; b.host_team OR </span><br><span class="line">         a.team_id &#x3D; b.guest_team</span><br><span class="line">GROUP BY a.team_id</span><br><span class="line">    ) a </span><br><span class="line">ORDER BY</span><br><span class="line">    a.num_points DESC,</span><br><span class="line">    a.team_id;</span><br></pre></td></tr></table></figure></div><h2 id="62-报告系统状态的连续日期"><a href="#62-报告系统状态的连续日期" class="headerlink" title="62. 报告系统状态的连续日期"></a>62. 报告系统状态的连续日期</h2><p>需求：系统 每天 运行一个任务。每个任务都独立于先前的任务。任务的状态可以是失败或是成功。编写一个 SQL 查询 2019-01-01 到 2019-12-31 期间任务连续同状态 period_state 的起止日期（start_date 和 end_date）。即如果任务失败了，就是失败状态的起止日期，如果任务成功了，就是成功状态的起止日期。最后结果按照起始日期 start_date 排序</p><p>展示效果：</p><table><thead><tr><th>period_state</th><th>start date</th><th>end date</th></tr></thead><tbody><tr><td>present</td><td>2019-01-01</td><td>2019-01-03</td></tr><tr><td>missing</td><td>2019-01-04</td><td>2019-01-05</td></tr><tr><td>present</td><td>2019-01-06</td><td>2019-01-06</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists Failed (fail_date date);</span><br><span class="line">Create table If Not Exists Succeeded (success_date date);</span><br><span class="line">Truncate table Failed;</span><br><span class="line">insert into Failed (fail_date) values (&#39;2018-12-28&#39;);</span><br><span class="line">insert into Failed (fail_date) values (&#39;2018-12-29&#39;);</span><br><span class="line">insert into Failed (fail_date) values (&#39;2019-01-04&#39;);</span><br><span class="line">insert into Failed (fail_date) values (&#39;2019-01-05&#39;);</span><br><span class="line">Truncate table Succeeded;</span><br><span class="line">insert into Succeeded (success_date) values (&#39;2018-12-30&#39;);</span><br><span class="line">insert into Succeeded (success_date) values (&#39;2018-12-31&#39;);</span><br><span class="line">insert into Succeeded (success_date) values (&#39;2019-01-01&#39;);</span><br><span class="line">insert into Succeeded (success_date) values (&#39;2019-01-02&#39;);</span><br><span class="line">insert into Succeeded (success_date) values (&#39;2019-01-03&#39;);</span><br><span class="line">insert into Succeeded (success_date) values (&#39;2019-01-06&#39;);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">      if(str&#x3D;1,&#39;succeeded&#39;,&#39;failed&#39;) as period_state ,</span><br><span class="line">      min(date) as start_date,</span><br><span class="line">      max(date) as end_date</span><br><span class="line">from </span><br><span class="line">     (select </span><br><span class="line">            @diff :&#x3D; @diff+ if(num &#x3D; 1 , 1,0) as diff,</span><br><span class="line">            date,</span><br><span class="line">            str</span><br><span class="line">      from</span><br><span class="line">           (select </span><br><span class="line">                  case </span><br><span class="line">                      when @str &#x3D; str and  date_add(@pre,interval 1 day) &#x3D; date  then @num :&#x3D; @num +1</span><br><span class="line">                      when @str:&#x3D;str then  @num :&#x3D; 1</span><br><span class="line">                      else @num :&#x3D; 1</span><br><span class="line">                  end as num,</span><br><span class="line">                  @pre :&#x3D; date,</span><br><span class="line">                  date,</span><br><span class="line">                  str</span><br><span class="line">            from </span><br><span class="line">                 (select </span><br><span class="line">                        fail_date as date ,</span><br><span class="line">                        0 as &#39;str&#39;</span><br><span class="line">                  from </span><br><span class="line">                        Failed </span><br><span class="line">                  union  </span><br><span class="line">                  select</span><br><span class="line">                        success_date,</span><br><span class="line">                        1</span><br><span class="line">                  from </span><br><span class="line">                        Succeeded </span><br><span class="line">                 ) s,</span><br><span class="line">                 (select @pre:&#x3D;null,@num:&#x3D;0,@str :&#x3D; null) s1</span><br><span class="line">            where </span><br><span class="line">                  date between &#39;2019-01-01&#39; and &#39;2019-12-31&#39;</span><br><span class="line">            order by</span><br><span class="line">                  date </span><br><span class="line">           ) s,</span><br><span class="line">           (select @diff:&#x3D;0)  s1</span><br><span class="line">     ) ys</span><br><span class="line">group by </span><br><span class="line">      diff,</span><br><span class="line">      str;</span><br></pre></td></tr></table></figure></div><h2 id="62-每个帖子的评论数"><a href="#62-每个帖子的评论数" class="headerlink" title="62. 每个帖子的评论数"></a>62. 每个帖子的评论数</h2><p>需求一：编写 SQL 语句以查找每个帖子的评论数。结果表应包含帖子的 post_id 和对应的评论数 number_of_comments 并且按 post_id 升序排列。Submissions 可能包含重复的评论。您应该计算每个帖子的唯一评论数。Submissions 可能包含重复的帖子。您应该将它们视为一个帖子。</p><p>展示效果：</p><table><thead><tr><th>post_id</th><th>number_of_comments</th></tr></thead><tbody><tr><td>1</td><td>3</td></tr><tr><td>2</td><td>2</td></tr><tr><td>12</td><td>0</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists Submissions (sub_id int, parent_id int);</span><br><span class="line">Truncate table Submissions;</span><br><span class="line">insert into Submissions (sub_id, parent_id) values (1, null);</span><br><span class="line">insert into Submissions (sub_id, parent_id) values (2, null);</span><br><span class="line">insert into Submissions (sub_id, parent_id) values (1, null);</span><br><span class="line">insert into Submissions (sub_id, parent_id) values (12, null);</span><br><span class="line">insert into Submissions (sub_id, parent_id) values (3, 1);</span><br><span class="line">insert into Submissions (sub_id, parent_id) values (5, 2);</span><br><span class="line">insert into Submissions (sub_id, parent_id) values (3, 1);</span><br><span class="line">insert into Submissions (sub_id, parent_id) values (4, 1);</span><br><span class="line">insert into Submissions (sub_id, parent_id) values (9, 1);</span><br><span class="line">insert into Submissions (sub_id, parent_id) values (10, 2);</span><br><span class="line">insert into Submissions (sub_id, parent_id) values (6, 7);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">  post_id,</span><br><span class="line">  COUNT( DISTINCT S2.sub_id ) AS number_of_comments </span><br><span class="line">FROM</span><br><span class="line">(SELECT</span><br><span class="line">           DISTINCT sub_id AS post_id </span><br><span class="line">     FROM </span><br><span class="line">           Submissions</span><br><span class="line">     WHERE </span><br><span class="line">           parent_id IS NULL</span><br><span class="line">    ) S1</span><br><span class="line">LEFT JOIN</span><br><span class="line">     Submissions S2</span><br><span class="line">ON</span><br><span class="line">     S1.post_id &#x3D; S2.parent_id </span><br><span class="line">GROUP BY</span><br><span class="line">     S1.post_id;</span><br></pre></td></tr></table></figure></div><h2 id="63-Average-Selling-Price"><a href="#63-Average-Selling-Price" class="headerlink" title="63. Average Selling Price"></a>63. Average Selling Price</h2><p>需求一：Write an SQL query to find the average selling price for each product.  average_price should be rounded to 2 decimal places.</p><p>The query result format is in the following example:</p><p>展示效果：</p><table><thead><tr><th>product_id</th><th>average_price</th></tr></thead><tbody><tr><td>1</td><td>6.96</td></tr><tr><td>2</td><td>16.96</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists Prices (product_id int, start_date date, end_date date, price int);</span><br><span class="line">Create table If Not Exists UnitsSold (product_id int, purchase_date date, units int);</span><br><span class="line">Truncate table Prices;</span><br><span class="line">insert into Prices (product_id, start_date, end_date, price) values (1, &#39;2019-02-17&#39;, &#39;2019-02-28&#39;, 5);</span><br><span class="line">insert into Prices (product_id, start_date, end_date, price) values (1, &#39;2019-03-01&#39;, &#39;2019-03-22&#39;, 20);</span><br><span class="line">insert into Prices (product_id, start_date, end_date, price) values (2, &#39;2019-02-01&#39;, &#39;2019-02-20&#39;, 15);</span><br><span class="line">insert into Prices (product_id, start_date, end_date, price) values (2, &#39;2019-02-21&#39;, &#39;2019-03-31&#39;, 30);</span><br><span class="line">Truncate table UnitsSold;</span><br><span class="line">insert into UnitsSold (product_id, purchase_date, units) values (1, &#39;2019-02-25&#39;, 100);</span><br><span class="line">insert into UnitsSold (product_id, purchase_date, units) values (1, &#39;2019-03-01&#39;, 15);</span><br><span class="line">insert into UnitsSold (product_id, purchase_date, units) values (2, &#39;2019-02-10&#39;, 200);</span><br><span class="line">insert into UnitsSold (product_id, purchase_date, units) values (2, &#39;2019-03-22&#39;, 30);</span><br></pre></td></tr></table></figure></div><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">      product_id,</span><br><span class="line">      round(sum(a)&#x2F;sum(units),2) as average_price</span><br><span class="line">from</span><br><span class="line">   (select </span><br><span class="line">          p.product_id as product_id,</span><br><span class="line">          price,units,</span><br><span class="line">          price * units as a</span><br><span class="line">    from </span><br><span class="line">          Prices p </span><br><span class="line">    left join</span><br><span class="line">          UnitsSold u</span><br><span class="line">    on </span><br><span class="line">          p.product_id&#x3D;u.product_id and </span><br><span class="line">          purchase_date&lt;&#x3D;end_date and </span><br><span class="line">          purchase_date&gt;&#x3D;start_date</span><br><span class="line">   )t</span><br><span class="line">group by </span><br><span class="line">    product_id;</span><br></pre></td></tr></table></figure></div><h2 id="64-Page-Recommendations"><a href="#64-Page-Recommendations" class="headerlink" title="64. Page Recommendations"></a>64. Page Recommendations</h2><p>需求一：Write an SQL query to recommend pages to the user with user_id = 1 using the pages that your friends liked. It should not recommend pages you already liked. Return result table in any order without duplicates.</p><p>展示效果：</p><table><thead><tr><th>recommended_page</th></tr></thead><tbody><tr><td>23</td></tr><tr><td>24</td></tr><tr><td>56</td></tr><tr><td>33</td></tr><tr><td>77</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists Friendship (user1_id int, user2_id int);</span><br><span class="line">Create table If Not Exists Likes (user_id int, page_id int);</span><br><span class="line">Truncate table Friendship;</span><br><span class="line">insert into Friendship (user1_id, user2_id) values (1, 2);</span><br><span class="line">insert into Friendship (user1_id, user2_id) values (1, 3);</span><br><span class="line">insert into Friendship (user1_id, user2_id) values (1, 4);</span><br><span class="line">insert into Friendship (user1_id, user2_id) values (2, 3);</span><br><span class="line">insert into Friendship (user1_id, user2_id) values (2, 4);</span><br><span class="line">insert into Friendship (user1_id, user2_id) values (2, 5);</span><br><span class="line">insert into Friendship (user1_id, user2_id) values (6, 1);</span><br><span class="line">Truncate table Likes;</span><br><span class="line">insert into Likes (user_id, page_id) values (1, 88);</span><br><span class="line">insert into Likes (user_id, page_id) values (2, 23);</span><br><span class="line">insert into Likes (user_id, page_id) values (3, 24);</span><br><span class="line">insert into Likes (user_id, page_id) values (4, 56);</span><br><span class="line">insert into Likes (user_id, page_id) values (5, 11);</span><br><span class="line">insert into Likes (user_id, page_id) values (6, 33);</span><br><span class="line">insert into Likes (user_id, page_id) values (2, 77);</span><br><span class="line">insert into Likes (user_id, page_id) values (3, 77);</span><br><span class="line">insert into Likes (user_id, page_id) values (6, 88);</span><br></pre></td></tr></table></figure></div><p>解释：</p><p>User one is friend with users 2, 3, 4 and 6.</p><p>Suggested pages are 23 from user 2, 24 from user 3, 56 from user 3 and 33 from user 6.</p><p>Page 77 is suggested from both user 2 and user 3.<br>Page 88 is not suggested because user 1 already likes it.</p><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">select </span><br><span class="line">      distinct page_id as recommended_page</span><br><span class="line">from </span><br><span class="line">      Likes,</span><br><span class="line">      friendship</span><br><span class="line">where </span><br><span class="line">      page_id not in(select </span><br><span class="line">                            page_id </span><br><span class="line">                     from </span><br><span class="line">                            likes</span><br><span class="line">                     where </span><br><span class="line">                            user_id&#x3D;1</span><br><span class="line">                    ) and</span><br><span class="line">      user_id in (select</span><br><span class="line">                        user1_id</span><br><span class="line">                  from</span><br><span class="line">                        friendship</span><br><span class="line">                  where user2_id&#x3D;1</span><br><span class="line">                 ) or</span><br><span class="line">      user_id in (select</span><br><span class="line">                        user2_id </span><br><span class="line">                  from </span><br><span class="line">                        friendship </span><br><span class="line">                  where</span><br><span class="line">                        user1_id&#x3D;1);</span><br></pre></td></tr></table></figure></div><h2 id="65-All-People-Report-to-the-Given-Manager"><a href="#65-All-People-Report-to-the-Given-Manager" class="headerlink" title="65. All People Report to the Given Manager"></a>65. All People Report to the Given Manager</h2><p>需求一：Write an SQL query to find employee_id of all employees that directly or indirectly report their work to the head of the company.</p><p>The indirect relation between managers will not exceed 3 managers as the company is small. Return result table in any order without duplicates.</p><p>展示效果：</p><table><thead><tr><th>employee_id</th></tr></thead><tbody><tr><td>2</td></tr><tr><td>77</td></tr><tr><td>4</td></tr><tr><td>7</td></tr></tbody></table><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Create table If Not Exists Employees (employee_id int, employee_name varchar(30), manager_id int);</span><br><span class="line">Truncate table Employees;</span><br><span class="line">insert into Employees (employee_id, employee_name, manager_id) values (1, &#39;Boss&#39;, 1);</span><br><span class="line">insert into Employees (employee_id, employee_name, manager_id) values (3, &#39;Alice&#39;, 3);</span><br><span class="line">insert into Employees (employee_id, employee_name, manager_id) values (2, &#39;Bob&#39;, 1);</span><br><span class="line">insert into Employees (employee_id, employee_name, manager_id) values (4, &#39;Daniel&#39;, 2);</span><br><span class="line">insert into Employees (employee_id, employee_name, manager_id) values (7, &#39;Luis&#39;, 4);</span><br><span class="line">insert into Employees (employee_id, employee_name, manager_id) values (8, &#39;John&#39;, 3);</span><br><span class="line">insert into Employees (employee_id, employee_name, manager_id) values (9, &#39;Angela&#39;, 8);</span><br><span class="line">insert into Employees (employee_id, employee_name, manager_id) values (77, &#39;Robert&#39;, 1);</span><br></pre></td></tr></table></figure></div><p>提示：</p><p>The head of the company is the employee with employee_id 1.</p><p>The employees with employee_id 2 and 77 report their work directly to the head of the company.</p><p>The employee with employee_id 4 report his work indirectly to the head of the company 4 –&gt; 2 –&gt; 1. </p><p>The employee with employee_id 7 report his work indirectly to the head of the company 7 –&gt; 4 –&gt; 2 –&gt; 1.</p><p>The employees with employee_id 3, 8 and 9 don’t report their work to head of company directly or indirectly. </p><p>最终SQL:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">      employee_id EMPLOYEE_ID</span><br><span class="line">from </span><br><span class="line">      employees</span><br><span class="line">where </span><br><span class="line">      manager_id&#x3D;1 and </span><br><span class="line">      employee_id!&#x3D;1</span><br><span class="line">union</span><br><span class="line">select</span><br><span class="line">      a1.employee_id</span><br><span class="line">from </span><br><span class="line">      employees a1,</span><br><span class="line">     (select </span><br><span class="line">            employee_id</span><br><span class="line">      from</span><br><span class="line">            employees</span><br><span class="line">      where</span><br><span class="line">            manager_id&#x3D;1 and</span><br><span class="line">            employee_id!&#x3D;1</span><br><span class="line">     ) a</span><br><span class="line">where</span><br><span class="line">     manager_id&#x3D;a.employee_id</span><br><span class="line">union</span><br><span class="line">select </span><br><span class="line">     a2.employee_id</span><br><span class="line">from </span><br><span class="line">     employees a2,</span><br><span class="line">    (select</span><br><span class="line">           a1.employee_id employee_id</span><br><span class="line">    from </span><br><span class="line">           employees a1,</span><br><span class="line">           (select </span><br><span class="line">                  employee_id</span><br><span class="line">            from</span><br><span class="line">                  employees</span><br><span class="line">            where</span><br><span class="line">                  manager_id&#x3D;1 and</span><br><span class="line">                  employee_id!&#x3D;1</span><br><span class="line">           ) a</span><br><span class="line">    where </span><br><span class="line">           manager_id&#x3D;a.employee_id</span><br><span class="line">    ) a3</span><br><span class="line">where </span><br><span class="line">    manager_id&#x3D;a3.employee_id</span><br><span class="line">order by </span><br><span class="line">    employee_id;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MySQL练习题&quot;&gt;&lt;a href=&quot;#MySQL练习题&quot; class=&quot;headerlink&quot; title=&quot;MySQL练习题&quot;&gt;&lt;/a&gt;MySQL练习题&lt;/h1&gt;&lt;h2 id=&quot;1-组合两个表&quot;&gt;&lt;a href=&quot;#1-组合两个表&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="SQL" scheme="https://masteryang4.github.io/categories/SQL/"/>
    
      <category term="MySQL" scheme="https://masteryang4.github.io/categories/SQL/MySQL/"/>
    
    
      <category term="SQL" scheme="https://masteryang4.github.io/tags/SQL/"/>
    
      <category term="MySQL" scheme="https://masteryang4.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>kafka知识整理</title>
    <link href="https://masteryang4.github.io/2020/06/18/kafka%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/"/>
    <id>https://masteryang4.github.io/2020/06/18/kafka%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/</id>
    <published>2020-06-18T06:33:51.000Z</published>
    <updated>2020-06-18T06:41:13.096Z</updated>
    
    <content type="html"><![CDATA[<h2 id="kafka"><a href="#kafka" class="headerlink" title="kafka"></a>kafka</h2><blockquote><p>本文转载自： <a href="https://chenhefei.github.io/2020/04/01/Kafka/Kafka-learning/" target="_blank" rel="noopener">https://chenhefei.github.io/2020/04/01/Kafka/Kafka-learning/</a> </p></blockquote><h3 id="kafka的定义"><a href="#kafka的定义" class="headerlink" title="kafka的定义"></a>kafka的定义</h3><p>Kafka是一个分布式的基于发布/订阅模式的消息队列（Message Queue），主要应用于大数据实时处理领域。</p><h3 id="消息队列有什么好处"><a href="#消息队列有什么好处" class="headerlink" title="消息队列有什么好处"></a>消息队列有什么好处</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1）解耦</span><br><span class="line">允许你独立的扩展或修改两边的处理过程，只要确保它们遵守同样的接口约束。</span><br><span class="line">2）可恢复性</span><br><span class="line">系统的一部分组件失效时，不会影响到整个系统。消息队列降低了进程间的耦合度，所以即使一个处理消息的进程挂掉，加入队列中的消息仍然可以在系统恢复后被处理。</span><br><span class="line">3）缓冲</span><br><span class="line">有助于控制和优化数据流经过系统的速度，解决生产消息和消费消息的处理速度不一致的情况。</span><br><span class="line">4）灵活性 &amp; 峰值处理能力</span><br><span class="line">在访问量剧增的情况下，应用仍然需要继续发挥作用，但是这样的突发流量并不常见。如果为以能处理这类峰值访问为标准来投入资源随时待命无疑是巨大的浪费。使用消息队列能够使关键组件顶住突发的访问压力，而不会因为突发的超负荷的请求而完全崩溃。</span><br><span class="line">5）异步通信</span><br><span class="line">很多时候，用户不想也不需要立即处理消息。消息队列提供了异步处理机制，允许用户把一个消息放入队列，但并不立即处理它。想向队列中放入多少消息就放多少，然后在需要的时候再去处理它们。</span><br></pre></td></tr></table></figure></div><h3 id="消费队列的两种模式"><a href="#消费队列的两种模式" class="headerlink" title="消费队列的两种模式"></a>消费队列的两种模式</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">（1）点对点模式（一对一，消费者主动拉取数据，消息收到后消息清除）</span><br><span class="line">消息生产者生产消息发送到Queue中，然后消息消费者从Queue中取出并且消费消息。</span><br><span class="line">消息被消费以后，queue中不再有存储，所以消息消费者不可能消费到已经被消费的消息。Queue支持存在多个消费者，但是对一个消息而言，只会有一个消费者可以消费。</span><br><span class="line">（2）发布&#x2F;订阅模式（一对多，消费者消费数据之后不会清除消息）</span><br><span class="line">消息生产者（发布）将消息发布到topic中，同时有多个消息消费者（订阅）消费该消息。和点对点方式不同，发布到topic的消息会被所有订阅者消费。</span><br></pre></td></tr></table></figure></div><h3 id="kafka中的相关概念"><a href="#kafka中的相关概念" class="headerlink" title="kafka中的相关概念"></a>kafka中的相关概念</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1）Producer ：消息生产者，就是向kafka broker发消息的客户端；</span><br><span class="line">2）Consumer ：消息消费者，向kafka broker取消息的客户端；</span><br><span class="line">3）Consumer Group （CG）：消费者组，由多个consumer组成。消费者组内每个消费者负责消费不同分区的数据，一个分区只能由一个组内消费者消费；消费者组之间互不影响。所有的消费者都属于某个消费者组，即消费者组是逻辑上的一个订阅者。</span><br><span class="line">4）Broker ：一台kafka服务器就是一个broker。一个集群由多个broker组成。一个broker可以容纳多个topic。</span><br><span class="line">5）Topic ：可以理解为一个队列，生产者和消费者面向的都是一个topic；</span><br><span class="line">6）Partition：为了实现扩展性，一个非常大的topic可以分布到多个broker（即服务器）上，一个topic可以分为多个partition，每个partition是一个有序的队列；</span><br><span class="line">7）Replica：副本，为保证集群中的某个节点发生故障时，该节点上的partition数据不丢失，且kafka仍然能够继续工作，kafka提供了副本机制，一个topic的每个分区都有若干个副本，一个leader和若干个follower。</span><br><span class="line">8）leader：每个分区多个副本的“主”，生产者发送数据的对象，以及消费者消费数据的对象都是leader。</span><br><span class="line">9）follower：每个分区多个副本中的“从”，实时从leader中同步数据，保持和leader数据的同步。leader发生故障时，某个follower会成为新的leader。</span><br></pre></td></tr></table></figure></div><h3 id="kafka配置文件"><a href="#kafka配置文件" class="headerlink" title="kafka配置文件"></a>kafka配置文件</h3><p>位置</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ys@hadoop102 kafka]$ cd config&#x2F;</span><br><span class="line">[ys@hadoop102 config]$ vi server.properties</span><br></pre></td></tr></table></figure></div><p>内容</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">properties</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#broker的全局唯一编号，不能重复</span></span><br><span class="line"><span class="meta">broker.id</span>=<span class="string">0</span></span><br><span class="line"><span class="comment">#删除topic功能使能</span></span><br><span class="line"><span class="meta">delete.topic.enable</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#处理网络请求的线程数量</span></span><br><span class="line"><span class="meta">num.network.threads</span>=<span class="string">3</span></span><br><span class="line"><span class="comment">#用来处理磁盘IO的线程数量</span></span><br><span class="line"><span class="meta">num.io.threads</span>=<span class="string">8</span></span><br><span class="line"><span class="comment">#发送套接字的缓冲区大小</span></span><br><span class="line"><span class="meta">socket.send.buffer.bytes</span>=<span class="string">102400</span></span><br><span class="line"><span class="comment">#接收套接字的缓冲区大小</span></span><br><span class="line"><span class="meta">socket.receive.buffer.bytes</span>=<span class="string">102400</span></span><br><span class="line"><span class="comment">#请求套接字的缓冲区大小</span></span><br><span class="line"><span class="meta">socket.request.max.bytes</span>=<span class="string">104857600</span></span><br><span class="line"><span class="comment">#kafka运行日志存放的路径</span></span><br><span class="line"><span class="meta">log.dirs</span>=<span class="string">/opt/module/kafka/logs</span></span><br><span class="line"><span class="comment">#topic在当前broker上的分区个数</span></span><br><span class="line"><span class="meta">num.partitions</span>=<span class="string">1</span></span><br><span class="line"><span class="comment">#用来恢复和清理data下数据的线程数量</span></span><br><span class="line"><span class="meta">num.recovery.threads.per.data.dir</span>=<span class="string">1</span></span><br><span class="line"><span class="comment">#segment文件保留的最长时间，超时将被删除</span></span><br><span class="line"><span class="meta">log.retention.hours</span>=<span class="string">168</span></span><br><span class="line"><span class="comment">#配置连接Zookeeper集群地址</span></span><br><span class="line"><span class="meta">zookeeper.connect</span>=<span class="string">hadoop102:2181,hadoop103:2181,hadoop104:2181</span></span><br></pre></td></tr></table></figure></div><h3 id="kafka分布式的broker-id配置"><a href="#kafka分布式的broker-id配置" class="headerlink" title="kafka分布式的broker.id配置"></a>kafka分布式的broker.id配置</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plain修改配置文件&#x2F;opt&#x2F;module&#x2F;kafka&#x2F;config&#x2F;server.properties中的broker.id&#x3D;1、broker.id&#x3D;2注：broker.id不得重复</span><br></pre></td></tr></table></figure></div><h3 id="kafka的群起脚本"><a href="#kafka的群起脚本" class="headerlink" title="kafka的群起脚本"></a>kafka的群起脚本</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for i in hadoop102 hadoop103 hadoop104</span><br><span class="line">do</span><br><span class="line">echo "========== $i ==========" </span><br><span class="line">ssh $i '/opt/module/kafka/bin/kafka-server-start.sh -daemon /opt/module/kafka/config/server.properties'</span><br><span class="line">done</span><br></pre></td></tr></table></figure></div><h3 id="kafka的命令行操作命令"><a href="#kafka的命令行操作命令" class="headerlink" title="kafka的命令行操作命令"></a>kafka的命令行操作命令</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">启动</span><br><span class="line">[atguigu@hadoop102 kafka]$ bin&#x2F;kafka-server-start.sh -daemon config&#x2F;server.properties</span><br><span class="line"></span><br><span class="line">查看当前服务器中的所有topic</span><br><span class="line">[atguigu@hadoop102 kafka]$ bin&#x2F;kafka-topics.sh --zookeeper hadoop102:2181 --list</span><br><span class="line"></span><br><span class="line">创建topic</span><br><span class="line">[atguigu@hadoop102 kafka]$ bin&#x2F;kafka-topics.sh --zookeeper hadoop102:2181 --create --replication-factor 3 --partitions 1 --topic first</span><br><span class="line">选项说明：</span><br><span class="line">--topic 定义topic名</span><br><span class="line">--replication-factor  定义副本数</span><br><span class="line">--partitions  定义分区数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">删除topic</span><br><span class="line">[atguigu@hadoop102 kafka]$ bin&#x2F;kafka-topics.sh --zookeeper hadoop102:2181 --delete --topic first</span><br><span class="line">需要server.properties中设置delete.topic.enable&#x3D;true否则只是标记删除。</span><br><span class="line"></span><br><span class="line">发送消息</span><br><span class="line">[atguigu@hadoop102 kafka]$ bin&#x2F;kafka-console-producer.sh --broker-list hadoop102:9092 --topic first</span><br><span class="line">&gt;hello world</span><br><span class="line">&gt;atguigu  atguigu</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">消费消息</span><br><span class="line">[atguigu@hadoop102 kafka]$ bin&#x2F;kafka-console-consumer.sh \</span><br><span class="line">--zookeeper hadoop102:2181 --topic first</span><br><span class="line">[atguigu@hadoop102 kafka]$ bin&#x2F;kafka-console-consumer.sh \</span><br><span class="line">--zookeeper hadoop102:2181 --topic first --consumer.config config&#x2F;consumer.properties 指定消费者的配置文件(可将多个消费者放置在一个组内)</span><br><span class="line">[atguigu@hadoop102 kafka]$ bin&#x2F;kafka-console-consumer.sh \</span><br><span class="line">--bootstrap-server hadoop102:9092 --topic first</span><br><span class="line">[atguigu@hadoop102 kafka]$ bin&#x2F;kafka-console-consumer.sh \</span><br><span class="line">--bootstrap-server hadoop102:9092 --from-beginning --topic first</span><br><span class="line">注 : --from-beginning：会把主题中以往所有的数据都读取出来。</span><br><span class="line"></span><br><span class="line">查看某个Topic的详情</span><br><span class="line">[atguigu@hadoop102 kafka]$ bin&#x2F;kafka-topics.sh --zookeeper hadoop102:2181 --describe --topic first</span><br><span class="line"></span><br><span class="line">修改分区数</span><br><span class="line">[atguigu@hadoop102 kafka]$ bin&#x2F;kafka-topics.sh --zookeeper hadoop102:2181 --alter --topic first --partitions 6</span><br></pre></td></tr></table></figure></div><h3 id="kafka工作流程"><a href="#kafka工作流程" class="headerlink" title="kafka工作流程"></a>kafka工作流程</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Kafka中消息是以topic进行分类的，生产者生产消息，消费者消费消息，都是面向topic的。</span><br><span class="line"></span><br><span class="line">topic是逻辑上的概念，而partition是物理上的概念，每个partition对应于一个log文件，该log文件中存储的就是producer生产的数据。Producer生产的数据会被不断追加到该log文件末端，且每条数据都有自己的offset。消费者组中的每个消费者，都会实时记录自己消费到了哪个offset，以便出错恢复时，从上次的位置继续消费。</span><br><span class="line"></span><br><span class="line">由于生产者生产的消息会不断追加到log文件末尾，为防止log文件过大导致数据定位效率低下，Kafka采取了分片和索引机制，将每个partition分为多个segment。每个segment对应两个文件——“.index”文件和“.log”文件。这些文件位于一个文件夹下，该文件夹的命名规则为：topic名称+分区序号。例如，first这个topic有三个分区，则其对应的文件夹为first-0,first-1,first-2。</span><br><span class="line">如下</span><br><span class="line">00000000000000000000.index</span><br><span class="line">00000000000000000000.log</span><br><span class="line">00000000000000170410.index</span><br><span class="line">00000000000000170410.log</span><br><span class="line">00000000000000239430.index</span><br><span class="line">00000000000000239430.log</span><br><span class="line"></span><br><span class="line">index和log文件以当前segment的第一条消息的offset命名。</span><br><span class="line"></span><br><span class="line">“.index”文件存储大量的索引信息，“.log”文件存储大量的数据，索引文件中的元数据指向对应数据文件中message的物理偏移地址。</span><br></pre></td></tr></table></figure></div><h3 id="kafka生产者的分区分配策略"><a href="#kafka生产者的分区分配策略" class="headerlink" title="kafka生产者的分区分配策略"></a>kafka生产者的分区分配策略</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1）分区的原因</span><br><span class="line">（1）方便在集群中扩展，每个Partition可以通过调整以适应它所在的机器，而一个topic又可以有多个Partition组成，因此整个集群就可以适应任意大小的数据了；</span><br><span class="line">（2）可以提高并发，因为可以以Partition为单位读写了。</span><br><span class="line"></span><br><span class="line">2）分区的原则</span><br><span class="line">我们需要将producer发送的数据封装成一个ProducerRecord对象。</span><br><span class="line">（1）指明 partition 的情况下，直接将指明的值直接作为 partiton 值；</span><br><span class="line">（2）没有指明 partition 值但有 key 的情况下，将 key 的 hash 值与 topic 的 partition 数进行取余得到 partition 值；</span><br><span class="line">（3）既没有 partition 值又没有 key 值的情况下，第一次调用时随机生成一个整数（后面每次调用在这个整数上自增），将这个值与 topic 可用的 partition 总数取余得到 partition 值，也就是常说的 round-robin 算法。</span><br></pre></td></tr></table></figure></div><h3 id="kafka如何保证数据可靠性"><a href="#kafka如何保证数据可靠性" class="headerlink" title="kafka如何保证数据可靠性"></a>kafka如何保证数据可靠性</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">为保证producer发送的数据能可靠的发送到指定的topic，</span><br><span class="line">topic的每个partition收到producer发送的数据后，都需要向producer发送ack（acknowledgement确认收到），</span><br><span class="line">如果producer收到ack，就会进行下一轮的发送，否则重新发送数据。</span><br></pre></td></tr></table></figure></div><h3 id="都有哪些副本数据同步策略-优缺点是什么"><a href="#都有哪些副本数据同步策略-优缺点是什么" class="headerlink" title="都有哪些副本数据同步策略 优缺点是什么"></a>都有哪些副本数据同步策略 优缺点是什么</h3><table><thead><tr><th><strong>方案</strong></th><th><strong>优点</strong></th><th><strong>缺点</strong></th></tr></thead><tbody><tr><td><strong>半数以上完成同步，就发送ack</strong></td><td>延迟低</td><td>选举新的leader时，容忍n台节点的故障，需要2n+1个副本</td></tr><tr><td><strong>全部完成同步，才发送ack</strong></td><td>选举新的leader时，容忍n台节点的故障，需要n+1个副本</td><td>延迟高</td></tr></tbody></table><h3 id="kafka的副本同步策略是什么-这个策略会出现什么问题"><a href="#kafka的副本同步策略是什么-这个策略会出现什么问题" class="headerlink" title="kafka的副本同步策略是什么 这个策略会出现什么问题"></a>kafka的副本同步策略是什么 这个策略会出现什么问题</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Kafka选择了第二种方案，原因如下：</span><br><span class="line">1.同样为了容忍n台节点的故障，第一种方案需要2n+1个副本，而第二种方案只需要n+1个副本，而Kafka的每个分区都有大量的数据，第一种方案会造成大量数据的冗余。</span><br><span class="line">2.虽然第二种方案的网络延迟会比较高，但网络延迟对Kafka的影响较小。</span><br><span class="line"></span><br><span class="line">采用第二种方案之后，设想以下情景：leader收到数据，所有follower都开始同步数据，但有一个follower，因为某种故障，迟迟不能与leader进行同步，那leader就要一直等下去，直到它完成同步，才能发送ack。这个问题怎么解决呢？</span><br></pre></td></tr></table></figure></div><h3 id="kafka中的ISR是什么"><a href="#kafka中的ISR是什么" class="headerlink" title="kafka中的ISR是什么"></a>kafka中的ISR是什么</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Leader维护了一个动态的in-sync replica set (ISR)，意为和leader保持同步的follower集合。</span><br><span class="line"></span><br><span class="line">当ISR中的follower完成数据的同步之后，leader就会给producer发送ack。</span><br><span class="line"></span><br><span class="line">如果follower长时间未向leader同步数据，则该follower将被踢出ISR，</span><br><span class="line"></span><br><span class="line">该时间阈值由replica.lag.time.max.ms参数设定。</span><br><span class="line"></span><br><span class="line">Leader发生故障之后，就会从ISR中选举新的leader。</span><br></pre></td></tr></table></figure></div><h3 id="kafka中的ack应答机制是什么"><a href="#kafka中的ack应答机制是什么" class="headerlink" title="kafka中的ack应答机制是什么"></a>kafka中的ack应答机制是什么</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">对于某些不太重要的数据，对数据的可靠性要求不是很高，能够容忍数据的少量丢失，所以没必要等ISR中的follower全部接收成功。</span><br><span class="line">所以Kafka为用户提供了三种可靠性级别，用户根据对可靠性和延迟的要求进行权衡，选择以下的配置。</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">acks参数配置：</span><br><span class="line">acks：</span><br><span class="line">0：producer不等待broker的ack，这一操作提供了一个最低的延迟，broker一接收到还没有写入磁盘就已经返回，当broker故障时有可能丢失数据；</span><br><span class="line">1：producer等待broker的ack，partition的leader落盘成功后返回ack，如果在follower同步成功之前leader故障，那么将会丢失数据；</span><br><span class="line">-1（all）：producer等待broker的ack，partition的leader和follower全部落盘成功后才返回ack。但是如果在follower同步完成后，broker发送ack之前，leader发生故障，那么会造成数据重复。</span><br></pre></td></tr></table></figure></div><h3 id="kafka如何进行故障处理"><a href="#kafka如何进行故障处理" class="headerlink" title="kafka如何进行故障处理"></a>kafka如何进行故障处理</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LEO：指的是每个副本最大的offset；</span><br><span class="line">HW：指的是消费者能见到的最大的offset，ISR队列中最小的LEO。</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">（1）follower故障follower发生故障后会被临时踢出ISR，待该follower恢复后，follower会读取本地磁盘记录的上次的HW，并将log文件高于HW的部分截取掉，从HW开始向leader进行同步。等该follower的LEO大于等于该Partition的HW，即follower追上leader之后，就可以重新加入ISR了。</span><br><span class="line">（2）leader故障</span><br><span class="line">leader发生故障之后，会从ISR中选出一个新的leader，之后，为保证多个副本之间的数据一致性，其余的follower会先将各自的log文件高于HW的部分截掉，然后从新的leader同步数据。</span><br><span class="line">注意：这只能保证副本之间的数据一致性，并不能保证数据不丢失或者不重复。</span><br></pre></td></tr></table></figure></div><h3 id="kafka消费者的消费方式"><a href="#kafka消费者的消费方式" class="headerlink" title="kafka消费者的消费方式"></a>kafka消费者的消费方式</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">consumer采用pull（拉）模式从broker中读取数据。</span><br><span class="line">push（推）模式很难适应消费速率不同的消费者，因为消息发送速率是由broker决定的。它的目标是尽可能以最快速度传递消息，但是这样很容易造成consumer来不及处理消息，典型的表现就是拒绝服务以及网络拥塞。而pull模式则可以根据consumer的消费能力以适当的速率消费消息。</span><br><span class="line">pull模式不足之处是，如果kafka没有数据，消费者可能会陷入循环中，一直返回空数据。针对这一点，Kafka的消费者在消费数据时会传入一个时长参数timeout，如果当前没有数据可供消费，consumer会等待一段时间之后再返回，这段时长即为timeout。</span><br></pre></td></tr></table></figure></div><h3 id="kafka消费者的分区分配策略"><a href="#kafka消费者的分区分配策略" class="headerlink" title="kafka消费者的分区分配策略"></a>kafka消费者的分区分配策略</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">一个consumer group中有多个consumer，一个 topic有多个partition，所以必然会涉及到partition的分配问题，即确定那个partition由哪个consumer来消费。</span><br><span class="line">Kafka有两种分配策略，一是RoundRobin，一是Range。</span><br></pre></td></tr></table></figure></div><h3 id="kafka消费者如何维护offset"><a href="#kafka消费者如何维护offset" class="headerlink" title="kafka消费者如何维护offset"></a>kafka消费者如何维护offset</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">由于consumer在消费过程中可能会出现断电宕机等故障，consumer恢复后，需要从故障前的位置的继续消费，所以consumer需要实时记录自己消费到了哪个offset，以便故障恢复后继续消费。</span><br><span class="line"></span><br><span class="line">Kafka 0.9版本之前，consumer默认将offset保存在Zookeeper中，从0.9版本开始，consumer默认将offset保存在Kafka一个内置的topic中，该topic为__consumer_offsets。</span><br><span class="line"></span><br><span class="line">1）修改配置文件consumer.properties</span><br><span class="line">exclude.internal.topics&#x3D;false</span><br><span class="line">2）读取offset</span><br><span class="line">0.11.0.0之前版本:</span><br><span class="line">bin&#x2F;kafka-console-consumer.sh --topic __consumer_offsets --zookeeper hadoop102:2181 --formatter &quot;kafka.coordinator.GroupMetadataManager\$OffsetsMessageFormatter&quot; --consumer.config config&#x2F;consumer.properties --from-beginning</span><br><span class="line">0.11.0.0之后版本(含):</span><br><span class="line">bin&#x2F;kafka-console-consumer.sh --topic __consumer_offsets --zookeeper hadoop102:2181 --formatter &quot;kafka.coordinator.group.GroupMetadataManager\$OffsetsMessageFormatter&quot; --consumer.config config&#x2F;consumer.properties --from-beginning</span><br></pre></td></tr></table></figure></div><h3 id="kafka中的消费者组是什么"><a href="#kafka中的消费者组是什么" class="headerlink" title="kafka中的消费者组是什么"></a>kafka中的消费者组是什么</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">配置config&#x2F;consumer.properties文件中的group.id</span><br><span class="line">然后在启动消费者时候使用同一个配置文件 就可以让消费者在一个组内</span><br><span class="line"></span><br><span class="line">同一个消费者组中的消费者，同一时刻只能有一个消费者消费。</span><br><span class="line"></span><br><span class="line">如果消费者组中的消费者多于当前的分区数 会有警告提醒</span><br><span class="line">No broker partitions consumed by consumer thread ...</span><br><span class="line"></span><br><span class="line">如果停止了所有的消费者 那么offset会维护在我们选择的地方(zk中或者是本地) </span><br><span class="line">再次启动消费者会根据选择的GTP(group topic partition所维护的offset位置进行继续消费)</span><br><span class="line"></span><br><span class="line">下图为zk中维护的信息</span><br></pre></td></tr></table></figure></div><p><a href="https://gitee.com/hoffeechen/image/raw/master/img/20200522214846.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://gitee.com/hoffeechen/image/raw/master/img/20200522214846.png" class="lazyload"></a></p><h3 id="kafka为什么能够高效读写数据"><a href="#kafka为什么能够高效读写数据" class="headerlink" title="kafka为什么能够高效读写数据"></a>kafka为什么能够高效读写数据</h3><ul><li>分布式框架</li><li>分区</li><li>顺序写磁盘<ul><li>Kafka的producer生产数据，要写入到log文件中，写的过程是一直追加到文件末端，为顺序写。官网有数据表明，同样的磁盘，顺序写能到600M/s，而随机写只有100K/s。这与磁盘的机械机构有关，顺序写之所以快，是因为其省去了大量磁头寻址的时间。</li></ul></li><li>零复制技术<ul><li><a href="https://gitee.com/hoffeechen/image/raw/master/img/20200522214804.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://gitee.com/hoffeechen/image/raw/master/img/20200522214804.png" class="lazyload"></a></li></ul></li></ul><h3 id="kafka的零拷贝技术如何实现"><a href="#kafka的零拷贝技术如何实现" class="headerlink" title="kafka的零拷贝技术如何实现"></a>kafka的零拷贝技术如何实现</h3><p>kafka中的消费者在读取服务端的数据时，需要将服务端的磁盘文件通过网络发送到消费者进程，网络发送需要经过几种网络节点。如下图所示：</p><p><a href="https://gitee.com/hoffeechen/image/raw/master/img/20200522215536.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://gitee.com/hoffeechen/image/raw/master/img/20200522215536.png" class="lazyload"></a></p><p>传统的读取文件数据并发送到网络的步骤如下：<br>（1）操作系统将数据从磁盘文件中读取到内核空间的页面缓存；<br>（2）应用程序将数据从内核空间读入用户空间缓冲区；<br>（3）应用程序将读到数据写回内核空间并放入socket缓冲区；<br>（4）操作系统将数据从socket缓冲区复制到网卡接口，此时数据才能通过网络发送。</p><p>通常情况下，Kafka的消息会有多个订阅者，生产者发布的消息会被不同的消费者多次消费，为了优化这个流程，Kafka使用了“零拷贝技术”，如下图所示：</p><p><a href="https://gitee.com/hoffeechen/image/raw/master/img/20200522215604.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://gitee.com/hoffeechen/image/raw/master/img/20200522215604.png" class="lazyload"></a></p><p>“零拷贝技术”只用将磁盘文件的数据复制到页面缓存中一次，然后将数据从页面缓存直接发送到网络中（发送给不同的订阅者时，都可以使用同一个页面缓存），避免了重复复制操作。</p><p>如果有10个消费者，传统方式下，数据复制次数为4*10=40次，而使用“零拷贝技术”只需要1+10=11次，一次为从磁盘复制到页面缓存，10次表示10个消费者各自读取一次页面缓存。</p><hr><p>传统的文件拷贝通常需要从用户态去转到核心态，经过read buffer，然后再返回到用户态的应用层buffer，然后再从用户态把数据拷贝到核心态的socket buffer，然后发送到网卡。</p><p><a href="https://gitee.com/hoffeechen/image/raw/master/img/20200522220145.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://gitee.com/hoffeechen/image/raw/master/img/20200522220145.png" class="lazyload"></a></p><p>传统的数据传输需要多次的用户态和核心态之间的切换，而且还要把数据复制多次，最终才打到网卡。</p><p>如果减少了用户态与核心态之间的切换，是不是就会更快了呢？</p><p><a href="https://gitee.com/hoffeechen/image/raw/master/img/20200522220205.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://gitee.com/hoffeechen/image/raw/master/img/20200522220205.png" class="lazyload"></a></p><p>此时我们会发现用户态“空空如也”。数据没有来到用户态，而是直接在核心态就进行了传输，但这样依然还是有多次复制。首先数据被读取到read buffer中，然后发到socket buffer，最后才发到网卡。虽然减少了用户态和核心态的切换，但依然存在多次数据复制。</p><p>如果可以进一步减少数据复制的次数，甚至没有数据复制是不是就会做到最快呢？</p><p><strong>DMA</strong></p><p>别急，这里我们先介绍一个新的武器:DMA。</p><p>DMA，全称叫Direct Memory Access，一种可让某些硬件子系统去直接访问系统主内存，而不用依赖CPU的计算机系统的功能。听着是不是很厉害，跳过CPU，直接访问主内存。传统的内存访问都需要通过CPU的调度来完成。如下图：</p><p><a href="https://gitee.com/hoffeechen/image/raw/master/img/20200522220517.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://gitee.com/hoffeechen/image/raw/master/img/20200522220517.png" class="lazyload"></a></p><p>而DMA，则可以绕过CPU，硬件自己去直接访问系统主内存。如下图：</p><p><a href="https://gitee.com/hoffeechen/image/raw/master/img/20200522220536.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://gitee.com/hoffeechen/image/raw/master/img/20200522220536.png" class="lazyload"></a></p><p>很多硬件都支持DMA，这其中就包括网卡。</p><p><a href="https://gitee.com/hoffeechen/image/raw/master/img/20200522220558.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://gitee.com/hoffeechen/image/raw/master/img/20200522220558.png" class="lazyload"></a></p><p><strong>零拷贝</strong></p><p>回到本文中的文件传输，有了DMA后，就可以实现绝对的零拷贝了，因为网卡是直接去访问系统主内存的。如下图：</p><p><a href="https://gitee.com/hoffeechen/image/raw/master/img/20200522220616.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://gitee.com/hoffeechen/image/raw/master/img/20200522220616.png" class="lazyload"></a></p><p><strong>Java的零拷贝实现</strong></p><p>在Java中的零拷贝实现是在FileChannel中，其中有个方法transferTo(position,fsize,src)。</p><p>传统的文件传输是通过java.io.DataOutputStream，java.io.FileInputStream来实现的，然后通过while循环来读取input，然后写入到output中。</p><p><a href="https://gitee.com/hoffeechen/image/raw/master/img/20200522220646.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://gitee.com/hoffeechen/image/raw/master/img/20200522220646.png" class="lazyload"></a></p><p>零拷贝则是通过java.nio.channels.FileChannel中的transferTo方法来实现的。transferTo方法底层是基于操作系统的sendfile这个system call来实现的（不再需要拷贝到用户态了），sendfile负责把数据从某个fd（file descriptor）传输到另一个fd。</p><p>sendfile：</p><p><a href="https://gitee.com/hoffeechen/image/raw/master/img/20200522220717.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://gitee.com/hoffeechen/image/raw/master/img/20200522220717.png" class="lazyload"></a></p><p><a href="https://gitee.com/hoffeechen/image/raw/master/img/20200522220822.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://gitee.com/hoffeechen/image/raw/master/img/20200522220822.png" class="lazyload"></a></p><p>Java的transferTo：</p><p><a href="https://gitee.com/hoffeechen/image/raw/master/img/20200522220850.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://gitee.com/hoffeechen/image/raw/master/img/20200522220850.png" class="lazyload"></a></p><p><strong>传统方式与零拷贝性能对比</strong></p><p><a href="https://gitee.com/hoffeechen/image/raw/master/img/20200522220906.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://gitee.com/hoffeechen/image/raw/master/img/20200522220906.png" class="lazyload"></a></p><p>可以看出速度快出至少三倍多。Kafka在文件传输的过程中正是使用了零拷贝技术对文件进行拷贝。建议以后多用FileChannel的transferTo吧。</p><p><strong>总结</strong></p><ul><li>传统的文件传输有多次用户态和内核态之间的切换，而且文件在多个buffer之间要复制多次最终才被发送到网卡。</li><li>DMA是一种硬件直接访问系统主内存的技术。</li><li>多种硬件都已使用了DMA技术，其中就包括网卡（NIC）。</li><li>DMA技术让CPU得到解放，让CPU可以不用一直守着来完成文件传输。</li><li>零拷贝技术减少了用户态与内核态之间的切换，让拷贝次数降到最低，从而实现高性能。</li><li>Kafka使用零拷贝技术来进行文件的传输。</li></ul><h3 id="zk在kafka中的作用"><a href="#zk在kafka中的作用" class="headerlink" title="zk在kafka中的作用"></a>zk在kafka中的作用</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Kafka集群中有一个broker会被选举为Controller，负责管理集群broker的上下线，所有topic的分区副本分配和leader选举等工作。</span><br><span class="line">Controller的管理工作都是依赖于Zookeeper的。</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">每个broker都会在zk进行注册</span><br><span class="line">然后KafkaController会实时监听zk中的&#x2F;brokers&#x2F;ids下的节点情况[0,1,2]</span><br><span class="line">如果broker0宕机 ids中的节点会实时变化为[1,2]</span><br><span class="line">KafkaController会更新topic中的leader和isr队列</span><br><span class="line">KafkaController会获取当前可用的isr并从中选出新的leader</span><br></pre></td></tr></table></figure></div><h3 id="kafka的消息发送流程是什么样的"><a href="#kafka的消息发送流程是什么样的" class="headerlink" title="kafka的消息发送流程是什么样的"></a>kafka的消息发送流程是什么样的</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Kafka的Producer发送消息采用的是异步发送的方式。</span><br><span class="line">在消息发送的过程中，涉及到了两个线程——main线程和Sender线程，</span><br><span class="line">以及一个线程共享变量——RecordAccumulator(这个里面有分区)</span><br><span class="line"></span><br><span class="line">main线程将消息发送给RecordAccumulator，</span><br><span class="line">Sender线程不断从RecordAccumulator中拉取消息发送到Kafka broker。</span><br><span class="line"></span><br><span class="line">注意这里面 先走拦截器 再走序列化器 再走分区器</span><br><span class="line">达到batch.size大小或者是linger.ms时间就发到RecordAccumulator中</span><br><span class="line">sender线程去拉取</span><br></pre></td></tr></table></figure></div><p><a href="https://gitee.com/hoffeechen/image/raw/master/img/20200522223103.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://gitee.com/hoffeechen/image/raw/master/img/20200522223103.png" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">相关参数：</span><br><span class="line">batch.size：只有数据积累到batch.size之后，sender才会发送数据。(默认16kb)</span><br><span class="line">linger.ms：如果数据迟迟未达到batch.size，sender等待linger.time之后就会发送数据。</span><br></pre></td></tr></table></figure></div><h3 id="如何使用kafka-API-实现异步消息发送"><a href="#如何使用kafka-API-实现异步消息发送" class="headerlink" title="如何使用kafka API 实现异步消息发送"></a>如何使用kafka API 实现异步消息发送</h3><h4 id="准备知识"><a href="#准备知识" class="headerlink" title="准备知识"></a>准备知识</h4><p>需要用到的类：</p><p><strong>KafkaProducer</strong>：需要创建一个生产者对象，用来发送数据</p><p><strong>ProducerConfig</strong>：获取所需的一系列配置参数</p><p><strong>ProducerRecord</strong>：每条数据都要封装成一个ProducerRecord对象</p><p>几个比较重要的配置项</p><p>//kafka集群，broker-list<br>props.put(“bootstrap.servers”, “hadoop102:9092”);</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">props.put(<span class="string">"acks"</span>, <span class="string">"all"</span>); <span class="comment">//重试次数 props.put("retries", 1); //批次大小 props.put("batch.size", 16384); //等待时间 props.put("linger.ms", 1); //RecordAccumulator缓冲区大小 props.put("buffer.memory", 33554432); props.put("key.serializer", "org.apache.kafka.common.serialization.StringSerializer");</span></span><br></pre></td></tr></table></figure></div><ul><li>kafka集群位置</li><li>批次大小</li><li>批次等待时间</li><li>重试次数</li><li>缓冲区大小</li><li>序列化器(<code>org\apache\kafka\common\serialization\Serializer.java</code>)</li></ul><p><a href="https://gitee.com/hoffeechen/image/raw/master/img/20200523030013.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://gitee.com/hoffeechen/image/raw/master/img/20200523030013.png" class="lazyload"></a></p><p><a href="https://gitee.com/hoffeechen/image/raw/master/img/20200522224718.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://gitee.com/hoffeechen/image/raw/master/img/20200522224718.png" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">properties</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">org\apache\kafka\clients\producer\ProducerConfig.java</span></span><br><span class="line"></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String BOOTSTRAP_SERVERS_CONFIG = "bootstrap.servers";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String METADATA_MAX_AGE_CONFIG = "metadata.max.age.ms";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String BATCH_SIZE_CONFIG = "batch.size";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String ACKS_CONFIG = "acks";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String LINGER_MS_CONFIG = "linger.ms";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String CLIENT_ID_CONFIG = "client.id";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String SEND_BUFFER_CONFIG = "send.buffer.bytes";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String RECEIVE_BUFFER_CONFIG = "receive.buffer.bytes";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String MAX_REQUEST_SIZE_CONFIG = "max.request.size";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String RECONNECT_BACKOFF_MS_CONFIG = "reconnect.backoff.ms";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String RECONNECT_BACKOFF_MAX_MS_CONFIG = "reconnect.backoff.max.ms";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String MAX_BLOCK_MS_CONFIG = "max.block.ms";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String BUFFER_MEMORY_CONFIG = "buffer.memory";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String RETRY_BACKOFF_MS_CONFIG = "retry.backoff.ms";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String COMPRESSION_TYPE_CONFIG = "compression.type";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String METRICS_SAMPLE_WINDOW_MS_CONFIG = "metrics.sample.window.ms";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String METRICS_NUM_SAMPLES_CONFIG = "metrics.num.samples";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String METRICS_RECORDING_LEVEL_CONFIG = "metrics.recording.level";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String METRIC_REPORTER_CLASSES_CONFIG = "metric.reporters";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION = "max.in.flight.requests.per.connection";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String RETRIES_CONFIG = "retries";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String KEY_SERIALIZER_CLASS_CONFIG = "key.serializer";</span></span><br><span class="line"></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String VALUE_SERIALIZER_CLASS_CONFIG = "value.serializer";</span></span><br><span class="line"></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String CONNECTIONS_MAX_IDLE_MS_CONFIG = "connections.max.idle.ms";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String PARTITIONER_CLASS_CONFIG = "partitioner.class";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String REQUEST_TIMEOUT_MS_CONFIG = "request.timeout.ms";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String INTERCEPTOR_CLASSES_CONFIG = "interceptor.classes";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String ENABLE_IDEMPOTENCE_CONFIG = "enable.idempotence";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String TRANSACTION_TIMEOUT_CONFIG = "transaction.timeout.ms";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String TRANSACTIONAL_ID_CONFIG = "transactional.id";</span></span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">properties</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">org\apache\kafka\clients\consumer\ConsumerConfig.java</span></span><br><span class="line"></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String GROUP_ID_CONFIG = "group.id";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String MAX_POLL_RECORDS_CONFIG = "max.poll.records";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String MAX_POLL_INTERVAL_MS_CONFIG = "max.poll.interval.ms";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String SESSION_TIMEOUT_MS_CONFIG = "session.timeout.ms";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String HEARTBEAT_INTERVAL_MS_CONFIG = "heartbeat.interval.ms";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String BOOTSTRAP_SERVERS_CONFIG = "bootstrap.servers";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String ENABLE_AUTO_COMMIT_CONFIG = "enable.auto.commit";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String AUTO_COMMIT_INTERVAL_MS_CONFIG = "auto.commit.interval.ms";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String PARTITION_ASSIGNMENT_STRATEGY_CONFIG = "partition.assignment.strategy";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String AUTO_OFFSET_RESET_CONFIG = "auto.offset.reset";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String FETCH_MIN_BYTES_CONFIG = "fetch.min.bytes";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String FETCH_MAX_BYTES_CONFIG = "fetch.max.bytes";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final int DEFAULT_FETCH_MAX_BYTES = 52428800;</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String FETCH_MAX_WAIT_MS_CONFIG = "fetch.max.wait.ms";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String METADATA_MAX_AGE_CONFIG = "metadata.max.age.ms";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String MAX_PARTITION_FETCH_BYTES_CONFIG = "max.partition.fetch.bytes";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final int DEFAULT_MAX_PARTITION_FETCH_BYTES = 1048576;</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String SEND_BUFFER_CONFIG = "send.buffer.bytes";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String RECEIVE_BUFFER_CONFIG = "receive.buffer.bytes";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String CLIENT_ID_CONFIG = "client.id";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String RECONNECT_BACKOFF_MS_CONFIG = "reconnect.backoff.ms";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String RECONNECT_BACKOFF_MAX_MS_CONFIG = "reconnect.backoff.max.ms";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String RETRY_BACKOFF_MS_CONFIG = "retry.backoff.ms";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String METRICS_SAMPLE_WINDOW_MS_CONFIG = "metrics.sample.window.ms";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String METRICS_NUM_SAMPLES_CONFIG = "metrics.num.samples";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String METRICS_RECORDING_LEVEL_CONFIG = "metrics.recording.level";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String METRIC_REPORTER_CLASSES_CONFIG = "metric.reporters";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String CHECK_CRCS_CONFIG = "check.crcs";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String KEY_DESERIALIZER_CLASS_CONFIG = "key.deserializer";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String VALUE_DESERIALIZER_CLASS_CONFIG = "value.deserializer";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String CONNECTIONS_MAX_IDLE_MS_CONFIG = "connections.max.idle.ms";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String REQUEST_TIMEOUT_MS_CONFIG = "request.timeout.ms";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String INTERCEPTOR_CLASSES_CONFIG = "interceptor.classes";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String EXCLUDE_INTERNAL_TOPICS_CONFIG = "exclude.internal.topics";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final boolean DEFAULT_EXCLUDE_INTERNAL_TOPICS = true;</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String ISOLATION_LEVEL_CONFIG = "isolation.level";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String DEFAULT_ISOLATION_LEVEL;</span></span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">properties</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">org\apache\kafka\clients\CommonClientConfigs.java</span></span><br><span class="line"></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String BOOTSTRAP_SERVERS_CONFIG = "bootstrap.servers";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String METADATA_MAX_AGE_CONFIG = "metadata.max.age.ms";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String SEND_BUFFER_CONFIG = "send.buffer.bytes";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String RECEIVE_BUFFER_CONFIG = "receive.buffer.bytes";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String CLIENT_ID_CONFIG = "client.id";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String RECONNECT_BACKOFF_MS_CONFIG = "reconnect.backoff.ms";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String RECONNECT_BACKOFF_MAX_MS_CONFIG = "reconnect.backoff.max.ms";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String RETRY_BACKOFF_MS_CONFIG = "retry.backoff.ms";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String METRICS_SAMPLE_WINDOW_MS_CONFIG = "metrics.sample.window.ms";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String METRICS_NUM_SAMPLES_CONFIG = "metrics.num.samples";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String METRICS_RECORDING_LEVEL_CONFIG = "metrics.recording.level";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String METRIC_REPORTER_CLASSES_CONFIG = "metric.reporters";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String SECURITY_PROTOCOL_CONFIG = "security.protocol";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String DEFAULT_SECURITY_PROTOCOL = "PLAINTEXT";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String CONNECTIONS_MAX_IDLE_MS_CONFIG = "connections.max.idle.ms";</span></span><br><span class="line"><span class="attr">public</span> <span class="string">static final String REQUEST_TIMEOUT_MS_CONFIG = "request.timeout.ms";</span></span><br></pre></td></tr></table></figure></div><h4 id="不带回调的API"><a href="#不带回调的API" class="headerlink" title="不带回调的API"></a>不带回调的API</h4><p><a href="https://gitee.com/hoffeechen/image/raw/master/img/20200523005738.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://gitee.com/hoffeechen/image/raw/master/img/20200523005738.png" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.kafka;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomProducer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 整个配置中的key可以使用ProducerConfig中定义的常量</span></span><br><span class="line">        <span class="comment">//kafka集群，broker-list</span></span><br><span class="line">        props.put(<span class="string">"bootstrap.servers"</span>, <span class="string">"hadoop102:9092"</span>);</span><br><span class="line"></span><br><span class="line">        props.put(<span class="string">"acks"</span>, <span class="string">"all"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//重试次数</span></span><br><span class="line">        props.put(<span class="string">"retries"</span>, <span class="number">1</span>); </span><br><span class="line"></span><br><span class="line">        <span class="comment">//批次大小</span></span><br><span class="line">        props.put(<span class="string">"batch.size"</span>, <span class="number">16384</span>); </span><br><span class="line"></span><br><span class="line">        <span class="comment">//等待时间</span></span><br><span class="line">        props.put(<span class="string">"linger.ms"</span>, <span class="number">1</span>); </span><br><span class="line"></span><br><span class="line">        <span class="comment">//RecordAccumulator缓冲区大小</span></span><br><span class="line">        props.put(<span class="string">"buffer.memory"</span>, <span class="number">33554432</span>);</span><br><span class="line"></span><br><span class="line">        props.put(<span class="string">"key.serializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringSerializer"</span>);</span><br><span class="line">        props.put(<span class="string">"value.serializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringSerializer"</span>);</span><br><span class="line"></span><br><span class="line">        Producer&lt;String, String&gt; producer = <span class="keyword">new</span> KafkaProducer&lt;&gt;(props);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            producer.send(<span class="keyword">new</span> ProducerRecord&lt;String, String&gt;(<span class="string">"first"</span>, Integer.toString(i), Integer.toString(i)));</span><br><span class="line">            <span class="comment">// 轮循 这个会用到分区器 </span></span><br><span class="line">            producer.send(<span class="keyword">new</span> ProducerRecord(<span class="string">"second"</span>,<span class="string">"value++&gt;"</span>+i));</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 根据给的key进行hash 然后放在不同的分区 这个会使用到分区器</span></span><br><span class="line">            producer.send(<span class="keyword">new</span> ProducerRecord(<span class="string">"second"</span>,<span class="string">"key"</span>+i,<span class="string">"value==&gt;"</span>+i));</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 具体指定了分区号 就不再使用到key 这个不会用到分区器</span></span><br><span class="line">            <span class="keyword">if</span>(i&lt;<span class="number">5</span>)&#123;</span><br><span class="line">                producer.send(<span class="keyword">new</span> ProducerRecord(<span class="string">"second"</span>,<span class="string">"key"</span>+i,<span class="string">"value**&gt;"</span>+i));</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                producer.send(<span class="keyword">new</span> ProducerRecord(<span class="string">"second"</span>,<span class="string">"key"</span>+i,<span class="string">"value^^&gt;"</span>+i));</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">               </span><br><span class="line"></span><br><span class="line">        producer.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分区器源码解读</span></span><br><span class="line">org\apache\kafka\clients\producer\Partitioner.java</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Partitioner</span> <span class="keyword">extends</span> <span class="title">Configurable</span>, <span class="title">Closeable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(String topic, Object key, <span class="keyword">byte</span>[] keyBytes, Object value, <span class="keyword">byte</span>[] valueBytes, Cluster cluster)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//唯一实现类</span></span><br><span class="line">org\apache\kafka\clients\producer\internals\DefaultPartitioner.java</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultPartitioner</span> <span class="keyword">implements</span> <span class="title">Partitioner</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 传进来的是topic key 还有序列化后的key value 序列化后的value</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(String topic, Object key, <span class="keyword">byte</span>[] keyBytes, Object value, <span class="keyword">byte</span>[] valueBytes, Cluster cluster)</span> </span>&#123;</span><br><span class="line">        List&lt;PartitionInfo&gt; partitions = cluster.partitionsForTopic(topic);</span><br><span class="line">        <span class="keyword">int</span> numPartitions = partitions.size();</span><br><span class="line">        <span class="comment">//如果key是空的 后面的逻辑用了自增然后对分区取余 其实就是轮循</span></span><br><span class="line">        <span class="keyword">if</span> (keyBytes == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> nextValue = nextValue(topic);</span><br><span class="line">            List&lt;PartitionInfo&gt; availablePartitions = cluster.availablePartitionsForTopic(topic);</span><br><span class="line">            <span class="keyword">if</span> (availablePartitions.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> part = Utils.toPositive(nextValue) % availablePartitions.size();</span><br><span class="line">                <span class="keyword">return</span> availablePartitions.get(part).partition();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// no partitions are available, give a non-available partition</span></span><br><span class="line">                <span class="keyword">return</span> Utils.toPositive(nextValue) % numPartitions;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果key不是空的 将keyBytes传进去然后做hash murmur2是一种哈希算法</span></span><br><span class="line">            <span class="comment">// hash the keyBytes to choose a partition</span></span><br><span class="line">            <span class="keyword">return</span> Utils.toPositive(Utils.murmur2(keyBytes)) % numPartitions;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="带回调的API"><a href="#带回调的API" class="headerlink" title="带回调的API"></a>带回调的API</h4><p><a href="https://gitee.com/hoffeechen/image/raw/master/img/20200523005738.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://gitee.com/hoffeechen/image/raw/master/img/20200523005738.png" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">跟上面不同的就是在使用send方法时候 带上一个回调函数</span><br><span class="line">    <span class="comment">// 回调方法:当前消息发出后 不管是消息成功发送还是发送失败 都会执行该回调方法</span></span><br><span class="line">    <span class="comment">// metadata 当前消息的元数据</span></span><br><span class="line">    <span class="comment">// metadata能拿到当前分区的各种数据 如下图所示</span></span><br><span class="line">    <span class="comment">// 偏移量 分区 主题 时间戳 等等</span></span><br><span class="line">    <span class="comment">// exception 当消息发送失败 会返回该异常</span></span><br></pre></td></tr></table></figure></div><p><a href="https://gitee.com/hoffeechen/image/raw/master/img/20200523010150.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://gitee.com/hoffeechen/image/raw/master/img/20200523010150.png" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org\apache\kafka\clients\producer\Callback.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callback</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompletion</span><span class="params">(RecordMetadata metadata, Exception exception)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这是一个接口 里面有一个方法</span></span><br><span class="line"></span><br><span class="line">它有两个实现类</span><br></pre></td></tr></table></figure></div><p><a href="https://gitee.com/hoffeechen/image/raw/master/img/20200523010746.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://gitee.com/hoffeechen/image/raw/master/img/20200523010746.png" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例 带回调的API</span></span><br><span class="line"><span class="keyword">package</span> com.atguigu.kafka.producer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Future;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCallBackProducer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1. 创建配置对象</span></span><br><span class="line">        Properties props  = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//kafka集群的位置</span></span><br><span class="line">        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,<span class="string">"hadoop102:9092"</span>);</span><br><span class="line">        <span class="comment">//ack级别</span></span><br><span class="line">        props.put(ProducerConfig.ACKS_CONFIG,<span class="string">"all"</span>);</span><br><span class="line">        <span class="comment">//重试次数</span></span><br><span class="line">        props.put(ProducerConfig.RETRIES_CONFIG,<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//批次大小</span></span><br><span class="line">        props.put(ProducerConfig.BATCH_SIZE_CONFIG,<span class="number">16384</span>);</span><br><span class="line">        <span class="comment">//等待时间</span></span><br><span class="line">        props.put(ProducerConfig.LINGER_MS_CONFIG,<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//缓冲区大小</span></span><br><span class="line">        props.put(ProducerConfig.BUFFER_MEMORY_CONFIG,<span class="number">33554432</span>);</span><br><span class="line">        <span class="comment">//k v 序列化器</span></span><br><span class="line">        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,<span class="string">"org.apache.kafka.common.serialization.StringSerializer"</span>);</span><br><span class="line">        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,<span class="string">"org.apache.kafka.common.serialization.StringSerializer"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 创建生产者对象</span></span><br><span class="line">        KafkaProducer&lt;String,String&gt; producer = <span class="keyword">new</span> KafkaProducer&lt;String, String&gt;(props);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.生产数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span> ; i++) &#123;</span><br><span class="line">            producer.send(<span class="keyword">new</span> ProducerRecord&lt;&gt;(<span class="string">"second"</span>, <span class="string">"atguigu@@@@@"</span> + i), <span class="keyword">new</span> Callback() &#123;</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * 回调方法: 当前的消息发送出去以后，会执行回调方法。</span></span><br><span class="line"><span class="comment">                 * <span class="doctag">@param</span> metadata  当前消息的元数据信息。</span></span><br><span class="line"><span class="comment">                 * <span class="doctag">@param</span> exception 当发送失败，会返回异常。</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompletion</span><span class="params">(RecordMetadata metadata, Exception exception)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (exception == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="comment">//发送成功</span></span><br><span class="line">                        System.out.println(metadata.topic() + <span class="string">" -- "</span> + metadata.partition() + <span class="string">" -- "</span> + metadata.offset());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="comment">// TimeUnit.MILLISECONDS.sleep(100);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭</span></span><br><span class="line">        producer.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="kafka-API中没有写producer-close-为什么读不到数据-也没有回调方法"><a href="#kafka-API中没有写producer-close-为什么读不到数据-也没有回调方法" class="headerlink" title="kafka API中没有写producer.close()为什么读不到数据 也没有回调方法"></a>kafka API中没有写producer.close()为什么读不到数据 也没有回调方法</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">这是因为异步发送消息的原因</span><br><span class="line"></span><br><span class="line">main线程在发送完数据之后就结束了 这个时间小于了批次拉取设置的时间1ms </span><br><span class="line"></span><br><span class="line">sender线程去拉取数据的同时需要执行main线程中的回调方法 </span><br><span class="line">但是现在main线程已经关闭 所以无法执行回调方法</span><br><span class="line"></span><br><span class="line">如果我们不写close方法 而是让main线程休眠100ms 这时sender就能在这个时间内拉取到数据并执行回调方法</span><br><span class="line"></span><br><span class="line">所以close方法肯定会等待sender线程拉取数据完成后再进行关闭</span><br><span class="line">具体实现可以看close()方法的源码 如下</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org\apache\kafka\clients\producer\KafkaProducer.java</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Close this producer. This method blocks until all previously sent requests complete.</span></span><br><span class="line"><span class="comment">     * This method is equivalent to &lt;code&gt;close(Long.MAX_VALUE, TimeUnit.MILLISECONDS)&lt;/code&gt;.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;strong&gt;If close() is called from &#123;<span class="doctag">@link</span> Callback&#125;, a warning message will be logged and close(0, TimeUnit.MILLISECONDS)</span></span><br><span class="line"><span class="comment">     * will be called instead. We do this because the sender thread would otherwise try to join itself and</span></span><br><span class="line"><span class="comment">     * block forever.&lt;/strong&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptException If the thread is interrupted while blocked</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//关闭此生产者。 此方法一直阻塞所有以前发送的请求完成。 此方法等效于close(Long.MAX_VALUE, TimeUnit.MILLISECONDS) 如果关闭（）被从调用Callback ，警告消息将被记录并关闭（0，TimeUnit.MILLISECONDS）将被代替调用。 我们这样做是因为发件人线程否则将尝试加入自己和永远阻塞。</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        close(Long.MAX_VALUE, TimeUnit.MILLISECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This method waits up to &lt;code&gt;timeout&lt;/code&gt; for the producer to complete the sending of all incomplete requests.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * If the producer is unable to complete all requests before the timeout expires, this method will fail</span></span><br><span class="line"><span class="comment">     * any unsent and unacknowledged records immediately.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * If invoked from within a &#123;<span class="doctag">@link</span> Callback&#125; this method will not block and will be equivalent to</span></span><br><span class="line"><span class="comment">     * &lt;code&gt;close(0, TimeUnit.MILLISECONDS)&lt;/code&gt;. This is done since no further sending will happen while</span></span><br><span class="line"><span class="comment">     * blocking the I/O thread of the producer.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout The maximum time to wait for producer to complete any pending requests. The value should be</span></span><br><span class="line"><span class="comment">     *                non-negative. Specifying a timeout of zero means do not wait for pending send requests to complete.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeUnit The time unit for the &lt;code&gt;timeout&lt;/code&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptException If the thread is interrupted while blocked</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException If the &lt;code&gt;timeout&lt;/code&gt; is negative.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">// 这种方法最多等待timeout的生产者完成所有未完成的请求的发送。</span></span><br><span class="line"><span class="comment">// 如果生产者是无法完成所有请求超时到期之前，此方法将立即失败任何未发送和未确认的记录。</span></span><br><span class="line"><span class="comment">// 如果从内调用Callback此方法不会阻止和将等效于close(0, TimeUnit.MILLISECONDS) 这样做是因为同时阻断生产者的I/O线程没有进一步的发送会发生</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit timeUnit)</span> </span>&#123;</span><br><span class="line">        close(timeout, timeUnit, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit timeUnit, <span class="keyword">boolean</span> swallowException)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (timeout &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"The timeout cannot be negative."</span>);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">"Closing the Kafka producer with timeoutMillis = &#123;&#125; ms."</span>, timeUnit.toMillis(timeout));</span><br><span class="line">        <span class="comment">// this will keep track of the first encountered exception</span></span><br><span class="line">        AtomicReference&lt;Throwable&gt; firstException = <span class="keyword">new</span> AtomicReference&lt;&gt;();</span><br><span class="line">        <span class="keyword">boolean</span> invokedFromCallback = Thread.currentThread() == <span class="keyword">this</span>.ioThread;</span><br><span class="line">        <span class="keyword">if</span> (timeout &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (invokedFromCallback) &#123;</span><br><span class="line">                log.warn(<span class="string">"Overriding close timeout &#123;&#125; ms to 0 ms in order to prevent useless blocking due to self-join. "</span> +</span><br><span class="line">                        <span class="string">"This means you have incorrectly invoked close with a non-zero timeout from the producer call-back."</span>, timeout);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// Try to close gracefully.</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.sender != <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">this</span>.sender.initiateClose();</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.ioThread != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="keyword">this</span>.ioThread.join(timeUnit.toMillis(timeout));</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException t) &#123;</span><br><span class="line">                        firstException.compareAndSet(<span class="keyword">null</span>, t);</span><br><span class="line">                        log.error(<span class="string">"Interrupted while joining ioThread"</span>, t);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.sender != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.ioThread != <span class="keyword">null</span> &amp;&amp; <span class="keyword">this</span>.ioThread.isAlive()) &#123;</span><br><span class="line">            log.info(<span class="string">"Proceeding to force close the producer since pending requests could not be completed "</span> +</span><br><span class="line">                    <span class="string">"within timeout &#123;&#125; ms."</span>, timeout);</span><br><span class="line">            <span class="keyword">this</span>.sender.forceClose();</span><br><span class="line">            <span class="comment">// Only join the sender thread when not calling from callback.</span></span><br><span class="line">            <span class="comment">// 仅当不从回调调用时才加入发送者线程。</span></span><br><span class="line">            <span class="keyword">if</span> (!invokedFromCallback) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">this</span>.ioThread.join();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    firstException.compareAndSet(<span class="keyword">null</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ClientUtils.closeQuietly(interceptors, <span class="string">"producer interceptors"</span>, firstException);</span><br><span class="line">        ClientUtils.closeQuietly(metrics, <span class="string">"producer metrics"</span>, firstException);</span><br><span class="line">        ClientUtils.closeQuietly(keySerializer, <span class="string">"producer keySerializer"</span>, firstException);</span><br><span class="line">        ClientUtils.closeQuietly(valueSerializer, <span class="string">"producer valueSerializer"</span>, firstException);</span><br><span class="line">        ClientUtils.closeQuietly(partitioner, <span class="string">"producer partitioner"</span>, firstException);</span><br><span class="line">        AppInfoParser.unregisterAppInfo(JMX_PREFIX, clientId);</span><br><span class="line">        log.debug(<span class="string">"The Kafka producer has closed."</span>);</span><br><span class="line">        <span class="keyword">if</span> (firstException.get() != <span class="keyword">null</span> &amp;&amp; !swallowException)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> KafkaException(<span class="string">"Failed to close kafka producer"</span>, firstException.get());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><h3 id="如何使用kafka-API-实现同步消息发送"><a href="#如何使用kafka-API-实现同步消息发送" class="headerlink" title="如何使用kafka API 实现同步消息发送"></a>如何使用kafka API 实现同步消息发送</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">同步发送的意思就是，一条消息发送之后，会阻塞当前线程，直至返回ack。</span><br><span class="line">由于send方法返回的是一个Future对象，根据Futrue对象的特点，我们也可以实现同步发送的效果，只需在调用Future对象的get方法即可。</span><br><span class="line"></span><br><span class="line">区别就在于在send方法处拿到返回值future</span><br><span class="line">然后调用future中的get方法</span><br><span class="line">调用此方法就会阻塞当前线程 一直等到结果返回</span><br><span class="line"></span><br><span class="line">java\util\concurrent\Future.java</span><br></pre></td></tr></table></figure></div><p><a href="https://gitee.com/hoffeechen/image/raw/master/img/20200523014826.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://gitee.com/hoffeechen/image/raw/master/img/20200523014826.png" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.kafka.producer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Future;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCallBackProducer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1. 创建配置对象</span></span><br><span class="line">        Properties props  = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//kafka集群的位置</span></span><br><span class="line">        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,<span class="string">"hadoop102:9092"</span>);</span><br><span class="line">        <span class="comment">//ack级别</span></span><br><span class="line">        props.put(ProducerConfig.ACKS_CONFIG,<span class="string">"all"</span>);</span><br><span class="line">        <span class="comment">//重试次数</span></span><br><span class="line">        props.put(ProducerConfig.RETRIES_CONFIG,<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//批次大小</span></span><br><span class="line">        props.put(ProducerConfig.BATCH_SIZE_CONFIG,<span class="number">16384</span>);</span><br><span class="line">        <span class="comment">//等待时间</span></span><br><span class="line">        props.put(ProducerConfig.LINGER_MS_CONFIG,<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//缓冲区大小</span></span><br><span class="line">        props.put(ProducerConfig.BUFFER_MEMORY_CONFIG,<span class="number">33554432</span>);</span><br><span class="line">        <span class="comment">//k v 序列化器</span></span><br><span class="line">        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,<span class="string">"org.apache.kafka.common.serialization.StringSerializer"</span>);</span><br><span class="line">        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,<span class="string">"org.apache.kafka.common.serialization.StringSerializer"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 创建生产者对象</span></span><br><span class="line">        KafkaProducer&lt;String,String&gt; producer = <span class="keyword">new</span> KafkaProducer&lt;String, String&gt;(props);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.生产数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span> ; i++) &#123;</span><br><span class="line">            Future&lt;RecordMetadata&gt; future = producer.send(<span class="keyword">new</span> ProducerRecord&lt;&gt;(<span class="string">"second"</span>, <span class="string">"atguigu@@@@@"</span> + i), <span class="keyword">new</span> Callback() &#123;</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * 回调方法: 当前的消息发送出去以后，会执行回调方法。</span></span><br><span class="line"><span class="comment">                 * <span class="doctag">@param</span> metadata  当前消息的元数据信息。</span></span><br><span class="line"><span class="comment">                 * <span class="doctag">@param</span> exception 当发送失败，会返回异常。</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompletion</span><span class="params">(RecordMetadata metadata, Exception exception)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (exception == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="comment">//发送成功</span></span><br><span class="line">                        System.out.println(metadata.topic() + <span class="string">" -- "</span> + metadata.partition() + <span class="string">" -- "</span> + metadata.offset());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">// 发送一个之后阻塞线程等待返回结果才继续发送下一个</span></span><br><span class="line">            <span class="comment">// 阻塞等待 ， 同步发送</span></span><br><span class="line">            <span class="comment">// 此时会发现结果严格按照发送的顺序</span></span><br><span class="line">            RecordMetadata recordMetadata = future.get();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭</span></span><br><span class="line">        producer.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="kafka的分区器怎么写-如何自定义分区器"><a href="#kafka的分区器怎么写-如何自定义分区器" class="headerlink" title="kafka的分区器怎么写 如何自定义分区器"></a>kafka的分区器怎么写 如何自定义分区器</h3><ul><li>继承<code>Partitioner</code></li><li>重写三个方法<code>configure() partition() close()</code></li></ul><blockquote><p>可以根据传进的key分区 也可根据value分区</p><p>在定义好自己的分区器之后 还要再配置中添加分区器的全类名 否则会走默认的分区器</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">系统默认分区器</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultPartitioner</span> <span class="keyword">implements</span> <span class="title">Partitioner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConcurrentMap&lt;String, AtomicInteger&gt; topicCounterMap = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(Map&lt;String, ?&gt; configs)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Compute the partition for the given record.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> topic The topic name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key The key to partition on (or null if no key)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyBytes serialized key to partition on (or null if no key)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value The value to partition on or null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> valueBytes serialized value to partition on or null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cluster The current cluster metadata</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(String topic, Object key, <span class="keyword">byte</span>[] keyBytes, Object value, <span class="keyword">byte</span>[] valueBytes, Cluster cluster)</span> </span>&#123;</span><br><span class="line">        List&lt;PartitionInfo&gt; partitions = cluster.partitionsForTopic(topic);</span><br><span class="line">        <span class="keyword">int</span> numPartitions = partitions.size();</span><br><span class="line">        <span class="keyword">if</span> (keyBytes == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> nextValue = nextValue(topic);</span><br><span class="line">            List&lt;PartitionInfo&gt; availablePartitions = cluster.availablePartitionsForTopic(topic);</span><br><span class="line">            <span class="keyword">if</span> (availablePartitions.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> part = Utils.toPositive(nextValue) % availablePartitions.size();</span><br><span class="line">                <span class="keyword">return</span> availablePartitions.get(part).partition();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// no partitions are available, give a non-available partition</span></span><br><span class="line">                <span class="keyword">return</span> Utils.toPositive(nextValue) % numPartitions;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// hash the keyBytes to choose a partition</span></span><br><span class="line">            <span class="keyword">return</span> Utils.toPositive(Utils.murmur2(keyBytes)) % numPartitions;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">nextValue</span><span class="params">(String topic)</span> </span>&#123;</span><br><span class="line">        AtomicInteger counter = topicCounterMap.get(topic);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == counter) &#123;</span><br><span class="line">            counter = <span class="keyword">new</span> AtomicInteger(ThreadLocalRandom.current().nextInt());</span><br><span class="line">            AtomicInteger currentCounter = topicCounterMap.putIfAbsent(topic, counter);</span><br><span class="line">            <span class="keyword">if</span> (currentCounter != <span class="keyword">null</span>) &#123;</span><br><span class="line">                counter = currentCounter;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> counter.getAndIncrement();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单实现一个分区器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPartitioner</span> <span class="keyword">implements</span> <span class="title">Partitioner</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(String topic, Object key, <span class="keyword">byte</span>[] keyBytes, Object value, <span class="keyword">byte</span>[] valueBytes, Cluster cluster)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>) &#123; <span class="comment">// key为空 到0号分区</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// key不为空 到1号分区</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(Map&lt;String, ?&gt; configs)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果要使用自己定义的分区器 要在配置中指定分区器并传入分区器的全类名</span></span><br><span class="line">props.put(ProducerConfig.PARTITIONER_CLASS_CONFIG,<span class="string">"com.atguigu.kafka.partitioner.MyPartitioner"</span>);</span><br></pre></td></tr></table></figure></div><h3 id="kafka的消费者需要注意的主要问题是什么"><a href="#kafka的消费者需要注意的主要问题是什么" class="headerlink" title="kafka的消费者需要注意的主要问题是什么"></a>kafka的消费者需要注意的主要问题是什么</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Consumer消费数据时的可靠性是很容易保证的，因为数据在Kafka中是持久化的，故不用担心数据丢失问题。</span><br><span class="line"></span><br><span class="line">由于consumer在消费过程中可能会出现断电宕机等故障，consumer恢复后，需要从故障前的位置的继续消费，所以consumer需要实时记录自己消费到了哪个offset，以便故障恢复后继续消费。</span><br><span class="line"></span><br><span class="line">所以offset的维护是Consumer消费数据是必须考虑的问题。</span><br></pre></td></tr></table></figure></div><h3 id="如何使用kafka-API-实现消息接收-消费者"><a href="#如何使用kafka-API-实现消息接收-消费者" class="headerlink" title="如何使用kafka API 实现消息接收(消费者)"></a>如何使用kafka API 实现消息接收(消费者)</h3><h4 id="准备知识-1"><a href="#准备知识-1" class="headerlink" title="准备知识"></a>准备知识</h4><p>需要用到的类：</p><p><strong>KafkaConsumer</strong>：需要创建一个消费者对象，用来消费数据</p><p><strong>ConsumerConfig</strong>：获取所需的一系列配置参数</p><p><strong>ConsuemrRecord</strong>：每条数据都要封装成一个ConsumerRecord对象</p><p>为了使我们能够专注于自己的业务逻辑，Kafka提供了自动提交offset的功能。</p><p>自动提交offset的相关参数：</p><p><strong>enable.auto.commit</strong>：是否开启自动提交offset功能</p><p><strong>auto.commit.interval.ms</strong>：自动提交offset的时间间隔</p><hr><p>几个比较重要的配置项</p><ul><li>自动提交offset功能</li><li>自动提交时间间隔</li><li>消费者组</li><li>反序列化器(对应生产者端的序列化<code>org\apache\kafka\common\serialization\Deserializer.java</code>)</li></ul><p><a href="https://gitee.com/hoffeechen/image/raw/master/img/20200523025729.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://gitee.com/hoffeechen/image/raw/master/img/20200523025729.png" class="lazyload"></a></p><h4 id="自动提交offset"><a href="#自动提交offset" class="headerlink" title="自动提交offset"></a>自动提交offset</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> fun.hoffee.kafka.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerConfig;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecords;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.KafkaConsumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConsumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1. 创建配置对象</span></span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//指定kafka集群的位置</span></span><br><span class="line">        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">"hadoop102:9092"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启自动提交offset</span></span><br><span class="line">        <span class="comment">//props.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG,true);</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//自动提交offset的间隔</span></span><br><span class="line">        props.put(ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//指定消费者组</span></span><br><span class="line">        props.put(ConsumerConfig.GROUP_ID_CONFIG, <span class="string">"atguigu"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//指定kv的反序列化器</span></span><br><span class="line">        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line">        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 创建消费者对象</span></span><br><span class="line">        KafkaConsumer&lt;String, String&gt; consumer = <span class="keyword">new</span> KafkaConsumer&lt;String, String&gt;(props);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 订阅主题</span></span><br><span class="line">        consumer.subscribe(Arrays.asList(<span class="string">"first"</span>, <span class="string">"second"</span>, <span class="string">"third"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 消费数据</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            ConsumerRecords&lt;String, String&gt; records = consumer.poll(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : records) &#123;</span><br><span class="line">                System.out.println(record.topic() + <span class="string">" -- "</span> + record.partition() + <span class="string">" -- "</span> + record.offset() + <span class="string">" -- "</span> + record.key() + <span class="string">" -- "</span> + record.value());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时创建的是新组 不能消费到之前的数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果想要消费之前的数据 需要重置offset</span></span><br><span class="line"><span class="comment">// 由auto.offset.rest参数(ConsumerConfig中的AUTO_OFFSET_RESET_CONFIG = "auto.offset.reset";)控制  默认值为latest</span></span><br><span class="line"><span class="comment">// 可以配置为 earliest | latest | none</span></span><br><span class="line">---</span><br><span class="line"><span class="comment">// 文档说明如下 :</span></span><br><span class="line"><span class="comment">// What to do when there is no initial offset in Kafka or if the current offset does not exist any more on the server (e.g. because that data has been deleted): </span></span><br><span class="line"><span class="comment">// earliest: automatically reset the offset to the earliest offset </span></span><br><span class="line"><span class="comment">// latest: automatically reset the offset to the latest offset </span></span><br><span class="line"><span class="comment">// none: throw exception to the consumer if no previous offset is found for the consumer's group </span></span><br><span class="line"><span class="comment">// anything else: throw exception to the consumer.</span></span><br><span class="line"><span class="comment">// 当Kafka中没有初始偏移量或服务器上不再存在当前偏移量时（例如，因为该数据已被删除），该怎么办：</span></span><br><span class="line"><span class="comment">// 最早：自动将偏移量重置为最早的偏移量 </span></span><br><span class="line"><span class="comment">// 最新：自动将偏移量重置为最新偏移量 </span></span><br><span class="line"><span class="comment">// 无：如果未找到消费者组的先前偏移量，则向消费者抛出异常 </span></span><br><span class="line"><span class="comment">// 其他：向消费者抛出异常</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 人话: 如果这个是一个新的组 或者是 这个组拿了一个kafka中不存在的偏移量去消费数据时候 kafka就会自动帮忙重置offset 如果配置过这个参数 就按这个参数配置的来 如果没有配置过 默认重置为latest</span></span><br></pre></td></tr></table></figure></div><h4 id="重置offset"><a href="#重置offset" class="headerlink" title="重置offset"></a>重置offset</h4><blockquote><p>具体说明见上一节代码末尾</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.kafka.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerConfig;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecords;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.KafkaConsumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConsumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1. 创建配置对象</span></span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//指定kafka集群的位置</span></span><br><span class="line">        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG,<span class="string">"hadoop102:9092"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启自动提交offset</span></span><br><span class="line">        <span class="comment">//props.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG,true);</span></span><br><span class="line">        <span class="comment">//关闭自动提交offset</span></span><br><span class="line">        props.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG,<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//自动提交offset的间隔</span></span><br><span class="line">        props.put(ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//重置offset :   earliest(最早)   latest(最后)</span></span><br><span class="line">        <span class="comment">//满足两个条件: </span></span><br><span class="line">        <span class="comment">// 1. 当前的消费者组在kafka没有消费过所订阅的主题   </span></span><br><span class="line">        <span class="comment">// 2.当前消费者组使用的offset在kafka集群中已经被删除</span></span><br><span class="line">        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG,<span class="string">"earliest"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//指定消费者组</span></span><br><span class="line">        props.put(ConsumerConfig.GROUP_ID_CONFIG,<span class="string">"atguigu111"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//指定kv的反序列化器</span></span><br><span class="line">        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG,<span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line">        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG,<span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 创建消费者对象</span></span><br><span class="line">        KafkaConsumer&lt;String,String&gt; consumer = <span class="keyword">new</span> KafkaConsumer&lt;String, String&gt;(props);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 订阅主题</span></span><br><span class="line">        consumer.subscribe(Arrays.asList(<span class="string">"first"</span>,<span class="string">"second"</span>,<span class="string">"third"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 消费数据</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">// 此处是拉取数据方法 poll中传递的参数是超时时间 当主题中没有数据时候 等待超时时间之后再进行拉取数据</span></span><br><span class="line">            <span class="comment">// 假如某一次没有消费到数据 会等待响应的时间之后再进行拉取 单位是ms</span></span><br><span class="line">            ConsumerRecords&lt;String, String&gt; records  = consumer.poll(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : records) &#123;</span><br><span class="line">                System.out.println(record.topic() + <span class="string">" -- "</span> + record.partition() + <span class="string">" -- "</span> + record.offset() +<span class="string">" -- "</span> +</span><br><span class="line">                    record.key() +<span class="string">" -- "</span> + record.value());</span><br><span class="line">       &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h4 id="手动提交offset的两种方式"><a href="#手动提交offset的两种方式" class="headerlink" title="手动提交offset的两种方式"></a>手动提交offset的两种方式</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">虽然自动提交offset十分简介便利，但由于其是基于时间提交的，开发人员难以把握offset提交的时机。因此Kafka还提供了手动提交offset的API。</span><br><span class="line"></span><br><span class="line">手动提交offset的方法有两种：分别是commitSync（同步提交）和commitAsync（异步提交）。</span><br><span class="line"></span><br><span class="line">两者的相同点是，都会将本次poll的一批数据最高的偏移量提交；</span><br><span class="line"></span><br><span class="line">不同点是，commitSync阻塞当前线程，一直到提交成功，并且会自动失败重试（由不可控因素导致，也会出现提交失败）；而commitAsync则没有失败重试机制，故有可能提交失败。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">由于同步提交offset有失败重试机制，故更加可靠</span><br><span class="line"></span><br><span class="line">虽然同步提交offset更可靠一些，但是由于其会阻塞当前线程，直到提交成功。因此吞吐量会收到很大的影响。因此更多的情况下，会选用异步提交offset的方式。</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">如果关闭了提交offset 在一直没有关闭consumer的情况下 consumer能正常消费数据 </span><br><span class="line">因为consumer从kafka中拿到offset后会一直将offset维护在内存中</span><br><span class="line"></span><br><span class="line">但是一旦关闭 因为没有向kafka提交过offset 则offset还是之前的</span><br><span class="line">那么这段时间生产的数据将被重复消费</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.kafka.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerConfig;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecords;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.KafkaConsumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConsumer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1. 创建配置对象</span></span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//指定kafka集群的位置</span></span><br><span class="line">        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG,<span class="string">"hadoop102:9092"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开启自动提交offset</span></span><br><span class="line">        <span class="comment">//props.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG,true);</span></span><br><span class="line">        <span class="comment">//关闭自动提交offset</span></span><br><span class="line">        props.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG,<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//自动提交offset的间隔</span></span><br><span class="line">        props.put(ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//重置offset :   earliest(最早)   latest(最后)</span></span><br><span class="line">        <span class="comment">//满足两个条件: 1. 当前的消费者组在kafka没有消费过所订阅的主题   2.当前消费者组使用的offset在kafka集群中已经被删除</span></span><br><span class="line">        props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG,<span class="string">"earliest"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//指定消费者组</span></span><br><span class="line">        props.put(ConsumerConfig.GROUP_ID_CONFIG,<span class="string">"atguigu111"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//指定kv的反序列化器</span></span><br><span class="line">        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG,<span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line">        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG,<span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 创建消费者对象</span></span><br><span class="line">        KafkaConsumer&lt;String,String&gt; consumer = <span class="keyword">new</span> KafkaConsumer&lt;String, String&gt;(props);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 订阅主题</span></span><br><span class="line">        consumer.subscribe(Arrays.asList(<span class="string">"first"</span>,<span class="string">"second"</span>,<span class="string">"third"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 消费数据</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">// 此处是拉取数据方法 poll中传递的参数是超时时间 当主题中没有数据时候 等待超时时间之后再进行拉取数据</span></span><br><span class="line">            <span class="comment">// 假如某一次没有消费到数据 会等待响应的时间之后再进行拉取 单位是ms</span></span><br><span class="line">            ConsumerRecords&lt;String, String&gt; records  = consumer.poll(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : records) &#123;</span><br><span class="line">                System.out.println(record.topic() + <span class="string">" -- "</span> + record.partition() + <span class="string">" -- "</span> + record.offset() +<span class="string">" -- "</span> +</span><br><span class="line">                    record.key() +<span class="string">" -- "</span> + record.value());</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="comment">//手动提交offset</span></span><br><span class="line">            <span class="comment">//同步提交 代码会阻塞 直到提交offset成功 才开始消费下一条数据</span></span><br><span class="line">            consumer.commitSync();  <span class="comment">//阻塞</span></span><br><span class="line">            <span class="comment">//异步提交 会触发提交offset的操作 但是会继续消费数据 不管offset是否提交成功</span></span><br><span class="line">            <span class="comment">//consumer.commitAsync();</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="kafka中重复消费数据和漏消费数据的情况"><a href="#kafka中重复消费数据和漏消费数据的情况" class="headerlink" title="kafka中重复消费数据和漏消费数据的情况"></a>kafka中重复消费数据和漏消费数据的情况</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">无论是同步提交还是异步提交offset，都有可能会造成数据的漏消费或者重复消费。</span><br><span class="line"></span><br><span class="line">先提交offset后消费，有可能造成数据的漏消费；</span><br><span class="line"></span><br><span class="line">而先消费后提交offset，有可能会造成数据的重复消费。</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">这是offset的提交  和 消费数据 这两件事之间的先后顺序问题</span><br><span class="line"></span><br><span class="line">例1 : </span><br><span class="line">消费者poll进100条数据 但是在消费到第60条时候宕机 但是offset已经提交 这时候 offset超前</span><br><span class="line">则后40条出现漏消费</span><br><span class="line"></span><br><span class="line">例2 :</span><br><span class="line">消费者poll进100条数据 但是offset在提交时候失败 但此时是先消费后提交offset的情况 这时候 offset滞后</span><br><span class="line">则这100条数据在下次启动时候会被重复消费</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">如何解决这个问题?</span><br><span class="line"></span><br><span class="line">将两件事情绑定在一起 如果失败则同时失败 如果成功则同时成功</span><br><span class="line">不允许出现一个失败一个成功的情况</span><br><span class="line"></span><br><span class="line">将两件事绑定为事务</span><br></pre></td></tr></table></figure></div><h3 id="kafka-API-如何实现自定义存储offset"><a href="#kafka-API-如何实现自定义存储offset" class="headerlink" title="kafka API 如何实现自定义存储offset"></a>kafka API 如何实现自定义存储offset</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Kafka 0.9版本之前，offset存储在zookeeper，0.9版本及之后，默认将offset存储在Kafka的一个内置的topic中。除此之外，Kafka还可以选择自定义存储offset。</span><br><span class="line"></span><br><span class="line">offset的维护是相当繁琐的，因为需要考虑到消费者的Rebalace。</span><br><span class="line"></span><br><span class="line">当有新的消费者加入消费者组、已有的消费者推出消费者组或者所订阅的主题的分区发生变化，就会触发到分区的重新分配，重新分配的过程叫做Rebalance。</span><br><span class="line"></span><br><span class="line">消费者发生Rebalance之后，每个消费者消费的分区就会发生变化。因此消费者要首先获取到自己被重新分配到的分区，并且定位到每个分区最近提交的offset位置继续消费。</span><br><span class="line"></span><br><span class="line">要实现自定义存储offset，需要借助ConsumerRebalanceListener，以下为示例代码，其中提交和获取offset的方法，需要根据所选的offset存储系统自行实现。</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.kafka.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.common.TopicPartition;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;TopicPartition, Long&gt; currentOffset = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建配置信息</span></span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Kafka集群</span></span><br><span class="line">        props.put(<span class="string">"bootstrap.servers"</span>, <span class="string">"hadoop102:9092"</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 消费者组，只要group.id相同，就属于同一个消费者组</span></span><br><span class="line">        props.put(<span class="string">"group.id"</span>, <span class="string">"test"</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭自动提交offset</span></span><br><span class="line">        props.put(<span class="string">"enable.auto.commit"</span>, <span class="string">"false"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Key和Value的反序列化类</span></span><br><span class="line">        props.put(<span class="string">"key.deserializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line">        props.put(<span class="string">"value.deserializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个消费者</span></span><br><span class="line">        KafkaConsumer&lt;String, String&gt; consumer = <span class="keyword">new</span> KafkaConsumer&lt;&gt;(props);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 消费者订阅主题 在订阅时候创建一个ConsumerRebalanceListener的对象实时监听</span></span><br><span class="line">    <span class="comment">// 并重写两个方法onPartitionsRevoked 和 onPartitionsAssigned</span></span><br><span class="line">        consumer.subscribe(Arrays.asList(<span class="string">"first"</span>), <span class="keyword">new</span> ConsumerRebalanceListener() &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//该方法会在Rebalance之前调用</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPartitionsRevoked</span><span class="params">(Collection&lt;TopicPartition&gt; partitions)</span> </span>&#123;</span><br><span class="line">                commitOffset(currentOffset);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//该方法会在Rebalance之后调用</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPartitionsAssigned</span><span class="params">(Collection&lt;TopicPartition&gt; partitions)</span> </span>&#123;</span><br><span class="line">                currentOffset.clear();</span><br><span class="line">                <span class="keyword">for</span> (TopicPartition partition : partitions) &#123;</span><br><span class="line">                    consumer.seek(partition, getOffset(partition));</span><br><span class="line">                    <span class="comment">//定位到最近提交的offset位置继续消费</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            ConsumerRecords&lt;String, String&gt; records = consumer.poll(<span class="number">100</span>);</span><br><span class="line">            <span class="comment">//消费者拉取数据</span></span><br><span class="line">            <span class="keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : records) &#123;</span><br><span class="line">                System.out.printf(<span class="string">"offset = %d, key = %s, value = %s%n"</span>, record.offset(), record.key(), record.value());</span><br><span class="line">                currentOffset.put(<span class="keyword">new</span> TopicPartition(record.topic(), record.partition()), record.offset());</span><br><span class="line">            &#125;</span><br><span class="line">            commitOffset(currentOffset);<span class="comment">//异步提交</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取某分区的最新offset</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getOffset</span><span class="params">(TopicPartition partition)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">// 这里是伪代码 需要根据具体存储的系统来实现</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提交该消费者所有分区的offset</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">commitOffset</span><span class="params">(Map&lt;TopicPartition, Long&gt; currentOffset)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 这里是伪代码 需要根据具体存储的系统来实现</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="kafka中的拦截器是如何实现的-原理是什么"><a href="#kafka中的拦截器是如何实现的-原理是什么" class="headerlink" title="kafka中的拦截器是如何实现的 原理是什么"></a>kafka中的拦截器是如何实现的 原理是什么</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Producer拦截器(interceptor)是在Kafka 0.10版本被引入的，主要用于实现clients端的定制化控制逻辑。</span><br><span class="line">对于producer而言，interceptor使得用户在消息发送前以及producer回调逻辑前有机会对消息做一些定制化需求，比如修改消息等。同时，producer允许用户指定多个interceptor按序作用于同一条消息从而形成一个拦截链(interceptor chain)。Intercetpor的实现接口是org.apache.kafka.clients.producer.ProducerInterceptor，其定义的方法包括：</span><br><span class="line">（1）configure(configs)</span><br><span class="line">获取配置信息和初始化数据时调用。</span><br><span class="line"></span><br><span class="line">（2）onSend(ProducerRecord)：</span><br><span class="line">该方法封装进KafkaProducer.send方法中，即它运行在用户主线程中。Producer确保在消息被序列化以及计算分区前调用该方法。用户可以在该方法中对消息做任何操作，但最好保证不要修改消息所属的topic和分区，否则会影响目标分区的计算。</span><br><span class="line"></span><br><span class="line">（3）onAcknowledgement(RecordMetadata, Exception)：</span><br><span class="line">该方法会在消息从RecordAccumulator成功发送到Kafka Broker之后，或者在发送过程中失败时调用。并且通常都是在producer回调逻辑触发之前。onAcknowledgement运行在producer的IO线程中，因此不要在该方法中放入很重的逻辑，否则会拖慢producer的消息发送效率。</span><br><span class="line"></span><br><span class="line">（4）close：</span><br><span class="line">关闭interceptor，主要用于执行一些资源清理工作</span><br><span class="line">如前所述，interceptor可能被运行在多个线程中，因此在具体实现时用户需要自行确保线程安全。另外倘若指定了多个interceptor，则producer将按照指定顺序调用它们，并仅仅是捕获每个interceptor可能抛出的异常记录到错误日志中而非在向上传递。这在使用过程中要特别留意。</span><br></pre></td></tr></table></figure></div><h3 id="请实现一个kafka的拦截器"><a href="#请实现一个kafka的拦截器" class="headerlink" title="请实现一个kafka的拦截器"></a>请实现一个kafka的拦截器</h3><p><strong>需求：</strong></p><p>实现一个简单的双interceptor组成的拦截链。第一个interceptor会在消息发送前将时间戳信息加到消息value的最前部；第二个interceptor会在消息发送后更新成功发送消息数或失败发送消息数。</p><p><strong>分析:</strong></p><p><a href="https://gitee.com/hoffeechen/image/raw/master/img/20200523043416.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://gitee.com/hoffeechen/image/raw/master/img/20200523043416.png" class="lazyload"></a></p><p><strong>时间拦截器</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> fun.hoffee.kafka.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.ProducerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.ProducerRecord;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.RecordMetadata;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在所有的消息内容前面加上时间戳</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeInterceptor</span> <span class="keyword">implements</span> <span class="title">ProducerInterceptor</span>&lt;<span class="title">String</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ProducerRecord&lt;String, String&gt; <span class="title">onSend</span><span class="params">(ProducerRecord&lt;String, String&gt; record)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取当前消息的value</span></span><br><span class="line">        String value = record.value();</span><br><span class="line">        value = System.currentTimeMillis() + <span class="string">" -- "</span> + value;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造一个producerRecord</span></span><br><span class="line">        ProducerRecord&lt;String, String&gt; resultRecord =</span><br><span class="line">                <span class="keyword">new</span> ProducerRecord&lt;&gt;(record.topic(), record.partition(), record.key(), value);</span><br><span class="line">        <span class="keyword">return</span> resultRecord;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAcknowledgement</span><span class="params">(RecordMetadata metadata, Exception exception)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(Map&lt;String, ?&gt; configs)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><strong>计数拦截器</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> fun.hoffee.kafka.interceptor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.ProducerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.ProducerRecord;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.RecordMetadata;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统计发送成功或失败的消息个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountInterceptor</span> <span class="keyword">implements</span> <span class="title">ProducerInterceptor</span>&lt;<span class="title">String</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer success = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer fail = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ProducerRecord&lt;String, String&gt; <span class="title">onSend</span><span class="params">(ProducerRecord&lt;String, String&gt; record)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 相当于原路返回没有做处理</span></span><br><span class="line">        <span class="keyword">return</span> record;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAcknowledgement</span><span class="params">(RecordMetadata metadata, Exception exception)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (exception == <span class="keyword">null</span>) &#123;</span><br><span class="line">            success++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            fail++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 整个拦截器走完之后 调用该方法</span></span><br><span class="line">        System.out.println(<span class="string">"Success : "</span> + success);</span><br><span class="line">        System.out.println(<span class="string">"Fail :"</span> + fail);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(Map&lt;String, ?&gt; configs)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><strong>在生产者的配置文件中配置拦截器(可设置多个 设置为一个list)</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> fun.hoffee.kafka.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.KafkaProducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.ProducerConfig;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.producer.ProducerRecord;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterceptorProducer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1. 创建配置对象</span></span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//指定kafka集群的位置，broker-list</span></span><br><span class="line">        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, <span class="string">"hadoop102:9092"</span>);</span><br><span class="line">        <span class="comment">//指定ack的应答级别  0  1  -1(all)</span></span><br><span class="line">        props.put(ProducerConfig.ACKS_CONFIG, <span class="string">"all"</span>);</span><br><span class="line">        <span class="comment">//重试次数</span></span><br><span class="line">        props.put(ProducerConfig.RETRIES_CONFIG, <span class="number">5</span>);</span><br><span class="line">        <span class="comment">//批次大小</span></span><br><span class="line">        props.put(ProducerConfig.BATCH_SIZE_CONFIG, <span class="number">16384</span>);  <span class="comment">// 16kb</span></span><br><span class="line">        <span class="comment">//等待时间</span></span><br><span class="line">        props.put(ProducerConfig.LINGER_MS_CONFIG, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//RecordAccumulator缓冲区大小</span></span><br><span class="line">        props.put(ProducerConfig.BUFFER_MEMORY_CONFIG, <span class="number">33554432</span>);  <span class="comment">// 32M</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//指定kv的序列化器</span></span><br><span class="line">        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, <span class="string">"org.apache.kafka.common.serialization.StringSerializer"</span>);</span><br><span class="line">        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, <span class="string">"org.apache.kafka.common.serialization.StringSerializer"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//指定拦截器</span></span><br><span class="line">        <span class="comment">// "A list of classes to use as interceptors. Implementing the &lt;code&gt;ProducerInterceptor&lt;/code&gt; interface allows you to intercept (and possibly mutate) the records received by the producer before they are published to the Kafka cluster. By default, there are no interceptors.";</span></span><br><span class="line">        List&lt;String&gt; interceptors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        interceptors.add(<span class="string">"com.atguigu.kafka.interceptor.TimeInterceptor"</span>);</span><br><span class="line">        interceptors.add(<span class="string">"com.atguigu.kafka.interceptor.CountInterceptor"</span>);</span><br><span class="line">        props.put(ProducerConfig.INTERCEPTOR_CLASSES_CONFIG, interceptors);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 创建生产者对象</span></span><br><span class="line">        KafkaProducer producer = <span class="keyword">new</span> KafkaProducer&lt;String, String&gt;(props);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 生产数据</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            producer.send(<span class="keyword">new</span> ProducerRecord(<span class="string">"second"</span>, <span class="string">"shangguigu==&gt;"</span> + i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. 关闭</span></span><br><span class="line">        producer.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="flume如何对接kafka"><a href="#flume如何对接kafka" class="headerlink" title="flume如何对接kafka"></a>flume如何对接kafka</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">使用kafkasink</span><br><span class="line"></span><br><span class="line">此时kafkasink相当于kafka的生产者 它可以根据消息的标记发送给kafka中不同的topic</span><br></pre></td></tr></table></figure></div><p>flume官网关于kafka sink的介绍如下</p><p>这是一个Flume Sink实现，可以将数据发布到 <a href="http://kafka.apache.org/" target="_blank" rel="noopener">Kafka</a>主题。目标之一是将Flume与Kafka集成在一起，以便基于拉式的处理系统可以处理来自各种Flume来源的数据。目前，该版本支持Kafka 0.9.x系列发行版。</p><p>此版本的Flume不再支持Kafka的旧版本（0.8.x）。</p><p>必需的属性以粗体标记。</p><table><thead><tr><th>Property Name</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td><strong>type</strong></td><td>–</td><td>Must be set to <code>org.apache.flume.sink.kafka.KafkaSink</code></td></tr><tr><td><strong>kafka.bootstrap.servers</strong></td><td>–</td><td>List of brokers Kafka-Sink will connect to, to get the list of topic partitions This can be a partial list of brokers, but we recommend at least two for HA. The format is comma separated list of hostname:port Kafka-Sink将连接到的代理列表，以获取主题分区列表。这可以是部分代理列表，但是对于HA，我们建议至少两个。格式是用逗号分隔的主机名：端口列表</td></tr><tr><td>kafka.topic</td><td>default-flume-topic</td><td>The topic in Kafka to which the messages will be published. If this parameter is configured, messages will be published to this topic. If the event header contains a “topic” field, the event will be published to that topic overriding the topic configured here. Kafka中将发布消息的主题。如果配置了此参数，则消息将发布到该主题。如果事件标题包含“主题”字段，则事件将发布到该主题，并覆盖此处配置的主题。</td></tr><tr><td>flumeBatchSize</td><td>100</td><td>How many messages to process in one batch. Larger batches improve throughput while adding latency. 一批中要处理多少条消息。较大的批次可提高吞吐量，同时增加延迟。</td></tr><tr><td>kafka.producer.acks</td><td>1</td><td>How many replicas must acknowledge a message before its considered successfully written. Accepted values are 0 (Never wait for acknowledgement), 1 (wait for leader only), -1 (wait for all replicas) Set this to -1 to avoid data loss in some cases of leader failure. 在成功考虑一条消息之前，有多少个副本必须确认一条消息。接受的值为0（永远不等待确认），1（仅等待领导者），-1（等待所有副本）将其设置为-1，以避免在某些领导者失败的情况下丢失数据。</td></tr><tr><td>useFlumeEventFormat</td><td>false</td><td>By default events are put as bytes onto the Kafka topic directly from the event body. Set to true to store events as the Flume Avro binary format. Used in conjunction with the same property on the KafkaSource or with the parseAsFlumeEvent property on the Kafka Channel this will preserve any Flume headers for the producing side. 默认情况下，事件直接从事件主体作为字节放入Kafka主题。设置为true可将事件存储为Flume Avro二进制格式。与KafkaSource上的相同属性或Kafka Channel上的parseAsFlumeEvent属性结合使用，将为生产方保留任何Flume标头。</td></tr><tr><td>defaultPartitionId</td><td>–</td><td>Specifies a Kafka partition ID (integer) for all events in this channel to be sent to, unless overriden by <code>partitionIdHeader</code>. By default, if this property is not set, events will be distributed by the Kafka Producer’s partitioner - including by <code>key</code> if specified (or by a partitioner specified by <code>kafka.partitioner.class</code>).</td></tr><tr><td>partitionIdHeader</td><td>–</td><td>When set, the sink will take the value of the field named using the value of this property from the event header and send the message to the specified partition of the topic. If the value represents an invalid partition, an EventDeliveryException will be thrown. If the header value is present then this setting overrides <code>defaultPartitionId</code>.</td></tr><tr><td>kafka.producer.security.protocol</td><td>PLAINTEXT</td><td>Set to SASL_PLAINTEXT, SASL_SSL or SSL if writing to Kafka using some level of security. See below for additional info on secure setup.</td></tr><tr><td><em>more producer security props</em></td><td></td><td>If using SASL_PLAINTEXT, SASL_SSL or SSL refer to <a href="http://kafka.apache.org/documentation.html#security" target="_blank" rel="noopener">Kafka security</a> for additional properties that need to be set on producer.</td></tr><tr><td>Other Kafka Producer Properties</td><td>–</td><td>These properties are used to configure the Kafka Producer. Any producer property supported by Kafka can be used. The only requirement is to prepend the property name with the prefix <code>kafka.producer</code>. For example: kafka.producer.linger.ms</td></tr></tbody></table><p>The Kafka sink also provides defaults for the key.serializer(org.apache.kafka.common.serialization.StringSerializer) and value.serializer(org.apache.kafka.common.serialization.ByteArraySerializer). Modification of these parameters is not recommended.</p><p>An example configuration of a Kafka sink is given below. Properties starting with the prefix <code>kafka.producer</code> the Kafka producer. The properties that are passed when creating the Kafka producer are not limited to the properties given in this example. Also it is possible to include your custom properties here and access them inside the preprocessor through the Flume Context object passed in as a method argument.</p><p>示例配置如下:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a1.sinks.k1.channel &#x3D; c1</span><br><span class="line">a1.sinks.k1.type &#x3D; org.apache.flume.sink.kafka.KafkaSink</span><br><span class="line">a1.sinks.k1.kafka.topic &#x3D; mytopic &#x2F;&#x2F; 指定写入topic</span><br><span class="line">a1.sinks.k1.kafka.bootstrap.servers &#x3D; localhost:9092 &#x2F;&#x2F; kafka位置</span><br><span class="line">a1.sinks.k1.kafka.flumeBatchSize &#x3D; 20</span><br><span class="line">a1.sinks.k1.kafka.producer.acks &#x3D; 1</span><br><span class="line">a1.sinks.k1.kafka.producer.linger.ms &#x3D; 1</span><br><span class="line">a1.sinks.ki.kafka.producer.compression.type &#x3D; snappy</span><br></pre></td></tr></table></figure></div><h3 id="实现flume中不同的event发往kafka中不同的topic"><a href="#实现flume中不同的event发往kafka中不同的topic" class="headerlink" title="实现flume中不同的event发往kafka中不同的topic"></a>实现flume中不同的event发往kafka中不同的topic</h3><p><a href="https://gitee.com/hoffeechen/image/raw/master/img/20200523053711.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://gitee.com/hoffeechen/image/raw/master/img/20200523053711.png" class="lazyload"></a></p><h3 id="如何监控kafka"><a href="#如何监控kafka" class="headerlink" title="如何监控kafka"></a>如何监控kafka</h3><h3 id="kafka面试题总结"><a href="#kafka面试题总结" class="headerlink" title="kafka面试题总结"></a>kafka面试题总结</h3><h4 id="1-Kafka中的ISR、OSR、AR又代表什么？"><a href="#1-Kafka中的ISR、OSR、AR又代表什么？" class="headerlink" title="1.Kafka中的ISR、OSR、AR又代表什么？"></a>1.Kafka中的ISR、OSR、AR又代表什么？</h4><blockquote><p>ISR：与leader保持同步的follower集合<br>AR：分区的所有副本</p></blockquote><h4 id="2-Kafka中的HW、LEO等分别代表什么？"><a href="#2-Kafka中的HW、LEO等分别代表什么？" class="headerlink" title="2.Kafka中的HW、LEO等分别代表什么？"></a>2.Kafka中的HW、LEO等分别代表什么？</h4><blockquote><p>LEO：没个副本的最后条消息的offset<br>HW：一个分区中所有副本最小的offset 控制整个分区中哪些数据能够暴露给消费者</p></blockquote><h4 id="3-Kafka中是怎么体现消息顺序性的？"><a href="#3-Kafka中是怎么体现消息顺序性的？" class="headerlink" title="3.Kafka中是怎么体现消息顺序性的？"></a>3.Kafka中是怎么体现消息顺序性的？</h4><blockquote><p>每个分区内，每条消息都有一个offset，故只能保证分区内有序。</p></blockquote><h4 id="4-Kafka中的分区器、序列化器、拦截器是否了解？它们之间的处理顺序是什么？"><a href="#4-Kafka中的分区器、序列化器、拦截器是否了解？它们之间的处理顺序是什么？" class="headerlink" title="4.Kafka中的分区器、序列化器、拦截器是否了解？它们之间的处理顺序是什么？"></a>4.Kafka中的分区器、序列化器、拦截器是否了解？它们之间的处理顺序是什么？</h4><blockquote><p>拦截器 -&gt; 序列化器 -&gt; 分区器</p></blockquote><h4 id="5-Kafka生产者客户端的整体结构是什么样子的？使用了几个线程来处理？分别是什么？"><a href="#5-Kafka生产者客户端的整体结构是什么样子的？使用了几个线程来处理？分别是什么？" class="headerlink" title="5.Kafka生产者客户端的整体结构是什么样子的？使用了几个线程来处理？分别是什么？"></a>5.Kafka生产者客户端的整体结构是什么样子的？使用了几个线程来处理？分别是什么？</h4><p><a href="https://gitee.com/hoffeechen/image/raw/master/img/20200522223103.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://gitee.com/hoffeechen/image/raw/master/img/20200522223103.png" class="lazyload"></a></p><h4 id="6-“消费组中的消费者个数如果超过topic的分区，那么就会有消费者消费不到数据”这句话是否正确？"><a href="#6-“消费组中的消费者个数如果超过topic的分区，那么就会有消费者消费不到数据”这句话是否正确？" class="headerlink" title="6.“消费组中的消费者个数如果超过topic的分区，那么就会有消费者消费不到数据”这句话是否正确？"></a>6.“消费组中的消费者个数如果超过topic的分区，那么就会有消费者消费不到数据”这句话是否正确？</h4><blockquote><p>正确</p></blockquote><h4 id="7-消费者提交消费位移时提交的是当前消费到的最新消息的offset还是offset-1？"><a href="#7-消费者提交消费位移时提交的是当前消费到的最新消息的offset还是offset-1？" class="headerlink" title="7.消费者提交消费位移时提交的是当前消费到的最新消息的offset还是offset+1？"></a>7.消费者提交消费位移时提交的是当前消费到的最新消息的offset还是offset+1？</h4><blockquote><p>offset+1 记录下次消费的数据的offset</p></blockquote><h4 id="8-有哪些情形会造成重复消费？"><a href="#8-有哪些情形会造成重复消费？" class="headerlink" title="8.有哪些情形会造成重复消费？"></a>8.有哪些情形会造成重复消费？</h4><p><a href="https://gitee.com/hoffeechen/image/raw/master/img/20200523163301.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://gitee.com/hoffeechen/image/raw/master/img/20200523163301.png" class="lazyload"></a></p><h4 id="9-有哪些情景会造成消息漏消费？"><a href="#9-有哪些情景会造成消息漏消费？" class="headerlink" title="9.有哪些情景会造成消息漏消费？"></a>9.有哪些情景会造成消息漏消费？</h4><blockquote><p>先提交offset，后消费，有可能造成数据的重复</p></blockquote><h4 id="10-当你使用kafka-topics-sh创建（删除）了一个topic之后，Kafka背后会执行什么逻辑？"><a href="#10-当你使用kafka-topics-sh创建（删除）了一个topic之后，Kafka背后会执行什么逻辑？" class="headerlink" title="10.当你使用kafka-topics.sh创建（删除）了一个topic之后，Kafka背后会执行什么逻辑？"></a>10.当你使用kafka-topics.sh创建（删除）了一个topic之后，Kafka背后会执行什么逻辑？</h4><blockquote><p>1）会在zookeeper中的/brokers/topics节点下创建一个新的topic节点，如：/brokers/topics/first</p><p>2）触发Controller的监听程序</p><p>3）kafka Controller 负责topic的创建工作，并更新metadata cache</p></blockquote><h4 id="11-topic的分区数可不可以增加？如果可以怎么增加？如果不可以，那又是为什么？"><a href="#11-topic的分区数可不可以增加？如果可以怎么增加？如果不可以，那又是为什么？" class="headerlink" title="11.topic的分区数可不可以增加？如果可以怎么增加？如果不可以，那又是为什么？"></a>11.topic的分区数可不可以增加？如果可以怎么增加？如果不可以，那又是为什么？</h4><blockquote><p>可以增加</p><p>bin/kafka-topics.sh –zookeeper localhost:2181/kafka –alter –topic topic-config –partitions 3</p></blockquote><h4 id="12-topic的分区数可不可以减少？如果可以怎么减少？如果不可以，那又是为什么？"><a href="#12-topic的分区数可不可以减少？如果可以怎么减少？如果不可以，那又是为什么？" class="headerlink" title="12.topic的分区数可不可以减少？如果可以怎么减少？如果不可以，那又是为什么？"></a>12.topic的分区数可不可以减少？如果可以怎么减少？如果不可以，那又是为什么？</h4><blockquote><p>不可以减少，现有的分区数据难以处理。</p></blockquote><h4 id="13-Kafka有内部的topic吗？如果有是什么？有什么所用？"><a href="#13-Kafka有内部的topic吗？如果有是什么？有什么所用？" class="headerlink" title="13.Kafka有内部的topic吗？如果有是什么？有什么所用？"></a>13.Kafka有内部的topic吗？如果有是什么？有什么所用？</h4><blockquote><p>__consumer_offsets, 共有50个分区 保存消费者offset</p></blockquote><h4 id="14-Kafka分区分配的概念？"><a href="#14-Kafka分区分配的概念？" class="headerlink" title="14.Kafka分区分配的概念？"></a>14.Kafka分区分配的概念？</h4><blockquote><p>一个topic多个分区，一个消费者组多个消费者，故需要将分区分配个消费者(roundrobin、range)</p></blockquote><h4 id="15-简述Kafka的日志目录结构？"><a href="#15-简述Kafka的日志目录结构？" class="headerlink" title="15.简述Kafka的日志目录结构？"></a>15.简述Kafka的日志目录结构？</h4><blockquote><p>每个分区对应一个文件夹，文件夹的命名为topic-0，topic-1，内部为.log和.index文件</p></blockquote><h4 id="16-如果我指定了一个offset，Kafka-Controller怎么查找到对应的消息？"><a href="#16-如果我指定了一个offset，Kafka-Controller怎么查找到对应的消息？" class="headerlink" title="16.如果我指定了一个offset，Kafka Controller怎么查找到对应的消息？"></a>16.如果我指定了一个offset，Kafka Controller怎么查找到对应的消息？</h4><blockquote><p>先通过offset比对log文件的名字 确定好后 再找到对应的index文件中offset对应的消息索引位置</p><p>最后在log文件中找到相应的消息</p></blockquote><p><a href="https://gitee.com/hoffeechen/image/raw/master/img/20200523163707.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://gitee.com/hoffeechen/image/raw/master/img/20200523163707.png" class="lazyload"></a></p><h4 id="17-聊一聊Kafka-Controller的作用？"><a href="#17-聊一聊Kafka-Controller的作用？" class="headerlink" title="17.聊一聊Kafka Controller的作用？"></a>17.聊一聊Kafka Controller的作用？</h4><blockquote><p>负责管理集群broker的上下线，所有topic的分区副本分配和leader选举等工作。</p></blockquote><h4 id="18-Kafka中有那些地方需要选举？这些地方的选举策略又有哪些？"><a href="#18-Kafka中有那些地方需要选举？这些地方的选举策略又有哪些？" class="headerlink" title="18.Kafka中有那些地方需要选举？这些地方的选举策略又有哪些？"></a>18.Kafka中有那些地方需要选举？这些地方的选举策略又有哪些？</h4><blockquote><p>partition leader（ISR），由Controller负责</p><p>Controller（先到先得）</p></blockquote><h4 id="19-失效副本是指什么？有那些应对措施？"><a href="#19-失效副本是指什么？有那些应对措施？" class="headerlink" title="19.失效副本是指什么？有那些应对措施？"></a>19.失效副本是指什么？有那些应对措施？</h4><blockquote><p>不能及时与leader同步，暂时踢出ISR，等其追上leader之后再重新加入</p></blockquote><h4 id="20-Kafka的那些设计让它有如此高的性能？"><a href="#20-Kafka的那些设计让它有如此高的性能？" class="headerlink" title="20.Kafka的那些设计让它有如此高的性能？"></a>20.Kafka的那些设计让它有如此高的性能？</h4><blockquote><p>分区，顺序写磁盘，0-copy</p></blockquote><h3 id="其他kafka相关面试题搜集-一"><a href="#其他kafka相关面试题搜集-一" class="headerlink" title="其他kafka相关面试题搜集(一)"></a>其他kafka相关面试题搜集(一)</h3><h4 id="1、请说明什么是Apache-Kafka"><a href="#1、请说明什么是Apache-Kafka" class="headerlink" title="1、请说明什么是Apache Kafka?"></a>1、请说明什么是Apache Kafka?</h4><blockquote><p>Apache Kafka是由Apache开发的一种发布订阅消息系统，它是一个分布式的、分区的和可复制的提交日志服务。</p></blockquote><h4 id="2、说说Kafka的使用场景？"><a href="#2、说说Kafka的使用场景？" class="headerlink" title="2、说说Kafka的使用场景？"></a>2、说说Kafka的使用场景？</h4><blockquote><p>①异步处理<br>②应用解耦<br>③流量削峰<br>④日志处理<br>⑤消息通讯等。</p></blockquote><h4 id="3、使用Kafka有什么优点和缺点？"><a href="#3、使用Kafka有什么优点和缺点？" class="headerlink" title="3、使用Kafka有什么优点和缺点？"></a>3、使用Kafka有什么优点和缺点？</h4><blockquote><p>优点：<br>①支持跨数据中心的消息复制；<br>②单机吞吐量：十万级，最大的优点，就是吞吐量高;<br>③topic数量都吞吐量的影响：topic从几十个到几百个的时候，吞吐量会大幅度下降。所以在同等机器下，kafka尽量保证topic数量不要过多。如果要支撑大规模topic，需要增加更多的机器资源;<br>④时效性：ms级;<br>⑤可用性：非常高，kafka是分布式的，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用;<br>⑥消息可靠性：经过参数优化配置，消息可以做到0丢失;<br>⑦功能支持：功能较为简单，主要支持简单的MQ功能，在大数据领域的实时计算以及日志采集被大规模使用。</p></blockquote><blockquote><p>缺点：<br>①由于是批量发送，数据并非真正的实时； 仅支持统一分区内消息有序，无法实现全局消息有序；<br>②有可能消息重复消费；<br>③依赖zookeeper进行元数据管理，等等。</p></blockquote><h4 id="4、为什么说Kafka性能很好，体现在哪里？"><a href="#4、为什么说Kafka性能很好，体现在哪里？" class="headerlink" title="4、为什么说Kafka性能很好，体现在哪里？"></a>4、为什么说Kafka性能很好，体现在哪里？</h4><blockquote><p>①顺序读写<br>②零拷贝<br>③分区<br>④批量发送<br>⑤数据压缩</p></blockquote><h4 id="5、请说明什么是传统的消息传递方法"><a href="#5、请说明什么是传统的消息传递方法" class="headerlink" title="5、请说明什么是传统的消息传递方法?"></a>5、请说明什么是传统的消息传递方法?</h4><blockquote><p>传统的消息传递方法包括两种：<br>排队：在队列中，一组用户可以从服务器中读取消息，每条消息都发送给其中一个人。<br>发布-订阅：在这个模型中，消息被广播给所有的用户。</p></blockquote><h4 id="6、请说明Kafka相对传统技术有什么优势"><a href="#6、请说明Kafka相对传统技术有什么优势" class="headerlink" title="6、请说明Kafka相对传统技术有什么优势?"></a>6、请说明Kafka相对传统技术有什么优势?</h4><blockquote><p>①快速:单一的Kafka代理可以处理成千上万的客户端，每秒处理数兆字节的读写操作。<br>②可伸缩:在一组机器上对数据进行分区<br>③和简化，以支持更大的数据<br>④持久:消息是持久性的，并在集群中进<br>⑤行复制，以防止数据丢失。<br>⑥设计:它提供了容错保证和持久性</p></blockquote><h4 id="7、解释Kafka的Zookeeper是什么-我们可以在没有Zookeeper的情况下使用Kafka吗"><a href="#7、解释Kafka的Zookeeper是什么-我们可以在没有Zookeeper的情况下使用Kafka吗" class="headerlink" title="7、解释Kafka的Zookeeper是什么?我们可以在没有Zookeeper的情况下使用Kafka吗?"></a>7、解释Kafka的Zookeeper是什么?我们可以在没有Zookeeper的情况下使用Kafka吗?</h4><blockquote><p>Zookeeper是一个开放源码的、高性能的协调服务，它用于Kafka的分布式应用。<br>不，不可能越过Zookeeper，直接联系Kafka broker。一旦Zookeeper停止工作，它就不能服务客户端请求。<br>Zookeeper主要用于在集群中不同节点之间进行通信<br>在Kafka中，它被用于提交偏移量，因此如果节点在任何情况下都失败了，它都可以从之前提交的偏移量中获取<br>除此之外，它还执行其他活动，如: leader检测、分布式同步、配置管理、识别新节点何时离开或连接、集群、节点实时状态等等。</p></blockquote><h4 id="8、解释Kafka的用户如何消费信息"><a href="#8、解释Kafka的用户如何消费信息" class="headerlink" title="8、解释Kafka的用户如何消费信息?"></a>8、解释Kafka的用户如何消费信息?</h4><blockquote><p>在Kafka中传递消息是通过使用sendfile API完成的。它支持将字节从套接口转移到磁盘，通过内核空间保存副本，并在内核用户之间调用内核。</p></blockquote><h4 id="9、解释如何提高远程用户的吞吐量"><a href="#9、解释如何提高远程用户的吞吐量" class="headerlink" title="9、解释如何提高远程用户的吞吐量?"></a>9、解释如何提高远程用户的吞吐量?</h4><blockquote><p>如果用户位于与broker不同的数据中心，则可能需要调优套接口缓冲区大小，以对长网络延迟进行摊销。</p></blockquote><h4 id="10、解释一下，在数据制作过程中，你如何能从Kafka得到准确的信息"><a href="#10、解释一下，在数据制作过程中，你如何能从Kafka得到准确的信息" class="headerlink" title="10、解释一下，在数据制作过程中，你如何能从Kafka得到准确的信息?"></a>10、解释一下，在数据制作过程中，你如何能从Kafka得到准确的信息?</h4><blockquote><p>在数据中，为了精确地获得Kafka的消息，你必须遵循两件事:</p><p>在数据消耗期间避免重复，在数据生产过程中避免重复。</p><p>这里有两种方法，可以在数据生成时准确地获得一个语义:</p><p>每个分区使用一个单独的写入器，每当你发现一个网络错误，检查该分区中的最后一条消息，以查看您的最后一次写入是否成功</p><p>在消息中包含一个主键(UUID或其他)，并在用户中进行反复制</p></blockquote><h4 id="11、解释如何减少ISR中的扰动-broker什么时候离开ISR"><a href="#11、解释如何减少ISR中的扰动-broker什么时候离开ISR" class="headerlink" title="11、解释如何减少ISR中的扰动?broker什么时候离开ISR?"></a>11、解释如何减少ISR中的扰动?broker什么时候离开ISR?</h4><blockquote><p>ISR是一组与leaders完全同步的消息副本，也就是说ISR中包含了所有提交的消息。ISR应该总是包含所有的副本，直到出现真正的故障。如果一个副本从leader中脱离出来，将会从ISR中删除。</p></blockquote><h4 id="12、Kafka为什么需要复制"><a href="#12、Kafka为什么需要复制" class="headerlink" title="12、Kafka为什么需要复制?"></a>12、Kafka为什么需要复制?</h4><blockquote><p>Kafka的信息复制确保了任何已发布的消息不会丢失，并且可以在机器错误、程序错误或更常见些的软件升级中使用。</p></blockquote><h4 id="13、如果副本在ISR中停留了很长时间表明什么"><a href="#13、如果副本在ISR中停留了很长时间表明什么" class="headerlink" title="13、如果副本在ISR中停留了很长时间表明什么?"></a>13、如果副本在ISR中停留了很长时间表明什么?</h4><blockquote><p>如果一个副本在ISR中保留了很长一段时间，那么它就表明，跟踪器无法像在leader收集数据那样快速地获取数据。</p></blockquote><h4 id="14、请说明如果首选的副本不在ISR中会发生什么"><a href="#14、请说明如果首选的副本不在ISR中会发生什么" class="headerlink" title="14、请说明如果首选的副本不在ISR中会发生什么?"></a>14、请说明如果首选的副本不在ISR中会发生什么?</h4><blockquote><p>如果首选的副本不在ISR中，控制器将无法将leadership转移到首选的副本。</p></blockquote><h4 id="15、有可能在生产后发生消息偏移吗"><a href="#15、有可能在生产后发生消息偏移吗" class="headerlink" title="15、有可能在生产后发生消息偏移吗?"></a>15、有可能在生产后发生消息偏移吗?</h4><blockquote><p>在大多数队列系统中，作为生产者的类无法做到这一点，它的作用是触发并忘记消息。broker将完成剩下的工作，比如使用id进行适当的元数据处理、偏移量等。</p><p>作为消息的用户，你可以从Kafka broker中获得补偿。如果你注视SimpleConsumer类，你会注意到它会获取包括偏移量作为列表的MultiFetchResponse对象。此外，当你对Kafka消息进行迭代时，你会拥有包括偏移量和消息发送的MessageAndOffset对象。</p></blockquote><h4 id="16、Kafka的设计时什么样的呢？"><a href="#16、Kafka的设计时什么样的呢？" class="headerlink" title="16、Kafka的设计时什么样的呢？"></a>16、Kafka的设计时什么样的呢？</h4><blockquote><p>Kafka将消息以topic为单位进行归纳</p><p>将向Kafka topic发布消息的程序成为producers. 将订阅了topics并消费消息的程序成为consumer.</p><p>Kafka以集群的方式运行，可以由一个或多个服务组成，每个服务叫做一个broker.</p><p>producers通过网络将消息发送到Kafka集群，集群向消费者提供消息</p></blockquote><h4 id="17、数据传输的事务定义有哪三种？"><a href="#17、数据传输的事务定义有哪三种？" class="headerlink" title="17、数据传输的事务定义有哪三种？"></a>17、数据传输的事务定义有哪三种？</h4><blockquote><p>（1）最多一次:<br>消息不会被重复发送，最多被传输一次，但也有可能一次不传输<br>（2）最少一次: 消息不会被漏发送，最少被传输一次，但也有可能被重复传输.<br>（3）精确的一次（Exactly once）: 不会漏传输也不会重复传输,每个消息都传输被一次而且仅仅被传输一次，这是大家所期望的</p></blockquote><h4 id="18、Kafka判断一个节点是否还活着有那两个条件？"><a href="#18、Kafka判断一个节点是否还活着有那两个条件？" class="headerlink" title="18、Kafka判断一个节点是否还活着有那两个条件？"></a>18、Kafka判断一个节点是否还活着有那两个条件？</h4><blockquote><p>（1）节点必须可以维护和ZooKeeper的连接，Zookeeper通过心跳机制检查每个节点的连接<br>（2）如果节点是个follower,他必须能及时的同步leader的写操作，延时不能太久</p></blockquote><h4 id="19、producer是否直接将数据发送到broker的leader-主节点-？"><a href="#19、producer是否直接将数据发送到broker的leader-主节点-？" class="headerlink" title="19、producer是否直接将数据发送到broker的leader(主节点)？"></a>19、producer是否直接将数据发送到broker的leader(主节点)？</h4><blockquote><p>producer直接将数据发送到broker的leader(主节点)，不需要在多个节点进行分发，为了帮助producer做到这点，所有的Kafka节点都可以及时的告知:哪些节点是活动的，目标topic目标分区的leader在哪。这样producer就可以直接将消息发送到目的地了。</p></blockquote><h4 id="20、Kafa-consumer是否可以消费指定分区消息？"><a href="#20、Kafa-consumer是否可以消费指定分区消息？" class="headerlink" title="20、Kafa consumer是否可以消费指定分区消息？"></a>20、Kafa consumer是否可以消费指定分区消息？</h4><blockquote><p>Kafa consumer消费消息时，向broker发出”fetch”请求去消费特定分区的消息，consumer指定消息在日志中的偏移量（offset），就可以消费从这个位置开始的消息，customer拥有了offset的控制权，可以向后回滚去重新消费之前的消息，这是很有意义的</p></blockquote><h4 id="21、Kafka消息是采用Pull模式，还是Push模式？"><a href="#21、Kafka消息是采用Pull模式，还是Push模式？" class="headerlink" title="21、Kafka消息是采用Pull模式，还是Push模式？"></a>21、Kafka消息是采用Pull模式，还是Push模式？</h4><blockquote><p>Kafka最初考虑的问题是，customer应该从brokes拉取消息还是brokers将消息推送到consumer，也就是pull还push。在这方面，Kafka遵循了一种大部分消息系统共同的传统的设计：producer将消息推送到broker，consumer从broker拉取消息一些消息系统比如Scribe和Apache Flume采用了push模式，将消息推送到下游的consumer。这样做有好处也有坏处：由broker决定消息推送的速率，对于不同消费速率的consumer就不太好处理了。消息系统都致力于让consumer以最大的速率最快速的消费消息，但不幸的是，push模式下，当broker推送的速率远大于consumer消费的速率时，consumer恐怕就要崩溃了。最终Kafka还是选取了传统的pull模式</p><p>Pull模式的另外一个好处是consumer可以自主决定是否批量的从broker拉取数据。Push模式必须在不知道下游consumer消费能力和消费策略的情况下决定是立即推送每条消息还是缓存之后批量推送。如果为了避免consumer崩溃而采用较低的推送速率，将可能导致一次只推送较少的消息而造成浪费。Pull模式下，consumer就可以根据自己的消费能力去决定这些策略</p><p>Pull有个缺点是，如果broker没有可供消费的消息，将导致consumer不断在循环中轮询，直到新消息到t达。为了避免这点，Kafka有个参数可以让consumer阻塞知道新消息到达(当然也可以阻塞知道消息的数量达到某个特定的量这样就可以批量发</p></blockquote><h4 id="22、Kafka存储在硬盘上的消息格式是什么？"><a href="#22、Kafka存储在硬盘上的消息格式是什么？" class="headerlink" title="22、Kafka存储在硬盘上的消息格式是什么？"></a>22、Kafka存储在硬盘上的消息格式是什么？</h4><blockquote><p>消息由一个固定长度的头部和可变长度的字节数组组成。头部包含了一个版本号和CRC32校验码。<br>消息长度: 4 bytes (value: 1+4+n)<br>版本号: 1 byte<br>CRC校验码: 4 bytes<br>具体的消息: n bytes</p></blockquote><h4 id="23、Kafka高效文件存储设计特点："><a href="#23、Kafka高效文件存储设计特点：" class="headerlink" title="23、Kafka高效文件存储设计特点："></a>23、Kafka高效文件存储设计特点：</h4><blockquote><p>(1).Kafka把topic中一个parition大文件分成多个小文件段，通过多个小文件段，就容易定期清除或删除已经消费完文件，减少磁盘占用。<br>(2).通过索引信息可以快速定位message和确定response的最大大小。<br>(3).通过index元数据全部映射到memory，可以避免segment file的IO磁盘操作。<br>(4).通过索引文件稀疏存储，可以大幅降低index文件元数据占用空间大小。</p></blockquote><h4 id="24、Kafka-与传统消息系统之间有三个关键区别"><a href="#24、Kafka-与传统消息系统之间有三个关键区别" class="headerlink" title="24、Kafka 与传统消息系统之间有三个关键区别"></a>24、Kafka 与传统消息系统之间有三个关键区别</h4><blockquote><p>(1).Kafka 持久化日志，这些日志可以被重复读取和无限期保留<br>(2).Kafka 是一个分布式系统：它以集群的方式运行，可以灵活伸缩，在内部通过复制数据提升容错能力和高可用性<br>(3).Kafka 支持实时的流式处理</p></blockquote><h4 id="25、Kafka创建Topic时如何将分区放置到不同的Broker中"><a href="#25、Kafka创建Topic时如何将分区放置到不同的Broker中" class="headerlink" title="25、Kafka创建Topic时如何将分区放置到不同的Broker中"></a>25、Kafka创建Topic时如何将分区放置到不同的Broker中</h4><blockquote><p>副本因子不能大于 Broker 的个数；<br>第一个分区（编号为0）的第一个副本放置位置是随机从 brokerList 选择的；<br>其他分区的第一个副本放置位置相对于第0个分区依次往后移。也就是如果我们有5个 Broker，5个分区，假设第一个分区放在第四个 Broker 上，那么第二个分区将会放在第五个 Broker 上；第三个分区将会放在第一个 Broker 上；第四个分区将会放在第二个 Broker 上，依次类推；<br>剩余的副本相对于第一个副本放置位置其实是由 nextReplicaShift 决定的，而这个数也是随机产生的</p></blockquote><h4 id="26、Kafka新建的分区会在哪个目录下创建"><a href="#26、Kafka新建的分区会在哪个目录下创建" class="headerlink" title="26、Kafka新建的分区会在哪个目录下创建"></a>26、Kafka新建的分区会在哪个目录下创建</h4><blockquote><p>在启动 Kafka 集群之前，我们需要配置好 log.dirs 参数，其值是 Kafka 数据的存放目录，这个参数可以配置多个目录，目录之间使用逗号分隔，通常这些目录是分布在不同的磁盘上用于提高读写性能。 当然我们也可以配置 log.dir 参数，含义一样。只需要设置其中一个即可。 如果 log.dirs 参数只配置了一个目录，那么分配到各个 Broker 上的分区肯定只能在这个目录下创建文件夹用于存放数据。 但是如果 log.dirs 参数配置了多个目录，那么 Kafka 会在哪个文件夹中创建分区目录呢？答案是：Kafka 会在含有分区目录最少的文件夹中创建新的分区目录，分区目录名为 Topic名+分区ID。注意，是分区文件夹总数最少的目录，而不是磁盘使用量最少的目录！也就是说，如果你给 log.dirs 参数新增了一个新的磁盘，新的分区目录肯定是先在这个新的磁盘上创建直到这个新的磁盘目录拥有的分区目录不是最少为止。</p></blockquote><h4 id="27、partition的数据如何保存到硬盘"><a href="#27、partition的数据如何保存到硬盘" class="headerlink" title="27、partition的数据如何保存到硬盘"></a>27、partition的数据如何保存到硬盘</h4><blockquote><p>topic中的多个partition以文件夹的形式保存到broker，每个分区序号从0递增， 且消息有序 Partition文件下有多个segment（xxx.index，xxx.log） segment 文件里的 大小和配置文件大小一致可以根据要求修改 默认为1g 如果大小大于1g时，会滚动一个新的segment并且以上一个segment最后一条消息的偏移量命名</p></blockquote><h4 id="28、kafka的ack机制"><a href="#28、kafka的ack机制" class="headerlink" title="28、kafka的ack机制"></a>28、kafka的ack机制</h4><blockquote><p>request.required.acks有三个值 0 1 -1<br>0:生产者不会等待broker的ack，这个延迟最低但是存储的保证最弱当server挂掉的时候就会丢数据<br>1：服务端会等待ack值 leader副本确认接收到消息后发送ack但是如果leader挂掉后他不确保是否复制完成新leader也会导致数据丢失<br>-1：同样在1的基础上 服务端会等所有的follower的副本受到数据后才会受到leader发出的ack，这样数据不会丢失</p></blockquote><h4 id="29、Kafka的消费者如何消费数据"><a href="#29、Kafka的消费者如何消费数据" class="headerlink" title="29、Kafka的消费者如何消费数据"></a>29、Kafka的消费者如何消费数据</h4><blockquote><p>消费者每次消费数据的时候，消费者都会记录消费的物理偏移量（offset）的位置 等到下次消费时，他会接着上次位置继续消费。同时也可以按照指定的offset进行重新消费。</p></blockquote><h4 id="30、消费者负载均衡策略"><a href="#30、消费者负载均衡策略" class="headerlink" title="30、消费者负载均衡策略"></a>30、消费者负载均衡策略</h4><blockquote><p>结合consumer的加入和退出进行再平衡策略。</p></blockquote><h4 id="31、kafka消息数据是否有序？"><a href="#31、kafka消息数据是否有序？" class="headerlink" title="31、kafka消息数据是否有序？"></a>31、kafka消息数据是否有序？</h4><blockquote><p>消费者组里某具体分区是有序的，所以要保证有序只能建一个分区，但是实际这样会存在性能问题，具体业务具体分析后确认。</p></blockquote><h4 id="32、kafaka生产数据时数据的分组策略-生产者决定数据产生到集群的哪个partition中"><a href="#32、kafaka生产数据时数据的分组策略-生产者决定数据产生到集群的哪个partition中" class="headerlink" title="32、kafaka生产数据时数据的分组策略,生产者决定数据产生到集群的哪个partition中"></a>32、kafaka生产数据时数据的分组策略,生产者决定数据产生到集群的哪个partition中</h4><blockquote><p>每一条消息都是以（key，value）格式 Key是由生产者发送数据传入 所以生产者（key）决定了数据产生到集群的哪个partition</p></blockquote><h4 id="33、kafka-consumer-什么情况会触发再平衡reblance"><a href="#33、kafka-consumer-什么情况会触发再平衡reblance" class="headerlink" title="33、kafka consumer 什么情况会触发再平衡reblance?"></a>33、kafka consumer 什么情况会触发再平衡reblance?</h4><blockquote><p>①一旦消费者加入或退出消费组，导致消费组成员列表发生变化，消费组中的所有消费者都要执行再平衡。<br>②订阅主题分区发生变化，所有消费者也都要再平衡。</p></blockquote><h4 id="34、描述下kafka-consumer-再平衡步骤"><a href="#34、描述下kafka-consumer-再平衡步骤" class="headerlink" title="34、描述下kafka consumer 再平衡步骤?"></a>34、描述下kafka consumer 再平衡步骤?</h4><blockquote><p>①关闭数据拉取线程，清空队列和消息流，提交偏移量；<br>②释放分区所有权，删除zk中分区和消费者的所有者关系；<br>③将所有分区重新分配给每个消费者，每个消费者都会分到不同分区；<br>④将分区对应的消费者所有关系写入ZK，记录分区的所有权信息；<br>⑤重启消费者拉取线程管理器，管理每个分区的拉取线程。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;kafka&quot;&gt;&lt;a href=&quot;#kafka&quot; class=&quot;headerlink&quot; title=&quot;kafka&quot;&gt;&lt;/a&gt;kafka&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;本文转载自： &lt;a href=&quot;https://chenhefei.github.io/2
      
    
    </summary>
    
    
      <category term="大数据" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="kafka" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/kafka/"/>
    
    
      <category term="教程" scheme="https://masteryang4.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="大数据" scheme="https://masteryang4.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="kafka" scheme="https://masteryang4.github.io/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>spark系列之spark-sql</title>
    <link href="https://masteryang4.github.io/2020/06/18/spark%E7%B3%BB%E5%88%97%E4%B9%8Bspark-sql/"/>
    <id>https://masteryang4.github.io/2020/06/18/spark%E7%B3%BB%E5%88%97%E4%B9%8Bspark-sql/</id>
    <published>2020-06-18T04:25:47.000Z</published>
    <updated>2020-06-18T05:11:28.375Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SparkSQL概述"><a href="#SparkSQL概述" class="headerlink" title="SparkSQL概述"></a>SparkSQL概述</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Spark SQL是Spark用于结构化数据(structured data)处理的Spark模块</p><h2 id="Hive与SparkSQL"><a href="#Hive与SparkSQL" class="headerlink" title="Hive与SparkSQL"></a>Hive与SparkSQL</h2><p>其中SparkSQL作为Spark生态的一员继续发展，而不再受限于Hive，只是兼容Hive；</p><p>而Hive on Spark是一个Hive的发展计划，该计划将Spark作为Hive的底层引擎之一，也就是说，Hive将不再受限于一个引擎，可以采用Map-Reduce、Tez、Spark等引擎。</p><p>Spark SQL为了简化RDD的开发，提高开发效率，提供了2个编程抽象，类似Spark Core中的RDD</p><ul><li><p>DataFrame</p></li><li><p>DataSet</p></li></ul><h2 id="DataFrame简介"><a href="#DataFrame简介" class="headerlink" title="DataFrame简介"></a>DataFrame简介</h2><p>在Spark中，DataFrame是一种以RDD为基础的分布式数据集，类似于传统数据库中的二维表格。DataFrame与RDD的主要区别在于，前者带有schema元信息，即DataFrame所表示的二维表数据集的每一列都带有名称和类型。这使得Spark SQL得以洞察更多的结构信息，从而对藏于DataFrame背后的数据源以及作用于DataFrame之上的变换进行了针对性的优化，最终达到大幅提升运行时效率的目标。反观RDD，由于无从得知所存数据元素的具体内部结构，Spark Core只能在stage层面进行简单、通用的流水线优化。</p><p>同时，与Hive类似，DataFrame也支持嵌套数据类型（struct、array和map）。从 API 易用性的角度上看，DataFrame API提供的是一套高层的关系操作，比函数式的RDD API 要更加友好，门槛更低。</p><p><a href="https://pic.downk.cc/item/5eead8dd14195aa594f363b6.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://pic.downk.cc/item/5eead8dd14195aa594f363b6.png" class="lazyload"></a></p><p>上图直观地体现了DataFrame和RDD的区别。</p><p>左侧的RDD[Person]虽然以Person为类型参数，但Spark框架本身不了解Person类的内部结构。而右侧的DataFrame却提供了详细的结构信息，使得 Spark SQL 可以清楚地知道该数据集中包含哪些列，每列的名称和类型各是什么。</p><p>DataFrame是为数据提供了Schema的视图。可以把它当做数据库中的一张表来对待</p><p>DataFrame也是懒执行的，但性能上比RDD要高，主要原因：<strong>优化的执行计划</strong>，即查询计划通过Spark catalyst optimiser进行优化</p><h2 id="DataSet简介"><a href="#DataSet简介" class="headerlink" title="DataSet简介"></a>DataSet简介</h2><p>DataSet是分布式数据集合。DataSet是<strong>Spark 1.6</strong>中添加的一个新抽象，是DataFrame的一个扩展。它提供了RDD的优势（强类型，使用强大的lambda函数的能力）以及Spark SQL优化执行引擎的优点。DataSet也可以使用功能性的转换（操作map，flatMap，filter等等）。</p><ul><li><p>DataSet是DataFrame API的一个扩展，是SparkSQL最新的数据抽象</p></li><li><p>用户友好的API风格，既具有类型安全检查也具有DataFrame的查询优化特性；</p></li><li><p>用样例类来对DataSet中定义数据的结构信息，样例类中每个属性的名称直接映射到DataSet中的字段名称；</p></li><li><p>DataSet是强类型的。比如可以有DataSet[Car]，DataSet[Person]。</p></li><li><p>DataFrame是DataSet的特列，DataFrame=DataSet[Row] ，所以可以通过as方法将DataFrame转换为DataSet。Row是一个类型，跟Car、Person这些的类型一样，所有的表结构信息都用Row来表示。获取数据时需要指定顺序</p></li></ul><h1 id="SparkSQL核心编程"><a href="#SparkSQL核心编程" class="headerlink" title="SparkSQL核心编程"></a>SparkSQL核心编程</h1><p>Spark Core中，如果想要执行应用程序，需要首先构建上下文环境对象SparkContext，Spark SQL其实可以理解为对Spark Core的一种封装，不仅仅在模型上进行了封装，上下文环境对象也进行了封装。</p><p>SparkSession是Spark最新的SQL查询起始点，SparkSession内部封装了SparkContext，所以计算实际上是由sparkContext完成的。</p><h2 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h2><p>Spark SQL的DataFrame API 允许我们使用 DataFrame 而不用必须去注册临时表或者生成 SQL 表达式。DataFrame API 既有 transformation操作也有action操作。</p><h3 id="创建df"><a href="#创建df" class="headerlink" title="创建df"></a>创建df</h3><p>在Spark SQL中SparkSession是创建DataFrame和执行SQL的入口，创建DataFrame有三种方式：通过Spark的数据源进行创建；从一个存在的RDD进行转换；还可以从Hive Table进行查询返回。</p><p>1、 从Spark数据源进行创建</p><ul><li>读取json文件创建DataFrame</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> df = spark.read.json(<span class="string">"data/user.json"</span>)</span><br><span class="line">df: org.apache.spark.sql.<span class="type">DataFrame</span> = [age: bigint， username: string]</span><br></pre></td></tr></table></figure></div><p>2、从RDD进行转换</p><p>3、从Hive Table进行查询返回</p><h3 id="SQL语法"><a href="#SQL语法" class="headerlink" title="SQL语法"></a>SQL语法</h3><p>SQL语法风格是指我们查询数据的时候使用SQL语句来查询，这种风格的查询必须要有临时视图或者全局视图来辅助</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> df = spark.read.json(<span class="string">"data/user.json"</span>)</span><br><span class="line">df: org.apache.spark.sql.<span class="type">DataFrame</span> = [age: bigint， username: string]</span><br><span class="line">scala&gt; df.createOrReplaceTempView(<span class="string">"people"</span>)</span><br><span class="line">scala&gt; <span class="keyword">val</span> sqlDF = spark.sql(<span class="string">"SELECT * FROM people"</span>)</span><br><span class="line">sqlDF: org.apache.spark.sql.<span class="type">DataFrame</span> = [age: bigint， name: string]</span><br><span class="line">scala&gt; sqlDF.show</span><br><span class="line">+---+--------+</span><br><span class="line">|age|username|</span><br><span class="line">+---+--------+</span><br><span class="line">| <span class="number">20</span>|zhangsan|</span><br><span class="line">| <span class="number">30</span>|     lisi|</span><br><span class="line">| <span class="number">40</span>|   wangwu|</span><br><span class="line">+---+--------+</span><br></pre></td></tr></table></figure></div><blockquote><p>注意：普通临时表是Session范围内的，如果想应用范围内有效，可以使用全局临时表。</p><p>使用全局临时表时需要全路径访问，如：global_temp.people</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; df.createGlobalTempView(<span class="string">"people"</span>)</span><br><span class="line">scala&gt; spark.sql(<span class="string">"SELECT * FROM global_temp.people"</span>).show()</span><br><span class="line">+---+--------+</span><br><span class="line">|age|username|</span><br><span class="line">+---+--------+</span><br><span class="line">| <span class="number">20</span>|zhangsan|</span><br><span class="line">| <span class="number">30</span>|     lisi|</span><br><span class="line">| <span class="number">40</span>|   wangwu|</span><br><span class="line">+---+--------+</span><br><span class="line"></span><br><span class="line">scala&gt; spark.newSession().sql(<span class="string">"SELECT * FROM global_temp.people"</span>).show()</span><br><span class="line">+---+--------+</span><br><span class="line">|age|username|</span><br><span class="line">+---+--------+</span><br><span class="line">| <span class="number">20</span>|zhangsan|</span><br><span class="line">| <span class="number">30</span>|     lisi|</span><br><span class="line">| <span class="number">40</span>|   wangwu|</span><br><span class="line">+---+--------+</span><br></pre></td></tr></table></figure></div><h3 id="DSL语法"><a href="#DSL语法" class="headerlink" title="DSL语法"></a>DSL语法</h3><p>DataFrame提供一个特定领域语言(domain-specific language, DSL)去管理结构化的数据。可以在 Scala, Java, Python 和 R 中使用 DSL，使用 DSL 语法风格不必去创建临时视图了</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> df = spark.read.json(<span class="string">"data/user.json"</span>)</span><br><span class="line">df: org.apache.spark.sql.<span class="type">DataFrame</span> = [age: bigint， name: string]</span><br><span class="line"></span><br><span class="line">scala&gt; df.printSchema</span><br><span class="line">root</span><br><span class="line"> |-- age: <span class="type">Long</span> (nullable = <span class="literal">true</span>)</span><br><span class="line"> |-- username: string (nullable = <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">scala&gt; df.select(<span class="string">"username"</span>).show()</span><br><span class="line">+--------+</span><br><span class="line">|username|</span><br><span class="line">+--------+</span><br><span class="line">|zhangsan|</span><br><span class="line">|     lisi|</span><br><span class="line">|   wangwu|</span><br><span class="line">+--------+</span><br><span class="line"></span><br><span class="line">scala&gt; df.select($<span class="string">"username"</span>,$<span class="string">"age"</span> + <span class="number">1</span>).show</span><br><span class="line">scala&gt; df.select(<span class="symbol">'username</span>, <span class="symbol">'age</span> + <span class="number">1</span>).show()</span><br><span class="line">scala&gt; df.select(<span class="symbol">'username</span>, <span class="symbol">'age</span> + <span class="number">1</span> as <span class="string">"newage"</span>).show()</span><br><span class="line"></span><br><span class="line">+--------+---------+</span><br><span class="line">|username|(age + <span class="number">1</span>)|</span><br><span class="line">+--------+---------+</span><br><span class="line">|zhangsan|        <span class="number">21</span>|</span><br><span class="line">|    lisi|        <span class="number">31</span>|</span><br><span class="line">| wangwu|         <span class="number">41</span>|</span><br><span class="line">+--------+---------+</span><br><span class="line"></span><br><span class="line">scala&gt; df.filter($<span class="string">"age"</span>&gt;<span class="number">30</span>).show</span><br><span class="line">+---+---------+</span><br><span class="line">|age| username|</span><br><span class="line">+---+---------+</span><br><span class="line">| <span class="number">40</span>|    wangwu|</span><br><span class="line">+---+---------+</span><br><span class="line"></span><br><span class="line">scala&gt; df.groupBy(<span class="string">"age"</span>).count.show</span><br><span class="line">+---+-----+</span><br><span class="line">|age|count|</span><br><span class="line">+---+-----+</span><br><span class="line">| <span class="number">20</span>|    <span class="number">1</span>|</span><br><span class="line">| <span class="number">30</span>|    <span class="number">1</span>|</span><br><span class="line">| <span class="number">40</span>|    <span class="number">1</span>|</span><br><span class="line">+---+-----+</span><br></pre></td></tr></table></figure></div><h3 id="RDD转换为DataFrame"><a href="#RDD转换为DataFrame" class="headerlink" title="RDD转换为DataFrame"></a>RDD转换为DataFrame</h3><p>在IDEA中开发程序时，如果需要RDD与DF或者DS之间互相操作，那么需要引入 import spark.implicits._</p><p>这里的spark不是Scala中的包名，而是创建的sparkSession对象的变量名称，所以必须先创建SparkSession对象再导入。这里的spark对象不能使用var声明，因为Scala只支持val修饰的对象的引入。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> idRDD = sc.textFile(<span class="string">"data/id.txt"</span>)</span><br><span class="line">scala&gt; idRDD.toDF(<span class="string">"id"</span>).show</span><br><span class="line">+---+</span><br><span class="line">| id|</span><br><span class="line">+---+</span><br><span class="line">|  <span class="number">1</span>|</span><br><span class="line">|  <span class="number">2</span>|</span><br><span class="line">|  <span class="number">3</span>|</span><br><span class="line">|  <span class="number">4</span>|</span><br><span class="line">+---+</span><br></pre></td></tr></table></figure></div><blockquote><p>实际开发中，一般通过样例类将RDD转换为DataFrame</p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">name:<span class="type">String</span>, age:<span class="type">Int</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">defined</span> <span class="title">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"><span class="title">scala&gt;</span> <span class="title">sc</span>.<span class="title">makeRDD</span>(<span class="params"><span class="type">List</span>(("zhangsan",30</span>), (<span class="params">"lisi",40</span>))).<span class="title">map</span>(<span class="params">t=&gt;<span class="type">User</span>(t._1, t._2</span>)).<span class="title">toDF</span>.<span class="title">show</span></span></span><br><span class="line"><span class="class"><span class="title">+--------+---+</span></span></span><br><span class="line"><span class="class"><span class="title">|</span>     <span class="title">name|age|</span></span></span><br><span class="line"><span class="class"><span class="title">+--------+---+</span></span></span><br><span class="line"><span class="class"><span class="title">|zhangsan|</span> 30<span class="title">|</span></span></span><br><span class="line"><span class="class"><span class="title">|</span>    <span class="title">lisi|</span> 40<span class="title">|</span></span></span><br><span class="line"><span class="class"><span class="title">+--------+---+</span></span></span><br></pre></td></tr></table></figure></div><h3 id="DataFrame转换为RDD"><a href="#DataFrame转换为RDD" class="headerlink" title="DataFrame转换为RDD"></a>DataFrame转换为RDD</h3><p>DataFrame其实就是对RDD的封装，所以可以直接获取内部的RDD</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> df = sc.makeRDD(<span class="type">List</span>((<span class="string">"zhangsan"</span>,<span class="number">30</span>), (<span class="string">"lisi"</span>,<span class="number">40</span>))).map(t=&gt;<span class="type">User</span>(t._1, t._2)).toDF</span><br><span class="line">df: org.apache.spark.sql.<span class="type">DataFrame</span> = [name: string, age: int]</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> rdd = df.rdd</span><br><span class="line">rdd: org.apache.spark.rdd.<span class="type">RDD</span>[org.apache.spark.sql.<span class="type">Row</span>] = <span class="type">MapPartitionsRDD</span>[<span class="number">46</span>] at rdd at &lt;console&gt;:<span class="number">25</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> array = rdd.collect</span><br><span class="line">array: <span class="type">Array</span>[org.apache.spark.sql.<span class="type">Row</span>] = <span class="type">Array</span>([zhangsan,<span class="number">30</span>], [lisi,<span class="number">40</span>])</span><br></pre></td></tr></table></figure></div><p>注意：此时得到的RDD存储类型为Row</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; array(<span class="number">0</span>)</span><br><span class="line">res28: org.apache.spark.sql.<span class="type">Row</span> = [zhangsan,<span class="number">30</span>]</span><br><span class="line">scala&gt; array(<span class="number">0</span>)(<span class="number">0</span>)</span><br><span class="line">res29: <span class="type">Any</span> = zhangsan</span><br><span class="line">scala&gt; array(<span class="number">0</span>).getAs[<span class="type">String</span>](<span class="string">"name"</span>)</span><br><span class="line">res30: <span class="type">String</span> = zhangsan</span><br></pre></td></tr></table></figure></div><h2 id="DataSet"><a href="#DataSet" class="headerlink" title="DataSet"></a>DataSet</h2><p>DataSet是具有强类型的数据集合，需要提供对应的类型信息。</p><h3 id="创建DataSet"><a href="#创建DataSet" class="headerlink" title="创建DataSet"></a>创建DataSet</h3><p>1、使用样例类序列创建DataSet</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">name: <span class="type">String</span>, age: <span class="type">Long</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">defined</span> <span class="title">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">scala&gt;</span> <span class="title">val</span> <span class="title">caseClassDS</span> </span>= <span class="type">Seq</span>(<span class="type">Person</span>(<span class="string">"zhangsan"</span>,<span class="number">2</span>)).toDS()</span><br><span class="line"></span><br><span class="line">caseClassDS: org.apache.spark.sql.<span class="type">Dataset</span>[<span class="type">Person</span>] = [name: string, age: <span class="type">Long</span>]</span><br><span class="line"></span><br><span class="line">scala&gt; caseClassDS.show</span><br><span class="line">+---------+---+</span><br><span class="line">|     name|age|</span><br><span class="line">+---------+---+</span><br><span class="line">| zhangsan|  <span class="number">2</span>|</span><br><span class="line">+---------+---+</span><br></pre></td></tr></table></figure></div><p>2、使用基本类型的序列创建DataSet</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> ds = <span class="type">Seq</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>).toDS</span><br><span class="line">ds: org.apache.spark.sql.<span class="type">Dataset</span>[<span class="type">Int</span>] = [value: int]</span><br><span class="line"></span><br><span class="line">scala&gt; ds.show</span><br><span class="line">+-----+</span><br><span class="line">|value|</span><br><span class="line">+-----+</span><br><span class="line">|    <span class="number">1</span>|</span><br><span class="line">|    <span class="number">2</span>|</span><br><span class="line">|    <span class="number">3</span>|</span><br><span class="line">|    <span class="number">4</span>|</span><br><span class="line">|    <span class="number">5</span>|</span><br><span class="line">+-----+</span><br></pre></td></tr></table></figure></div><blockquote><p>注意：在实际使用的时候，很少用到把序列转换成DataSet，更多的是通过RDD来得到DataSet</p></blockquote><h3 id="RDD转换为DataSet"><a href="#RDD转换为DataSet" class="headerlink" title="RDD转换为DataSet"></a>RDD转换为DataSet</h3><p>SparkSQL能够自动将包含有case类的RDD转换成DataSet，case类定义了table的结构，case类属性通过反射变成了表的列名。Case类可以包含诸如Seq或者Array等复杂的结构。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">name:<span class="type">String</span>, age:<span class="type">Int</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">defined</span> <span class="title">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">scala&gt;</span> <span class="title">sc</span>.<span class="title">makeRDD</span>(<span class="params"><span class="type">List</span>(("zhangsan",30</span>), (<span class="params">"lisi",49</span>))).<span class="title">map</span>(<span class="params">t=&gt;<span class="type">User</span>(t._1, t._2</span>)).<span class="title">toDS</span></span></span><br><span class="line"><span class="class"><span class="title">res11</span></span>: org.apache.spark.sql.<span class="type">Dataset</span>[<span class="type">User</span>] = [name: string, age: int]</span><br></pre></td></tr></table></figure></div><h3 id="DataSet转换为RDD"><a href="#DataSet转换为RDD" class="headerlink" title="DataSet转换为RDD"></a>DataSet转换为RDD</h3><p>DataSet其实也是对RDD的封装，所以可以直接获取内部的RDD</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">name:<span class="type">String</span>, age:<span class="type">Int</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">defined</span> <span class="title">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">scala&gt;</span> <span class="title">sc</span>.<span class="title">makeRDD</span>(<span class="params"><span class="type">List</span>(("zhangsan",30</span>), (<span class="params">"lisi",49</span>))).<span class="title">map</span>(<span class="params">t=&gt;<span class="type">User</span>(t._1, t._2</span>)).<span class="title">toDS</span></span></span><br><span class="line"><span class="class"><span class="title">res11</span></span>: org.apache.spark.sql.<span class="type">Dataset</span>[<span class="type">User</span>] = [name: string, age: int]</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> rdd = res11.rdd</span><br><span class="line">rdd: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">User</span>] = <span class="type">MapPartitionsRDD</span>[<span class="number">51</span>] at rdd at &lt;console&gt;:<span class="number">25</span></span><br><span class="line"></span><br><span class="line">scala&gt; rdd.collect</span><br><span class="line">res12: <span class="type">Array</span>[<span class="type">User</span>] = <span class="type">Array</span>(<span class="type">User</span>(zhangsan,<span class="number">30</span>), <span class="type">User</span>(lisi,<span class="number">49</span>))</span><br></pre></td></tr></table></figure></div><h2 id="DataFrame和DataSet转换"><a href="#DataFrame和DataSet转换" class="headerlink" title="DataFrame和DataSet转换"></a>DataFrame和DataSet转换</h2><p>DataFrame其实是DataSet的特例，所以它们之间是可以互相转换的。</p><ul><li>DataFrame转换为DataSet</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">name:<span class="type">String</span>, age:<span class="type">Int</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">defined</span> <span class="title">class</span> <span class="title">User</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">scala&gt;</span> <span class="title">val</span> <span class="title">df</span> </span>= sc.makeRDD(<span class="type">List</span>((<span class="string">"zhangsan"</span>,<span class="number">30</span>), (<span class="string">"lisi"</span>,<span class="number">49</span>))).toDF(<span class="string">"name"</span>,<span class="string">"age"</span>)</span><br><span class="line">df: org.apache.spark.sql.<span class="type">DataFrame</span> = [name: string, age: int]</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> ds = df.as[<span class="type">User</span>]</span><br><span class="line">ds: org.apache.spark.sql.<span class="type">Dataset</span>[<span class="type">User</span>] = [name: string, age: int]</span><br></pre></td></tr></table></figure></div><ul><li>DataSet转换为DataFrame</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> ds = df.as[<span class="type">User</span>]</span><br><span class="line">ds: org.apache.spark.sql.<span class="type">Dataset</span>[<span class="type">User</span>] = [name: string, age: int]</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> df = ds.toDF</span><br><span class="line">df: org.apache.spark.sql.<span class="type">DataFrame</span> = [name: string, age: int]</span><br></pre></td></tr></table></figure></div><h2 id="RDD、DataFrame、DataSet三者关系"><a href="#RDD、DataFrame、DataSet三者关系" class="headerlink" title="RDD、DataFrame、DataSet三者关系"></a>RDD、DataFrame、DataSet三者关系</h2><p>在SparkSQL中Spark为我们提供了两个新的抽象，分别是DataFrame和DataSet。他们和RDD有什么区别呢？首先从版本的产生上来看：</p><ul><li><p>Spark1.0 =&gt; RDD </p></li><li><p>Spark1.3 =&gt; DataFrame</p></li><li><p>Spark1.6 =&gt; Dataset</p></li></ul><p>如果同样的数据都给到这三个数据结构，他们分别计算之后，都会给出相同的结果。不同是的他们的执行效率和执行方式。在后期的Spark版本中，DataSet有可能会逐步取代RDD和DataFrame成为唯一的API接口。</p><h3 id="三者共性"><a href="#三者共性" class="headerlink" title="三者共性"></a>三者共性</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">RDD、DataFrame、DataSet全都是spark平台下的分布式弹性数据集，为处理超大型数据提供便利;</span><br><span class="line">三者都有惰性机制，在进行创建、转换，如map方法时，不会立即执行，只有在遇到Action如foreach时，三者才会开始遍历运算;</span><br><span class="line">三者有许多共同的函数，如filter，排序等;</span><br><span class="line">在对DataFrame和Dataset进行操作许多操作都需要这个包:import spark.implicits._（在创建好SparkSession对象后尽量直接导入）</span><br><span class="line">三者都会根据 Spark 的内存情况自动缓存运算，这样即使数据量很大，也不用担心会内存溢出</span><br><span class="line">三者都有partition的概念</span><br><span class="line">DataFrame和DataSet均可使用模式匹配获取各个字段的值和类型</span><br></pre></td></tr></table></figure></div><h3 id="三者区别"><a href="#三者区别" class="headerlink" title="三者区别"></a>三者区别</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1)RDD</span><br><span class="line">    RDD一般和spark mlib同时使用</span><br><span class="line">    RDD不支持sparksql操作</span><br><span class="line">2)DataFrame</span><br><span class="line">    与RDD和Dataset不同，DataFrame每一行的类型固定为Row，每一列的值没法直接访问，只有通过解析才能获取各个字段的值</span><br><span class="line">    DataFrame与DataSet一般不与 spark mlib 同时使用</span><br><span class="line">    DataFrame与DataSet均支持 SparkSQL 的操作，比如select，groupby之类，还能注册临时表&#x2F;视窗，进行 sql 语句操作</span><br><span class="line">    DataFrame与DataSet支持一些特别方便的保存方式，比如保存成csv，可以带上表头，这样每一列的字段名一目了然(后面专门讲解)</span><br><span class="line">3)DataSet</span><br><span class="line">    Dataset和DataFrame拥有完全相同的成员函数，区别只是每一行的数据类型不同。 DataFrame其实就是DataSet的一个特例  type DataFrame &#x3D; Dataset[Row]</span><br><span class="line">    DataFrame也可以叫Dataset[Row],每一行的类型是Row，不解析，每一行究竟有哪些字段，各个字段又是什么类型都无从得知，只能用上面提到的getAS方法或者共性中的第七条提到的模式匹配拿出特定字段。而Dataset中，每一行是什么类型是不一定的，在自定义了case class之后可以很自由的获得每一行的信息</span><br></pre></td></tr></table></figure></div><h3 id="三者的互相转换"><a href="#三者的互相转换" class="headerlink" title="三者的互相转换"></a>三者的互相转换</h3><p><a href="https://pic.downk.cc/item/5eeae20e14195aa594fe779a.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://pic.downk.cc/item/5eeae20e14195aa594fe779a.png" class="lazyload"></a></p><h2 id="IDEA开发SparkSQL"><a href="#IDEA开发SparkSQL" class="headerlink" title="IDEA开发SparkSQL"></a>IDEA开发SparkSQL</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-sql_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SparkSQL01_Demo</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//创建上下文环境配置对象</span></span><br><span class="line">    <span class="keyword">val</span> conf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"SparkSQL01_Demo"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建SparkSession对象</span></span><br><span class="line">    <span class="keyword">val</span> spark: <span class="type">SparkSession</span> = <span class="type">SparkSession</span>.builder().config(conf).getOrCreate()</span><br><span class="line">    <span class="comment">//RDD=&gt;DataFrame=&gt;DataSet转换需要引入隐式转换规则，否则无法转换</span></span><br><span class="line">    <span class="comment">//spark不是包名，是上下文环境对象名</span></span><br><span class="line">    <span class="keyword">import</span> spark.implicits._</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取json文件 创建DataFrame  &#123;"username": "lisi","age": 18&#125;</span></span><br><span class="line">    <span class="keyword">val</span> df: <span class="type">DataFrame</span> = spark.read.json(<span class="string">"D:\\dev\\workspace\\spark-bak\\spark-bak-00\\input\\test.json"</span>)</span><br><span class="line">    <span class="comment">//df.show()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//SQL风格语法</span></span><br><span class="line">    df.createOrReplaceTempView(<span class="string">"user"</span>)</span><br><span class="line">    <span class="comment">//spark.sql("select avg(age) from user").show</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//DSL风格语法</span></span><br><span class="line">    <span class="comment">//df.select("username","age").show()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//*****RDD=&gt;DataFrame=&gt;DataSet*****</span></span><br><span class="line">    <span class="comment">//RDD</span></span><br><span class="line">    <span class="keyword">val</span> rdd1: <span class="type">RDD</span>[(<span class="type">Int</span>, <span class="type">String</span>, <span class="type">Int</span>)] = spark.sparkContext.makeRDD(<span class="type">List</span>((<span class="number">1</span>,<span class="string">"qiaofeng"</span>,<span class="number">30</span>),(<span class="number">2</span>,<span class="string">"xuzhu"</span>,<span class="number">28</span>),(<span class="number">3</span>,<span class="string">"duanyu"</span>,<span class="number">20</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//DataFrame</span></span><br><span class="line">    <span class="keyword">val</span> df1: <span class="type">DataFrame</span> = rdd1.toDF(<span class="string">"id"</span>,<span class="string">"name"</span>,<span class="string">"age"</span>)</span><br><span class="line">    <span class="comment">//df1.show()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//DateSet</span></span><br><span class="line">    <span class="keyword">val</span> ds1: <span class="type">Dataset</span>[<span class="type">User</span>] = df1.as[<span class="type">User</span>]</span><br><span class="line">    <span class="comment">//ds1.show()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//*****DataSet=&gt;DataFrame=&gt;RDD*****</span></span><br><span class="line">    <span class="comment">//DataFrame</span></span><br><span class="line">    <span class="keyword">val</span> df2: <span class="type">DataFrame</span> = ds1.toDF()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//RDD  返回的RDD类型为Row，里面提供的getXXX方法可以获取字段值，类似jdbc处理结果集，但是索引从0开始</span></span><br><span class="line">    <span class="keyword">val</span> rdd2: <span class="type">RDD</span>[<span class="type">Row</span>] = df2.rdd</span><br><span class="line">    <span class="comment">//rdd2.foreach(a=&gt;println(a.getString(1)))</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//*****RDD=&gt;DataSet*****</span></span><br><span class="line">    rdd1.map&#123;</span><br><span class="line">      <span class="keyword">case</span> (id,name,age)=&gt;<span class="type">User</span>(id,name,age)</span><br><span class="line">    &#125;.toDS()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//*****DataSet=&gt;=&gt;RDD*****</span></span><br><span class="line">    ds1.rdd</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    spark.stop()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">id:<span class="type">Int</span>,name:<span class="type">String</span>,age:<span class="type">Int</span></span>)</span></span><br></pre></td></tr></table></figure></div><h2 id="用户自定义函数"><a href="#用户自定义函数" class="headerlink" title="用户自定义函数"></a>用户自定义函数</h2><p>用户可以通过spark.udf功能添加自定义函数，实现自定义功能。</p><h3 id="UDF"><a href="#UDF" class="headerlink" title="UDF"></a>UDF</h3><p>创建DataFrame</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> df = spark.read.json(<span class="string">"data/user.json"</span>)</span><br><span class="line">df: org.apache.spark.sql.<span class="type">DataFrame</span> = [age: bigint， username: string]</span><br></pre></td></tr></table></figure></div><p>注册UDF</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; spark.udf.register(<span class="string">"addName"</span>,(x:<span class="type">String</span>)=&gt; <span class="string">"Name:"</span>+x)</span><br><span class="line">res9: org.apache.spark.sql.expressions.<span class="type">UserDefinedFunction</span> = <span class="type">UserDefinedFunction</span>(&lt;function1&gt;,<span class="type">StringType</span>,<span class="type">Some</span>(<span class="type">List</span>(<span class="type">StringType</span>)))</span><br></pre></td></tr></table></figure></div><p>创建临时表</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; df.createOrReplaceTempView(<span class="string">"people"</span>)</span><br></pre></td></tr></table></figure></div><p>应用UDF</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; spark.sql(<span class="string">"Select addName(name),age from people"</span>).show()</span><br></pre></td></tr></table></figure></div><h3 id="UDAF"><a href="#UDAF" class="headerlink" title="UDAF"></a>UDAF</h3><p>强类型的Dataset和弱类型的DataFrame都提供了相关的聚合函数， 如 count()，countDistinct()，avg()，max()，min()。除此之外，用户可以设定自己的自定义聚合函数。通过继承UserDefinedAggregateFunction来实现用户自定义聚合函数。</p><p><strong>需求：实现求平均工资</strong></p><p>1、RDD实现</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> conf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">"app"</span>).setMaster(<span class="string">"local[*]"</span>)</span><br><span class="line"><span class="keyword">val</span> sc: <span class="type">SparkContext</span> = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br><span class="line"><span class="keyword">val</span> res: (<span class="type">Int</span>, <span class="type">Int</span>) = sc.makeRDD(<span class="type">List</span>((<span class="string">"zhangsan"</span>, <span class="number">20</span>), (<span class="string">"lisi"</span>, <span class="number">30</span>), (<span class="string">"wangw"</span>, <span class="number">40</span>))).map &#123;</span><br><span class="line">  <span class="keyword">case</span> (name, age) =&gt; &#123;</span><br><span class="line">    (age, <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;.reduce &#123;</span><br><span class="line">  (t1, t2) =&gt; &#123;</span><br><span class="line">    (t1._1 + t2._1, t1._2 + t2._2)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">println(res._1/res._2)</span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line">sc.stop()</span><br></pre></td></tr></table></figure></div><p>2、累加器实现</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyAC</span> <span class="keyword">extends</span> <span class="title">AccumulatorV2</span>[<span class="type">Int</span>,<span class="type">Int</span>]</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> sum:<span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">  <span class="keyword">var</span> count:<span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">isZero</span></span>: <span class="type">Boolean</span> = &#123;</span><br><span class="line">    <span class="keyword">return</span> sum ==<span class="number">0</span> &amp;&amp; count == <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">copy</span></span>(): <span class="type">AccumulatorV2</span>[<span class="type">Int</span>, <span class="type">Int</span>] = &#123;</span><br><span class="line">    <span class="keyword">val</span> newMyAc = <span class="keyword">new</span> <span class="type">MyAC</span></span><br><span class="line">    newMyAc.sum = <span class="keyword">this</span>.sum</span><br><span class="line">    newMyAc.count = <span class="keyword">this</span>.count</span><br><span class="line">    newMyAc</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">reset</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    sum =<span class="number">0</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(v: <span class="type">Int</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    sum += v</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">merge</span></span>(other: <span class="type">AccumulatorV2</span>[<span class="type">Int</span>, <span class="type">Int</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    other <span class="keyword">match</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> o:<span class="type">MyAC</span>=&gt;&#123;</span><br><span class="line">        sum += o.sum</span><br><span class="line">        count += o.count</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">case</span> _=&gt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">value</span></span>: <span class="type">Int</span> = sum/count</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>3、实现方式 - UDAF - 弱类型</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">定义类继承UserDefinedAggregateFunction，并重写其中方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyAveragUDAF</span> <span class="keyword">extends</span> <span class="title">UserDefinedAggregateFunction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 聚合函数输入参数的数据类型</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">inputSchema</span></span>: <span class="type">StructType</span> = <span class="type">StructType</span>(<span class="type">Array</span>(<span class="type">StructField</span>(<span class="string">"age"</span>,<span class="type">IntegerType</span>)))</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 聚合函数缓冲区中值的数据类型(age,count)</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">bufferSchema</span></span>: <span class="type">StructType</span> = &#123;</span><br><span class="line">    <span class="type">StructType</span>(<span class="type">Array</span>(<span class="type">StructField</span>(<span class="string">"sum"</span>,<span class="type">LongType</span>),<span class="type">StructField</span>(<span class="string">"count"</span>,<span class="type">LongType</span>)))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 函数返回值的数据类型</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">dataType</span></span>: <span class="type">DataType</span> = <span class="type">DoubleType</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 稳定性：对于相同的输入是否一直返回相同的输出。</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">deterministic</span></span>: <span class="type">Boolean</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 函数缓冲区初始化</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">initialize</span></span>(buffer: <span class="type">MutableAggregationBuffer</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 存年龄的总和</span></span><br><span class="line">    buffer(<span class="number">0</span>) = <span class="number">0</span>L</span><br><span class="line">    <span class="comment">// 存年龄的个数</span></span><br><span class="line">    buffer(<span class="number">1</span>) = <span class="number">0</span>L</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 更新缓冲区中的数据</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">update</span></span>(buffer: <span class="type">MutableAggregationBuffer</span>,input: <span class="type">Row</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (!input.isNullAt(<span class="number">0</span>)) &#123;</span><br><span class="line">      buffer(<span class="number">0</span>) = buffer.getLong(<span class="number">0</span>) + input.getInt(<span class="number">0</span>)</span><br><span class="line">      buffer(<span class="number">1</span>) = buffer.getLong(<span class="number">1</span>) + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 合并缓冲区</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">merge</span></span>(buffer1: <span class="type">MutableAggregationBuffer</span>,buffer2: <span class="type">Row</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    buffer1(<span class="number">0</span>) = buffer1.getLong(<span class="number">0</span>) + buffer2.getLong(<span class="number">0</span>)</span><br><span class="line">    buffer1(<span class="number">1</span>) = buffer1.getLong(<span class="number">1</span>) + buffer2.getLong(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 计算最终结果</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">evaluate</span></span>(buffer: <span class="type">Row</span>): <span class="type">Double</span> = buffer.getLong(<span class="number">0</span>).toDouble / buffer.getLong(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">。。。</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建聚合函数</span></span><br><span class="line"><span class="keyword">var</span> myAverage = <span class="keyword">new</span> <span class="type">MyAveragUDAF</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在spark中注册聚合函数</span></span><br><span class="line">spark.udf.register(<span class="string">"avgAge"</span>,myAverage)</span><br><span class="line"></span><br><span class="line">spark.sql(<span class="string">"select avgAge(age) from user"</span>).show()</span><br></pre></td></tr></table></figure></div><p>4、实现方式 - UDAF - 强类型</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//输入数据类型</span></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">User01</span>(<span class="params">username:<span class="type">String</span>,age:<span class="type">Long</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">//缓存类型</span></span></span><br><span class="line"><span class="class"><span class="title">case</span> <span class="title">class</span> <span class="title">AgeBuffer</span>(<span class="params">var sum:<span class="type">Long</span>,var count:<span class="type">Long</span></span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">/**</span></span></span><br><span class="line"><span class="class">  <span class="title">*</span> <span class="title">定义类继承org</span>.<span class="title">apache</span>.<span class="title">spark</span>.<span class="title">sql</span>.<span class="title">expressions</span>.<span class="title">Aggregator</span></span></span><br><span class="line"><span class="class">  <span class="title">*</span> <span class="title">重写类中的方法</span></span></span><br><span class="line"><span class="class">  <span class="title">*/</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">MyAveragUDAF1</span> <span class="keyword">extends</span> <span class="title">Aggregator</span>[<span class="type">User01</span>,<span class="type">AgeBuffer</span>,<span class="type">Double</span>]</span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">zero</span></span>: <span class="type">AgeBuffer</span> = &#123;</span><br><span class="line">    <span class="type">AgeBuffer</span>(<span class="number">0</span>L,<span class="number">0</span>L)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">reduce</span></span>(b: <span class="type">AgeBuffer</span>, a: <span class="type">User01</span>): <span class="type">AgeBuffer</span> = &#123;</span><br><span class="line">    b.sum = b.sum + a.age</span><br><span class="line">    b.count = b.count + <span class="number">1</span></span><br><span class="line">    b</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">merge</span></span>(b1: <span class="type">AgeBuffer</span>, b2: <span class="type">AgeBuffer</span>): <span class="type">AgeBuffer</span> = &#123;</span><br><span class="line">    b1.sum = b1.sum + b2.sum</span><br><span class="line">    b1.count = b1.count + b2.count</span><br><span class="line">    b1</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">finish</span></span>(buff: <span class="type">AgeBuffer</span>): <span class="type">Double</span> = &#123;</span><br><span class="line">    buff.sum.toDouble/buff.count</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//DataSet默认额编解码器，用于序列化，固定写法</span></span><br><span class="line">  <span class="comment">//自定义类型就是produce   自带类型根据类型选择</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">bufferEncoder</span></span>: <span class="type">Encoder</span>[<span class="type">AgeBuffer</span>] = &#123;</span><br><span class="line">    <span class="type">Encoders</span>.product</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">outputEncoder</span></span>: <span class="type">Encoder</span>[<span class="type">Double</span>] = &#123;</span><br><span class="line">    <span class="type">Encoders</span>.scalaDouble</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">。。。</span><br><span class="line"></span><br><span class="line"><span class="comment">//封装为DataSet</span></span><br><span class="line"><span class="keyword">val</span> ds: <span class="type">Dataset</span>[<span class="type">User01</span>] = df.as[<span class="type">User01</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建聚合函数</span></span><br><span class="line"><span class="keyword">var</span> myAgeUdaf1 = <span class="keyword">new</span> <span class="type">MyAveragUDAF1</span></span><br><span class="line"><span class="comment">//将聚合函数转换为查询的列</span></span><br><span class="line"><span class="keyword">val</span> col: <span class="type">TypedColumn</span>[<span class="type">User01</span>, <span class="type">Double</span>] = myAgeUdaf1.toColumn</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询</span></span><br><span class="line">ds.select(col).show()</span><br></pre></td></tr></table></figure></div><h2 id="数据的加载和保存"><a href="#数据的加载和保存" class="headerlink" title="数据的加载和保存"></a>数据的加载和保存</h2><h3 id="通用的加载和保存方式"><a href="#通用的加载和保存方式" class="headerlink" title="通用的加载和保存方式"></a>通用的加载和保存方式</h3><p>SparkSQL提供了通用的保存数据和数据加载的方式。这里的通用指的是使用相同的API，根据不同的参数读取和保存不同格式的数据，<strong>SparkSQL默认读取和保存的文件格式为parquet</strong></p><p>1) 加载数据</p><p><code>spark.read.load</code>是加载数据的通用方法</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; spark.read.format(<span class="string">"…"</span>)[.option(<span class="string">"…"</span>)].load(<span class="string">"…"</span>)</span><br></pre></td></tr></table></figure></div><p>1)保存数据</p><p><code>df.write.save</code> 是保存数据的通用方法</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scala&gt;df.write.format(<span class="string">"…"</span>)[.option(<span class="string">"…"</span>)].save(<span class="string">"…"</span>)</span><br></pre></td></tr></table></figure></div><h3 id="Parquet"><a href="#Parquet" class="headerlink" title="Parquet"></a>Parquet</h3><p><strong>Spark SQL的默认数据源为Parquet格式。</strong></p><p><strong>Parquet是一种能够有效存储嵌套数据的列式存储格式。</strong></p><p>数据源为Parquet文件时，Spark SQL可以方便的执行所有的操作，不需要使用format。修改配置项spark.sql.sources.default，可修改默认数据源格式。</p><p>加载数据</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> df = spark.read.load(<span class="string">"/opt/module/spark-local/examples/src/main/resources/users.parquet"</span>)</span><br><span class="line"></span><br><span class="line">scala&gt; df.show</span><br></pre></td></tr></table></figure></div><p>保存数据</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">var</span> df = spark.read.json(<span class="string">"/opt/module/data/input/people.json"</span>)</span><br><span class="line"><span class="comment">//保存为parquet格式</span></span><br><span class="line">scala&gt; df.write.mode(<span class="string">"append"</span>).save(<span class="string">"/opt/module/data/output"</span>)</span><br></pre></td></tr></table></figure></div><h3 id="JSON-CSV-MySQL"><a href="#JSON-CSV-MySQL" class="headerlink" title="JSON/CSV/MySQL"></a>JSON/CSV/MySQL</h3><h3 id="Hive"><a href="#Hive" class="headerlink" title="Hive"></a>Hive</h3><p>Apache Hive 是 Hadoop 上的 SQL 引擎，Spark SQL编译时可以包含 Hive 支持，也可以不包含。包含 Hive 支持的 Spark SQL 可以支持 Hive 表访问、UDF (用户自定义函数)以及 Hive 查询语言(HiveQL/HQL)等。需要强调的一点是，如果要在 Spark SQL 中包含Hive 的库，并不需要事先安装 Hive。一般来说，最好还是在编译Spark SQL时引入Hive支持，这样就可以使用这些特性了。如果你下载的是二进制版本的 Spark，它应该已经在编译时添加了 Hive 支持。</p><p>若要把 Spark SQL 连接到一个部署好的 Hive 上，你必须把 hive-site.xml 复制到 Spark的配置文件目录中($SPARK_HOME/conf)。即使没有部署好 Hive，Spark SQL 也可以运行。 需要注意的是，如果你没有部署好Hive，Spark SQL 会在当前的工作目录中创建出自己的 Hive 元数据仓库，叫作 metastore_db。此外，如果你尝试使用 HiveQL 中的 CREATE TABLE (并非 CREATE EXTERNAL TABLE)语句来创建表，这些表会被放在你默认的文件系统中的 /user/hive/warehouse 目录中(如果你的 classpath 中有配好的 hdfs-site.xml，默认的文件系统就是 HDFS，否则就是本地文件系统)。</p><p>spark-shell默认是Hive支持的；代码中是默认不支持的，需要手动指定（加一个参数即可）。</p><p>1、内嵌的Hive</p><p>如果使用 Spark 内嵌的 Hive, 则什么都不用做, 直接使用即可.</p><p>Hive 的元数据存储在 derby 中, 仓库地址:$SPARK_HOME/spark-warehouse</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; spark.sql(<span class="string">"show tables"</span>).show</span><br><span class="line">。。。</span><br><span class="line">+--------+---------+-----------+</span><br><span class="line">|database|tableName|isTemporary|</span><br><span class="line">+--------+---------+-----------+</span><br><span class="line">+--------+---------+-----------+</span><br><span class="line"></span><br><span class="line">scala&gt; spark.sql(<span class="string">"create table aa(id int)"</span>)</span><br><span class="line"></span><br><span class="line">。。。</span><br><span class="line"></span><br><span class="line">scala&gt; spark.sql(<span class="string">"show tables"</span>).show</span><br><span class="line">+--------+---------+-----------+</span><br><span class="line">|database|tableName|isTemporary|</span><br><span class="line">+--------+---------+-----------+</span><br><span class="line">| <span class="keyword">default</span>|       aa|      <span class="literal">false</span>|</span><br><span class="line">+--------+---------+-----------+</span><br></pre></td></tr></table></figure></div><p>向表加载本地数据</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; spark.sql(<span class="string">"load data local inpath 'input/ids.txt' into table aa"</span>)</span><br><span class="line"></span><br><span class="line">。。。</span><br><span class="line"></span><br><span class="line">scala&gt; spark.sql(<span class="string">"select * from aa"</span>).show</span><br><span class="line">+---+</span><br><span class="line">| id|</span><br><span class="line">+---+</span><br><span class="line">|  <span class="number">1</span>|</span><br><span class="line">|  <span class="number">2</span>|</span><br><span class="line">|  <span class="number">3</span>|</span><br><span class="line">|  <span class="number">4</span>|</span><br><span class="line">+---+</span><br></pre></td></tr></table></figure></div><p>在实际使用中, 几乎没有任何人会使用内置的 Hive</p><p>2、外部的Hive</p><p>如果想连接外部已经部署好的Hive，需要通过以下几个步骤：</p><ul><li><p>Spark要接管Hive需要把hive-site.xml拷贝到conf/目录下</p></li><li><p>把Mysql的驱动copy到jars/目录下</p></li><li><p>如果访问不到hdfs，则需要把core-site.xml和hdfs-site.xml拷贝到conf/目录下</p></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; spark.sql(<span class="string">"show tables"</span>).show</span><br><span class="line"><span class="number">20</span>/<span class="number">04</span>/<span class="number">25</span> <span class="number">22</span>:<span class="number">05</span>:<span class="number">14</span> <span class="type">WARN</span> <span class="type">ObjectStore</span>: <span class="type">Failed</span> to get database global_temp, returning <span class="type">NoSuchObjectException</span></span><br><span class="line">+--------+--------------------+-----------+</span><br><span class="line">|database|           tableName|isTemporary|</span><br><span class="line">+--------+--------------------+-----------+</span><br><span class="line">| <span class="keyword">default</span>|                 emp|      <span class="literal">false</span>|</span><br><span class="line">| <span class="keyword">default</span>|hive_hbase_emp_table|      <span class="literal">false</span>|</span><br><span class="line">| <span class="keyword">default</span>| relevance_hbase_emp|      <span class="literal">false</span>|</span><br><span class="line">| <span class="keyword">default</span>|          staff_hive|      <span class="literal">false</span>|</span><br><span class="line">| <span class="keyword">default</span>|                 ttt|      <span class="literal">false</span>|</span><br><span class="line">| <span class="keyword">default</span>|   user_visit_action|      <span class="literal">false</span>|</span><br><span class="line">+--------+--------------------+-----------+</span><br></pre></td></tr></table></figure></div><p>3、运行 Spark SQL CLI</p><p>Spark SQL CLI可以很方便的在本地运行Hive元数据服务以及从命令行执行查询任务。在Spark目录下执行如下命令启动Spark SQL CLI，直接执行SQL语句，类似一Hive窗口</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin/spark-sql</span><br></pre></td></tr></table></figure></div><p>4、代码操作Hive</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-hive_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hive<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hive-exec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>将hive-site.xml文件拷贝到项目的resources目录中，代码实现</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建SparkSession</span></span><br><span class="line"><span class="keyword">val</span> spark: <span class="type">SparkSession</span> = <span class="type">SparkSession</span></span><br><span class="line">  .builder()</span><br><span class="line">  .enableHiveSupport()</span><br><span class="line">  .master(<span class="string">"local[*]"</span>)</span><br><span class="line">  .appName(<span class="string">"sql"</span>)</span><br><span class="line">  .getOrCreate()</span><br></pre></td></tr></table></figure></div><blockquote><p>注意：在开发工具中创建数据库默认是在本地仓库，通过参数修改数据库仓库的地址: config(“spark.sql.warehouse.dir”, “hdfs://linux1:9000/user/hive/warehouse”)</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SparkSQL概述&quot;&gt;&lt;a href=&quot;#SparkSQL概述&quot; class=&quot;headerlink&quot; title=&quot;SparkSQL概述&quot;&gt;&lt;/a&gt;SparkSQL概述&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="大数据" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="spark" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/spark/"/>
    
    
      <category term="教程" scheme="https://masteryang4.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="大数据" scheme="https://masteryang4.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="spark" scheme="https://masteryang4.github.io/tags/spark/"/>
    
      <category term="spark-sql" scheme="https://masteryang4.github.io/tags/spark-sql/"/>
    
  </entry>
  
  <entry>
    <title>spark系列之spark基础</title>
    <link href="https://masteryang4.github.io/2020/06/17/spark%E7%B3%BB%E5%88%97%E4%B9%8Bspark%E5%9F%BA%E7%A1%80/"/>
    <id>https://masteryang4.github.io/2020/06/17/spark%E7%B3%BB%E5%88%97%E4%B9%8Bspark%E5%9F%BA%E7%A1%80/</id>
    <published>2020-06-17T15:44:55.000Z</published>
    <updated>2020-06-17T17:07:52.754Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><ul><li>Spark Core</li></ul><p>Spark Core中提供了Spark最基础与最核心的功能，Spark其他的功能如：Spark SQL，Spark Streaming，GraphX, MLlib都是在Spark Core的基础上进行扩展的</p><ul><li>Spark SQL</li></ul><p>Spark SQL是Spark用来操作结构化数据的组件。通过Spark SQL，用户可以使用SQL或者Apache Hive版本的SQL方言（HQL）来查询数据。</p><ul><li>Spark Streaming</li></ul><p>Spark Streaming是Spark平台上针对实时数据进行流式计算的组件，提供了丰富的处理数据流的API。</p><ul><li>Spark MLlib</li></ul><p>MLlib是Spark提供的一个机器学习算法库。MLlib不仅提供了模型评估、数据导入等额外的功能，还提供了一些更底层的机器学习原语。</p><ul><li>Spark GraphX</li></ul><p>GraphX是Spark面向图计算提供的框架与算法库。</p><h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-core_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 该插件用于将Scala代码编译成class文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.alchim31.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>scala-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 声明绑定到maven的compile阶段 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>testCompile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="tag">&lt;/<span class="name">descriptorRef</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>make-assembly<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>single<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>WordCount</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建Spark运行配置对象</span></span><br><span class="line"><span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"WordCount"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建Spark上下文环境对象（连接对象）</span></span><br><span class="line"><span class="keyword">val</span> sc : <span class="type">SparkContext</span> = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取文件数据</span></span><br><span class="line"><span class="keyword">val</span> fileRDD: <span class="type">RDD</span>[<span class="type">String</span>] = sc.textFile(<span class="string">"input/word.txt"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将文件中的数据进行分词</span></span><br><span class="line"><span class="keyword">val</span> wordRDD: <span class="type">RDD</span>[<span class="type">String</span>] = fileRDD.flatMap( _.split(<span class="string">" "</span>) )</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转换数据结构 word =&gt; (word, 1)</span></span><br><span class="line"><span class="keyword">val</span> word2OneRDD: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = wordRDD.map((_,<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将转换结构后的数据按照相同的单词进行分组聚合</span></span><br><span class="line"><span class="keyword">val</span> word2CountRDD: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = word2OneRDD.reduceByKey(_+_)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将数据聚合结果采集到内存中</span></span><br><span class="line"><span class="keyword">val</span> word2Count: <span class="type">Array</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = word2CountRDD.collect()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印结果</span></span><br><span class="line">word2Count.foreach(println)</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭Spark连接</span></span><br><span class="line">sc.stop()</span><br></pre></td></tr></table></figure></div><h1 id="spark运行环境"><a href="#spark运行环境" class="headerlink" title="spark运行环境"></a>spark运行环境</h1><h2 id="local"><a href="#local" class="headerlink" title="local"></a>local</h2><p>所谓的Local模式，就是不需要其他任何节点资源就可以在本地执行Spark代码的环境，一般用于教学，调试，演示等，</p><h2 id="standalone"><a href="#standalone" class="headerlink" title="standalone"></a>standalone</h2><p>local本地模式毕竟只是用来进行练习演示的，真实工作中还是要将应用提交到对应的集群中去执行，这里我们来看看只使用Spark自身节点运行的集群模式，也就是我们所谓的独立部署（Standalone）模式。Spark的Standalone模式体现了经典的master-slave模式。</p><p>集群规划:</p><table><thead><tr><th></th><th>Linux1</th><th>Linux2</th><th>Linux3</th></tr></thead><tbody><tr><td>Spark</td><td>Worker  <strong>Master</strong></td><td>Worker</td><td>Worker</td></tr></tbody></table><h2 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h2><p><strong>独立部署（Standalone）模式由Spark自身提供计算资源，无需其他框架提供资源。</strong>这种方式降低了和其他第三方资源框架的耦合性，独立性非常强。但是你也要记住，Spark主要是计算框架，而不是资源调度框架，所以本身提供的资源调度并不是它的强项，所以还是和其他专业的资源调度框架集成会更靠谱一些。所以接下来我们来学习在强大的Yarn环境下Spark是如何工作的（其实是因为在国内工作中，Yarn使用的非常多）。</p><h2 id="k8s-amp-Mesos"><a href="#k8s-amp-Mesos" class="headerlink" title="k8s &amp; Mesos"></a>k8s &amp; Mesos</h2><p>Mesos是Apache下的开源分布式资源管理框架，它被称为是分布式系统的内核,在Twitter得到广泛使用,管理着Twitter超过30,0000台服务器上的应用部署，但是在国内，依然使用着传统的Hadoop大数据框架，所以国内使用Mesos框架的并不多，但是原理其实都差不多。</p><h2 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h2><p>一般教学演示使用。</p><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><table><thead><tr><th>模式</th><th>Spark安装机器数</th><th>需启动的进程</th><th>所属者</th><th>应用场景</th></tr></thead><tbody><tr><td>Local</td><td>1</td><td>无</td><td>Spark</td><td>测试</td></tr><tr><td>Standalone</td><td>3</td><td>Master及Worker</td><td>Spark</td><td>单独部署</td></tr><tr><td>Yarn</td><td>1</td><td>Yarn及HDFS</td><td>Hadoop</td><td>混合部署</td></tr></tbody></table><p>端口号</p><ul><li><p>Spark查看当前Spark-shell运行任务情况端口号：4040（计算）</p></li><li><p>Spark Master内部通信服务端口号：7077</p></li><li><p>Standalone模式下，Spark Master Web端口号：8080（资源）</p></li><li><p>Spark历史服务器端口号：18080</p></li><li><p>Hadoop YARN任务运行情况查看端口号：8088</p></li></ul><h1 id="spark运行架构"><a href="#spark运行架构" class="headerlink" title="spark运行架构"></a>spark运行架构</h1><h3 id="核心组件"><a href="#核心组件" class="headerlink" title="核心组件"></a>核心组件</h3><p>Spark框架有两个核心组件：</p><p><strong>1、Driver</strong></p><p>Spark驱动器节点，用于执行Spark任务中的main方法，负责实际代码的执行工作。Driver在Spark作业执行时主要负责：</p><ul><li><p>将用户程序转化为作业（job）</p></li><li><p>在Executor之间调度任务(task)</p></li><li><p>跟踪Executor的执行情况</p></li><li><p>通过UI展示查询运行情况</p></li></ul><p>实际上，我们无法准确地描述Driver的定义，因为在整个的编程过程中没有看到任何有关Driver的字眼。所以简单理解，所谓的Driver就是驱使整个应用运行起来的程序，也称之为Driver类。</p><p><strong>2、Executor</strong></p><p>Spark Executor是集群中工作节点（Worker）中的一个JVM进程，负责在 Spark 作业中运行具体任务（Task），任务彼此之间相互独立。Spark 应用启动时，Executor节点被同时启动，并且始终伴随着整个 Spark 应用的生命周期而存在。如果有Executor节点发生了故障或崩溃，Spark 应用也可以继续执行，会将出错节点上的任务调度到其他Executor节点上继续运行。</p><p>Executor有两个核心功能：</p><ul><li><p>负责运行组成Spark应用的任务，并将结果返回给驱动器进程</p></li><li><p>它们通过自身的块管理器（Block Manager）为用户程序中要求缓存的 RDD 提供内存式存储。RDD 是直接缓存在Executor进程内的，因此任务可以在运行时充分利用缓存数据加速运算。</p></li></ul><p>3、ApplicationMaster</p><p>Hadoop用户向YARN集群提交应用程序时,提交程序中应该包含ApplicationMaster，用于向资源调度器申请执行任务的资源容器Container，运行用户自己的程序任务job，监控整个任务的执行，跟踪整个任务的状态，处理任务失败等异常情况。</p><p>说的简单点就是，RM（资源）和Driver（计算）之间的解耦合靠的就是ApplicationMaster。</p><h3 id="提交流程"><a href="#提交流程" class="headerlink" title="提交流程"></a>提交流程</h3><p>Spark应用程序提交到Yarn环境中执行的时候，一般会有两种部署执行的方式：Client和Cluster。</p><p><strong>两种模式，主要区别在于：Driver程序的运行节点。</strong></p><p><strong>Yarn Client模式</strong></p><p>Client模式将用于监控和调度的Driver模块在客户端执行，而不是Yarn中，所以一般用于测试。</p><ul><li><p><strong>Driver在任务提交的本地机器上运行</strong></p></li><li><p>Driver启动后会和ResourceManager通讯申请启动ApplicationMaster</p></li><li><p>ResourceManager分配container，在合适的NodeManager上启动ApplicationMaster，负责向ResourceManager申请Executor内存</p></li><li><p>ResourceManager接到ApplicationMaster的资源申请后会分配container，然后ApplicationMaster在资源分配指定的NodeManager上启动Executor进程</p></li><li><p>Executor进程启动后会向Driver反向注册，Executor全部注册完成后Driver开始执行main函数</p></li><li><p>之后执行到Action算子时，触发一个Job，并根据宽依赖开始划分stage，每个stage生成对应的TaskSet，之后将task分发到各个Executor上执行。</p></li></ul><p><strong>Yarn Cluster模式</strong></p><p><strong>Cluster模式将用于监控和调度的Driver模块启动在Yarn集群资源中执行。</strong>一般应用于实际生产环境。</p><ul><li><p>在YARN Cluster模式下，任务提交后会和ResourceManager通讯申请启动ApplicationMaster，</p></li><li><p>随后ResourceManager分配container，在合适的NodeManager上启动ApplicationMaster，此时的ApplicationMaster就是Driver。</p></li><li><p>Driver启动后向ResourceManager申请Executor内存，ResourceManager接到ApplicationMaster的资源申请后会分配container，然后在合适的NodeManager上启动Executor进程</p></li><li><p>Executor进程启动后会向Driver反向注册，Executor全部注册完成后Driver开始执行main函数，</p></li><li><p>之后执行到Action算子时，触发一个Job，并根据宽依赖开始划分stage，每个stage生成对应的TaskSet，之后将task分发到各个Executor上执行。</p></li></ul><h1 id="spark核心编程"><a href="#spark核心编程" class="headerlink" title="spark核心编程"></a>spark核心编程</h1><p>Spark计算框架为了能够对数据进行高并发和高吞吐的处理，封装了三大数据结构，用于处理不同的应用场景。三大数据结构分别是：</p><ul><li><p>RDD : 弹性分布式数据集</p></li><li><p>累加器：分布式共享只写变量</p></li><li><p>广播变量：分布式共享只读变量</p></li></ul><h2 id="RDD"><a href="#RDD" class="headerlink" title="RDD"></a>RDD</h2><p>RDD（Resilient Distributed Dataset）叫做弹性分布式数据集，是Spark中最基本的数据处理模型。代码中是一个抽象类，它代表一个弹性的、不可变、可分区、里面的元素可并行计算的集合。</p><blockquote><p>数据集：RDD封装了计算逻辑，并不保存数据</p></blockquote><h3 id="RDD并行度与分区"><a href="#RDD并行度与分区" class="headerlink" title="RDD并行度与分区"></a>RDD并行度与分区</h3><p>默认情况下，Spark可以切分任务，并将任务发送给Executor节点并行计算，而这个并行计算的任务数量我们称之为并行度。这个数量可以在构建RDD时指定。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sparkConf =</span><br><span class="line">    <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"spark"</span>)</span><br><span class="line"><span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"><span class="keyword">val</span> dataRDD: <span class="type">RDD</span>[<span class="type">Int</span>] =</span><br><span class="line">    sparkContext.makeRDD(</span><br><span class="line">        <span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>),</span><br><span class="line">        <span class="number">4</span>)</span><br><span class="line"><span class="keyword">val</span> fileRDD: <span class="type">RDD</span>[<span class="type">String</span>] =</span><br><span class="line">    sparkContext.textFile(</span><br><span class="line">        <span class="string">"input"</span>,</span><br><span class="line">        <span class="number">2</span>)</span><br><span class="line">fileRDD.collect().foreach(println)</span><br><span class="line">sparkContext.stop()</span><br></pre></td></tr></table></figure></div><p>读取内存数据时，数据可以按照并行度的设定进行数据的分区操作，数据分区规则的Spark源码如下</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">positions</span></span>(length: <span class="type">Long</span>, numSlices: <span class="type">Int</span>): <span class="type">Iterator</span>[(<span class="type">Int</span>, <span class="type">Int</span>)] = &#123;</span><br><span class="line">  (<span class="number">0</span> until numSlices).iterator.map &#123; i =&gt;</span><br><span class="line">    <span class="keyword">val</span> start = ((i * length) / numSlices).toInt</span><br><span class="line">    <span class="keyword">val</span> end = (((i + <span class="number">1</span>) * length) / numSlices).toInt</span><br><span class="line">    (start, end)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>读取文件数据时，数据是按照Hadoop文件读取的规则进行切片分区，而切片规则和数据读取的规则有些差异，具体Spark源码如下</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public <span class="type">InputSplit</span>[] getSplits(<span class="type">JobConf</span> job, int numSplits)</span><br><span class="line">    <span class="keyword">throws</span> <span class="type">IOException</span> &#123;</span><br><span class="line"></span><br><span class="line">    long totalSize = <span class="number">0</span>;                           <span class="comment">// compute total size</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">FileStatus</span> file: files) &#123;                <span class="comment">// check we have valid files</span></span><br><span class="line">      <span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">IOException</span>(<span class="string">"Not a file: "</span>+ file.getPath());</span><br><span class="line">      &#125;</span><br><span class="line">      totalSize += file.getLen();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    long goalSize = totalSize / (numSplits == <span class="number">0</span> ? <span class="number">1</span> : numSplits);</span><br><span class="line">    long minSize = <span class="type">Math</span>.max(job.getLong(org.apache.hadoop.mapreduce.lib.input.</span><br><span class="line">      <span class="type">FileInputFormat</span>.<span class="type">SPLIT_MINSIZE</span>, <span class="number">1</span>), minSplitSize);</span><br><span class="line">      </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">FileStatus</span> file: files) &#123;</span><br><span class="line">    </span><br><span class="line">        ...</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (isSplitable(fs, path)) &#123;</span><br><span class="line">          long blockSize = file.getBlockSize();</span><br><span class="line">          long splitSize = computeSplitSize(goalSize, minSize, blockSize);</span><br><span class="line"></span><br><span class="line">          ...</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">protected</span> long computeSplitSize(long goalSize, long minSize,</span><br><span class="line">                                       long blockSize) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Math</span>.max(minSize, <span class="type">Math</span>.min(goalSize, blockSize));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div><h3 id="RDD创建"><a href="#RDD创建" class="headerlink" title="RDD创建"></a>RDD创建</h3><p>1、从集合（内存）中创建RDD</p><p>parallelize和makeRDD</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sparkConf =</span><br><span class="line">    <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"spark"</span>)</span><br><span class="line"><span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"><span class="keyword">val</span> rdd1 = sparkContext.parallelize(</span><br><span class="line">    <span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">val</span> rdd2 = sparkContext.makeRDD(</span><br><span class="line">    <span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">)</span><br><span class="line">rdd1.collect().foreach(println)</span><br><span class="line">rdd2.collect().foreach(println)</span><br><span class="line">sparkContext.stop()</span><br></pre></td></tr></table></figure></div><p>makeRDD方法其实就是parallelize方法</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">makeRDD</span></span>[<span class="type">T</span>: <span class="type">ClassTag</span>](</span><br><span class="line">    seq: <span class="type">Seq</span>[<span class="type">T</span>],</span><br><span class="line">    numSlices: <span class="type">Int</span> = defaultParallelism): <span class="type">RDD</span>[<span class="type">T</span>] = withScope &#123;</span><br><span class="line">  parallelize(seq, numSlices)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>2、从外部存储（文件）创建RDD</p><p>由外部存储系统的数据集创建RDD包括：本地的文件系统，所有Hadoop支持的数据集，比如HDFS、HBase等。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sparkConf =</span><br><span class="line">    <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"spark"</span>)</span><br><span class="line"><span class="keyword">val</span> sparkContext = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"><span class="keyword">val</span> fileRDD: <span class="type">RDD</span>[<span class="type">String</span>] = sparkContext.textFile(<span class="string">"input"</span>)</span><br><span class="line">fileRDD.collect().foreach(println)</span><br><span class="line">sparkContext.stop()</span><br></pre></td></tr></table></figure></div><p>3、从其他RDD创建</p><p>主要是通过一个RDD运算完后，再产生新的RDD。</p><p>4、直接创建RDD（new）</p><p>使用new的方式直接构造RDD</p><h3 id="转换算子"><a href="#转换算子" class="headerlink" title="转换算子"></a>转换算子</h3><p>RDD整体上分为Value类型、双Value类型和Key-Value类型</p><h4 id="value类型"><a href="#value类型" class="headerlink" title="value类型"></a>value类型</h4><p>map</p><p>mapPartitions</p><p>mapPartitionsWithIndex</p><p>flatMap</p><p>glom</p><ul><li>将同一个分区的数据直接转换为相同类型的内存数组进行处理，分区不变</li></ul><p>groupBy</p><p>filter</p><ul><li>将数据根据指定的规则进行筛选过滤，符合规则的数据保留，不符合规则的数据丢弃</li></ul><p>sample</p><ul><li>根据指定的规则从数据集中抽取数据</li></ul><p>distinct</p><p>coalesce</p><ul><li>根据数据量缩减分区，用于大数据集过滤后，提高小数据集的执行效率</li></ul><p>repartition</p><blockquote><p>小问题：coalesce和repartition区别？</p><p>repartition算子其实底层调用的就是coalesce算子，只不过固定使用了shuffle的操作,可以让数据更均衡一下，可以有效防止数据倾斜问题。</p><p>如果缩减分区，一般就采用coalesce，如果想扩大分区，就采用repartition</p></blockquote><p>sortBy</p><p>pipe</p><ul><li>管道，针对每个分区，都调用一次shell脚本，返回输出的RDD。</li></ul><h4 id="双Value类型"><a href="#双Value类型" class="headerlink" title="双Value类型"></a>双Value类型</h4><p>intersection</p><ul><li>对源RDD和参数RDD求交集后返回一个新的RDD</li></ul><p>union</p><ul><li>对源RDD和参数RDD求并集后返回一个新的RDD</li></ul><p>subtract</p><ul><li>以一个RDD元素为主，去除两个RDD中重复元素，将其他元素保留下来。求差集</li></ul><p>zip</p><ul><li>将两个RDD中的元素，以键值对的形式进行合并。其中，键值对中的Key为第1个RDD中的元素，Value为第2个RDD中的元素。</li></ul><h4 id="Key-Value类型"><a href="#Key-Value类型" class="headerlink" title="Key - Value类型"></a>Key - Value类型</h4><p>partitionBy</p><ul><li>将数据按照指定Partitioner重新进行分区。Spark默认的分区器是HashPartitioner</li></ul><p>reduceByKey</p><p>groupByKey</p><blockquote><p>reduceByKey和groupByKey的区别？</p><p>两个算子没有使用上的区别。所以使用的时候需要根据应用场景来选择。</p><p>从性能上考虑，reduceByKey存在预聚合功能，这样，在shuffle的过程中，落盘的数据量会变少，所以读写磁盘的速度会变快。性能更高</p></blockquote><p>aggregateByKey</p><ul><li>将数据根据不同的规则进行分区内计算和分区间计算</li><li><code>dataRDD1.aggregateByKey(0)(_+_,_+_)</code></li></ul><p>foldByKey</p><ul><li>当分区内计算规则和分区间计算规则相同时，aggregateByKey就可以简化为foldByKey</li><li><code>dataRDD1.foldByKey(0)(_+_)</code></li></ul><p>combineByKey</p><ul><li>最通用的对key-value型rdd进行聚集操作的聚集函数（aggregation function）。类似于aggregate()，combineByKey()允许用户返回值的类型与输入不一致。</li></ul><blockquote><p>reduceByKey、foldByKey、aggregateByKey、combineByKey的区别？</p><p>从源码的角度来讲，四个算子的底层逻辑是相同的。</p><p>aggregateByKey的算子会将初始值和第一个value使用分区内的计算规则进行计算</p><p>foldByKey的算子的分区内和分区间的计算规则相同，并且初始值和第一个value使用的规则相同</p><p>combineByKey第一个参数就是对第一个value进行处理，所以无需初始值。</p><p>reduceByKey不会对第一个value进行处理，分区内和分区间计算规则相同</p><p>上面的四个算子都支持预聚合功能。所以shuffle性能比较高</p><p>上面的四个算子都可以实现WordCount</p></blockquote><p>sortByKey</p><p>join</p><p>leftOuterJoin</p><p>cogroup</p><ul><li>在类型为(K,V)和(K,W)的RDD上调用，返回一个(K,(Iterable<v>,Iterable<w>))类型的RDD</w></v></li></ul><h3 id="行动算子"><a href="#行动算子" class="headerlink" title="行动算子"></a>行动算子</h3><p>reduce</p><ul><li>聚集RDD中的所有元素，先聚合分区内数据，再聚合分区间数据</li></ul><p>collect</p><ul><li>在驱动程序中，以数组Array的形式返回数据集的所有元素</li></ul><p>count</p><p>first</p><p>take</p><p>takeOrdered</p><p>aggregate</p><ul><li>分区的数据通过初始值和分区内的数据进行聚合，<strong>然后再和初始值进行分区间的数据聚合</strong></li></ul><p>fold</p><ul><li>折叠操作，aggregate的简化版操作</li></ul><p>countByKey</p><p>save相关算子</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存成Text文件</span></span><br><span class="line">rdd.saveAsTextFile(<span class="string">"output"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 序列化成对象保存到文件</span></span><br><span class="line">rdd.saveAsObjectFile(<span class="string">"output1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存成Sequencefile文件</span></span><br><span class="line">rdd.map((_,<span class="number">1</span>)).saveAsSequenceFile(<span class="string">"output2"</span>)</span><br></pre></td></tr></table></figure></div><p>foreach</p><ul><li>分布式遍历RDD中的每一个元素，调用指定函数</li></ul><h3 id="RDD序列化"><a href="#RDD序列化" class="headerlink" title="RDD序列化"></a>RDD序列化</h3><p>1) 闭包检查</p><p><strong>从计算的角度, 算子以外的代码都是在Driver端执行, 算子里面的代码都是在Executor端执行。</strong>那么在scala的函数式编程中，就会导致算子内经常会用到算子外的数据，这样就形成了闭包的效果，如果使用的算子外的数据无法序列化，就意味着无法传值给Executor端执行，就会发生错误，所以需要在执行任务计算前，检测闭包内的对象是否可以进行序列化，这个操作我们称之为闭包检测。</p><p>2) Kryo序列化框架</p><blockquote><p>参考地址: <a href="https://github.com/EsotericSoftware/kryo" target="_blank" rel="noopener">https://github.com/EsotericSoftware/kryo</a></p></blockquote><p>Java的序列化能够序列化任何的类。但是比较重，序列化后，对象的提交也比较大。</p><p>Spark出于性能的考虑，Spark2.0开始支持另外一种Kryo序列化机制。Kryo速度是Serializable的10倍。当RDD在Shuffle数据的时候，简单数据类型、数组和字符串类型已经在Spark内部使用Kryo来序列化。</p><h3 id="RDD依赖关系"><a href="#RDD依赖关系" class="headerlink" title="RDD依赖关系"></a>RDD依赖关系</h3><p>1、RDD血缘关系</p><p>RDD只支持粗粒度转换，即在大量记录上执行的单个操作。将创建RDD的一系列Lineage（血统）记录下来，以便恢复丢失的分区。RDD的Lineage会记录RDD的元数据信息和转换行为，当该RDD的部分分区数据丢失时，它可以根据这些信息来重新运算和恢复丢失的数据分区。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> fileRDD: <span class="type">RDD</span>[<span class="type">String</span>] = sc.textFile(<span class="string">"input/1.txt"</span>)</span><br><span class="line">println(fileRDD.toDebugString)</span><br><span class="line">println(<span class="string">"----------------------"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> wordRDD: <span class="type">RDD</span>[<span class="type">String</span>] = fileRDD.flatMap(_.split(<span class="string">" "</span>))</span><br><span class="line">println(wordRDD.toDebugString)</span><br><span class="line">println(<span class="string">"----------------------"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> mapRDD: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = wordRDD.map((_,<span class="number">1</span>))</span><br><span class="line">println(mapRDD.toDebugString)</span><br><span class="line">println(<span class="string">"----------------------"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> resultRDD: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = mapRDD.reduceByKey(_+_)</span><br><span class="line">println(resultRDD.toDebugString)</span><br><span class="line"></span><br><span class="line">resultRDD.collect()</span><br></pre></td></tr></table></figure></div><p>2、RDD依赖关系</p><p>这里所谓的依赖关系，其实就是RDD之间的关系</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sc: <span class="type">SparkContext</span> = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> fileRDD: <span class="type">RDD</span>[<span class="type">String</span>] = sc.textFile(<span class="string">"input/1.txt"</span>)</span><br><span class="line">println(fileRDD.dependencies)</span><br><span class="line">println(<span class="string">"----------------------"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> wordRDD: <span class="type">RDD</span>[<span class="type">String</span>] = fileRDD.flatMap(_.split(<span class="string">" "</span>))</span><br><span class="line">println(wordRDD.dependencies)</span><br><span class="line">println(<span class="string">"----------------------"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> mapRDD: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = wordRDD.map((_,<span class="number">1</span>))</span><br><span class="line">println(mapRDD.dependencies)</span><br><span class="line">println(<span class="string">"----------------------"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> resultRDD: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = mapRDD.reduceByKey(_+_)</span><br><span class="line">println(resultRDD.dependencies)</span><br><span class="line"></span><br><span class="line">resultRDD.collect()</span><br></pre></td></tr></table></figure></div><p>3、RDD窄依赖</p><p>窄依赖表示每一个父RDD的Partition最多被子RDD的一个Partition使用，窄依赖我们形象的比喻为独生子女。</p><p>4、RDD宽依赖</p><p>宽依赖表示同一个父RDD的Partition被多个子RDD的Partition依赖，会引起Shuffle，总结：宽依赖我们形象的比喻为超生。</p><p><strong>5、RDD任务划分</strong></p><p>RDD任务切分中间分为：Application、Job、Stage和Task</p><ul><li><p>Application：初始化一个SparkContext即生成一个Application；</p></li><li><p>Job：一个Action算子就会生成一个Job；</p></li><li><p><strong>Stage：Stage等于宽依赖(ShuffleDependency)的个数加1；</strong></p></li><li><p><strong>Task：一个Stage阶段中，最后一个RDD的分区个数就是Task的个数。</strong></p></li></ul><p>注意：Application-&gt;Job-&gt;Stage-&gt;Task每一层都是1对n的关系。 </p><h3 id="RDD持久化"><a href="#RDD持久化" class="headerlink" title="RDD持久化"></a>RDD持久化</h3><p>1、RDD Cache缓存</p><p>RDD通过Cache或者Persist方法将前面的计算结果缓存，默认情况下会把数据以序列化的形式缓存在JVM的堆内存中。但是并不是这两个方法被调用时立即缓存，<strong>而是触发后面的action算子时，该RDD将会被缓存在计算节点的内存中，并供后面重用。</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cache操作会增加血缘关系，不改变原有的血缘关系</span></span><br><span class="line">println(wordToOneRdd.toDebugString)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据缓存。</span></span><br><span class="line">wordToOneRdd.cache()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以更改存储级别</span></span><br><span class="line"><span class="comment">//mapRdd.persist(StorageLevel.MEMORY_AND_DISK_2)</span></span><br></pre></td></tr></table></figure></div><p>存储级别</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">StorageLevel</span> </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> <span class="type">NONE</span> = <span class="keyword">new</span> <span class="type">StorageLevel</span>(<span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>)</span><br><span class="line">  <span class="keyword">val</span> <span class="type">DISK_ONLY</span> = <span class="keyword">new</span> <span class="type">StorageLevel</span>(<span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>)</span><br><span class="line">  <span class="keyword">val</span> <span class="type">DISK_ONLY_2</span> = <span class="keyword">new</span> <span class="type">StorageLevel</span>(<span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">val</span> <span class="type">MEMORY_ONLY</span> = <span class="keyword">new</span> <span class="type">StorageLevel</span>(<span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>)</span><br><span class="line">  <span class="keyword">val</span> <span class="type">MEMORY_ONLY_2</span> = <span class="keyword">new</span> <span class="type">StorageLevel</span>(<span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">val</span> <span class="type">MEMORY_ONLY_SER</span> = <span class="keyword">new</span> <span class="type">StorageLevel</span>(<span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>)</span><br><span class="line">  <span class="keyword">val</span> <span class="type">MEMORY_ONLY_SER_2</span> = <span class="keyword">new</span> <span class="type">StorageLevel</span>(<span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">val</span> <span class="type">MEMORY_AND_DISK</span> = <span class="keyword">new</span> <span class="type">StorageLevel</span>(<span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>)</span><br><span class="line">  <span class="keyword">val</span> <span class="type">MEMORY_AND_DISK_2</span> = <span class="keyword">new</span> <span class="type">StorageLevel</span>(<span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">val</span> <span class="type">MEMORY_AND_DISK_SER</span> = <span class="keyword">new</span> <span class="type">StorageLevel</span>(<span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>)</span><br><span class="line">  <span class="keyword">val</span> <span class="type">MEMORY_AND_DISK_SER_2</span> = <span class="keyword">new</span> <span class="type">StorageLevel</span>(<span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">false</span>, <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">val</span> <span class="type">OFF_HEAP</span> = <span class="keyword">new</span> <span class="type">StorageLevel</span>(<span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure></div><p>缓存有可能丢失，或者存储于内存的数据由于内存不足而被删除，RDD的缓存容错机制保证了即使缓存丢失也能保证计算的正确执行。通过基于RDD的一系列转换，丢失的数据会被重算，由于RDD的各个Partition是相对独立的，因此只需要计算丢失的部分即可，并不需要重算全部Partition。</p><p>Spark会自动对一些Shuffle操作的中间数据做持久化操作(比如：reduceByKey)。这样做的目的是为了当一个节点Shuffle失败了避免重新计算整个输入。但是，在实际使用的时候，如果想重用数据，仍然建议调用persist或cache。</p><p>2、RDD CheckPoint检查点</p><p>所谓的检查点其实就是通过将RDD中间结果写入磁盘</p><p>由于血缘依赖过长会造成容错成本过高，这样就不如在中间阶段做检查点容错，如果检查点之后有节点出现问题，可以从检查点开始重做血缘，减少了开销。</p><p>对RDD进行checkpoint操作并不会马上被执行，必须执行Action操作才能触发。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置检查点路径</span></span><br><span class="line">sc.setCheckpointDir(<span class="string">"./checkpoint1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个RDD，读取指定位置文件:hello ys ys</span></span><br><span class="line"><span class="keyword">val</span> lineRdd: <span class="type">RDD</span>[<span class="type">String</span>] = sc.textFile(<span class="string">"input/1.txt"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 业务逻辑</span></span><br><span class="line"><span class="keyword">val</span> wordRdd: <span class="type">RDD</span>[<span class="type">String</span>] = lineRdd.flatMap(line =&gt; line.split(<span class="string">" "</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> wordToOneRdd: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Long</span>)] = wordRdd.map &#123;</span><br><span class="line">    word =&gt; &#123;</span><br><span class="line">        (word, <span class="type">System</span>.currentTimeMillis())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增加缓存,避免再重新跑一个job做checkpoint</span></span><br><span class="line">wordToOneRdd.cache()</span><br><span class="line"><span class="comment">// 数据检查点：针对wordToOneRdd做检查点计算</span></span><br><span class="line">wordToOneRdd.checkpoint()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发执行逻辑</span></span><br><span class="line">wordToOneRdd.collect().foreach(println)</span><br></pre></td></tr></table></figure></div><p><strong>缓存和检查点区别</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1）Cache缓存只是将数据保存起来，不切断血缘依赖。Checkpoint检查点切断血缘依赖。</span><br><span class="line"></span><br><span class="line">2）Cache缓存的数据通常存储在磁盘、内存等地方，可靠性低。Checkpoint的数据通常存储在HDFS等容错、高可用的文件系统，可靠性高。</span><br><span class="line"></span><br><span class="line">3）建议对checkpoint()的RDD使用Cache缓存，这样checkpoint的job只需从Cache缓存中读取数据即可，否则需要再从头计算一次RDD。</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ysss.bigdata.spark.core.cache</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Spark02_Checkpoint</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> conf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">"SparkCoreTest"</span>).setMaster(<span class="string">"local[*]"</span>)</span><br><span class="line">        <span class="keyword">val</span> sc: <span class="type">SparkContext</span> = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br><span class="line">        <span class="comment">// 设置检查点路径， 一般路径应该为分布式存储路径，HDFS</span></span><br><span class="line">        sc.setCheckpointDir(<span class="string">"cp"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">Int</span>] = sc.makeRDD(<span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 检查点</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// RDD的持久化可能会导致数据丢失，如果数据丢失，那么需要重新再次计算，性能不高</span></span><br><span class="line">        <span class="comment">// 所以如果能够保证数据不丢，那么是一个好的选择</span></span><br><span class="line">        <span class="comment">// 可以将数据保存到检查点中，这样是分布式存储，所以比较安全。</span></span><br><span class="line">        <span class="comment">// 所以将数据保存到检查点前，需要设定检查点路径</span></span><br><span class="line">        <span class="keyword">val</span> rdd1 = rdd.map(</span><br><span class="line">            num =&gt; &#123;</span><br><span class="line">                <span class="comment">//println("num.....")</span></span><br><span class="line">                num</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查点</span></span><br><span class="line">        <span class="comment">// 检查点为了准确，需要重头再执行一遍，就等同于开启一个新的作业</span></span><br><span class="line">        <span class="comment">// 为了提高效率，一般情况下，是先使用cache后在使用检查点</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查点会切断RDD的血缘关系。将当前检查点当成数据计算的起点。</span></span><br><span class="line">        <span class="comment">// 持久化操作是不能切断血缘关系，因为一旦内存中数据丢失，无法恢复数据</span></span><br><span class="line">        <span class="keyword">val</span> rdd2: <span class="type">RDD</span>[<span class="type">Int</span>] = rdd1.cache()</span><br><span class="line">        rdd2.checkpoint()</span><br><span class="line">        println(rdd2.toDebugString)</span><br><span class="line">        println(rdd2.collect().mkString(<span class="string">","</span>))</span><br><span class="line">        println(rdd2.toDebugString)</span><br><span class="line">        println(<span class="string">"**********************"</span>)</span><br><span class="line">        println(rdd2.collect().mkString(<span class="string">","</span>))</span><br><span class="line"></span><br><span class="line">        sc.stop()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="RDD分区器"><a href="#RDD分区器" class="headerlink" title="RDD分区器"></a>RDD分区器</h3><p>Spark目前支持Hash分区和Range分区，和用户自定义分区。</p><p><strong>Hash分区为当前的默认分区。</strong></p><p>分区器直接决定了RDD中分区的个数、RDD中每条数据经过Shuffle后进入哪个分区，进而决定了Reduce的个数。</p><ul><li><p>只有Key-Value类型的RDD才有分区器，非Key-Value类型的RDD分区的值是None</p></li><li><p>每个RDD的分区ID范围：0 ~ (numPartitions - 1)，决定这个值是属于那个分区的。</p></li></ul><p><strong>1)</strong> <strong>Hash分区</strong>：对于给定的key，计算其hashCode,并除以分区个数取余</p><p><strong>2)</strong> <strong>Range分区</strong>：将一定范围内的数据映射到一个分区中，尽量保证每个分区数据均匀，而且分区间有序</p><h3 id="文件读取与保存"><a href="#文件读取与保存" class="headerlink" title="文件读取与保存"></a>文件读取与保存</h3><p>Spark的数据读取及数据保存可以从两个维度来作区分：文件格式以及文件系统。</p><p>文件格式分为：text文件、json文件、csv文件、sequence文件以及Object文件；</p><p>文件系统分为：本地文件系统、HDFS、HBASE以及数据库。</p><h2 id="累加器"><a href="#累加器" class="headerlink" title="累加器"></a>累加器</h2><p>累加器用来把Executor端变量信息聚合到Driver端。</p><p>在Driver程序中定义的变量，在Executor端的每个Task都会得到这个变量的一份新的副本，每个task更新这些副本的值后，传回Driver端进行merge。</p><p>系统累加器</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> rdd = sc.makeRDD(<span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>))</span><br><span class="line"><span class="comment">// 声明累加器</span></span><br><span class="line"><span class="keyword">var</span> sum = sc.longAccumulator(<span class="string">"sum"</span>);</span><br><span class="line">rdd.foreach(</span><br><span class="line">  num =&gt; &#123;</span><br><span class="line">    <span class="comment">// 使用累加器</span></span><br><span class="line">    sum.add(num)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 获取累加器的值</span></span><br><span class="line">println(<span class="string">"sum = "</span> + sum.value)</span><br></pre></td></tr></table></figure></div><p>自定义累加器</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义累加器</span></span><br><span class="line"><span class="comment">// 1. 继承AccumulatorV2，并设定泛型</span></span><br><span class="line"><span class="comment">// 2. 重写累加器的抽象方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WordCountAccumulator</span> <span class="keyword">extends</span> <span class="title">AccumulatorV2</span>[<span class="type">String</span>, mutable.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Long</span>]]</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> map : mutable.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Long</span>] = mutable.<span class="type">Map</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 累加器是否为初始状态</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">isZero</span></span>: <span class="type">Boolean</span> = &#123;</span><br><span class="line">  map.isEmpty</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复制累加器</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">copy</span></span>(): <span class="type">AccumulatorV2</span>[<span class="type">String</span>, mutable.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Long</span>]] = &#123;</span><br><span class="line">  <span class="keyword">new</span> <span class="type">WordCountAccumulator</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重置累加器</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">reset</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">  map.clear()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向累加器中增加数据 (In)</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(word: <span class="type">String</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 查询map中是否存在相同的单词</span></span><br><span class="line">    <span class="comment">// 如果有相同的单词，那么单词的数量加1</span></span><br><span class="line">    <span class="comment">// 如果没有相同的单词，那么在map中增加这个单词</span></span><br><span class="line">    map(word) = map.getOrElse(word, <span class="number">0</span>L) + <span class="number">1</span>L</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并累加器</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">merge</span></span>(other: <span class="type">AccumulatorV2</span>[<span class="type">String</span>, mutable.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Long</span>]]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> map1 = map</span><br><span class="line">  <span class="keyword">val</span> map2 = other.value</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 两个Map的合并</span></span><br><span class="line">  map = map1.foldLeft(map2)(</span><br><span class="line">    ( innerMap, kv ) =&gt; &#123;</span><br><span class="line">      innerMap(kv._1) = innerMap.getOrElse(kv._1, <span class="number">0</span>L) + kv._2</span><br><span class="line">      innerMap</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回累加器的结果 （Out）</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">value</span></span>: mutable.<span class="type">Map</span>[<span class="type">String</span>, <span class="type">Long</span>] = map</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="广播变量"><a href="#广播变量" class="headerlink" title="广播变量"></a>广播变量</h2><p>广播变量用来高效分发较大的对象。向所有工作节点发送一个较大的<strong>只读</strong>值，以供一个或多个Spark操作使用。比如，如果你的应用需要向所有节点发送一个较大的只读查询表，广播变量用起来都很顺手。在多个并行操作中使用同一个变量，但是 Spark会为每个任务分别发送。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> rdd1 = sc.makeRDD(<span class="type">List</span>( (<span class="string">"a"</span>,<span class="number">1</span>), (<span class="string">"b"</span>, <span class="number">2</span>), (<span class="string">"c"</span>, <span class="number">3</span>), (<span class="string">"d"</span>, <span class="number">4</span>) ),<span class="number">4</span>)</span><br><span class="line"><span class="keyword">val</span> list = <span class="type">List</span>( (<span class="string">"a"</span>,<span class="number">4</span>), (<span class="string">"b"</span>, <span class="number">5</span>), (<span class="string">"c"</span>, <span class="number">6</span>), (<span class="string">"d"</span>, <span class="number">7</span>) )</span><br><span class="line"><span class="comment">// 声明广播变量</span></span><br><span class="line"><span class="keyword">val</span> broadcast: <span class="type">Broadcast</span>[<span class="type">List</span>[(<span class="type">String</span>, <span class="type">Int</span>)]] = sc.broadcast(list)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> resultRDD: <span class="type">RDD</span>[(<span class="type">String</span>, (<span class="type">Int</span>, <span class="type">Int</span>))] = rdd1.map &#123;</span><br><span class="line">  <span class="keyword">case</span> (key, num) =&gt; &#123;</span><br><span class="line">    <span class="keyword">var</span> num2 = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 使用广播变量</span></span><br><span class="line">    <span class="keyword">for</span> ((k, v) &lt;- broadcast.value) &#123;</span><br><span class="line">      <span class="keyword">if</span> (k == key) &#123;</span><br><span class="line">        num2 = v</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    (key, (num, num2))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Spark Core&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Spark Core中提供了Spark最基础与最核心的功能，Spark其他的功
      
    
    </summary>
    
    
      <category term="大数据" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="spark" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/spark/"/>
    
    
      <category term="教程" scheme="https://masteryang4.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="大数据" scheme="https://masteryang4.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="spark" scheme="https://masteryang4.github.io/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>sqoop常见问题汇总</title>
    <link href="https://masteryang4.github.io/2020/06/17/sqoop%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <id>https://masteryang4.github.io/2020/06/17/sqoop%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</id>
    <published>2020-06-17T12:14:17.000Z</published>
    <updated>2020-06-17T12:15:59.786Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Sqoop是连接关系型数据库和Hadoop的桥梁，主要有两个方面(导入和导出)。</p><p>目前在我的工程实践中，一般是将MySQL数据进行导入导出</p><h1 id="Sqoop参数"><a href="#Sqoop参数" class="headerlink" title="Sqoop参数"></a>Sqoop参数</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/opt/module/sqoop/bin/sqoop import \</span><br><span class="line">--connect \</span><br><span class="line">--username \</span><br><span class="line">--password \</span><br><span class="line">--target-dir \</span><br><span class="line">--delete-target-dir \</span><br><span class="line">--num-mappers \</span><br><span class="line">--fields-terminated-by   \</span><br><span class="line">--query   "$2" ' and $CONDITIONS;'</span><br></pre></td></tr></table></figure></div><h1 id="Sqoop导入导出Null存储一致性问题"><a href="#Sqoop导入导出Null存储一致性问题" class="headerlink" title="Sqoop导入导出Null存储一致性问题"></a>Sqoop导入导出Null存储一致性问题</h1><p>Hive中的Null在底层是以“\N”来存储，而MySQL中的Null在底层就是Null。为了保证数据两端的一致性。</p><p>往hive导入数据时采用<code>--null-string</code>和<code>--null-non-string</code>。</p><p>在从hive导出数据时采用<code>--input-null-string</code>和<code>--input-null-non-string</code>两个参数。</p><h1 id="Sqoop数据导出一致性问题"><a href="#Sqoop数据导出一致性问题" class="headerlink" title="Sqoop数据导出一致性问题"></a>Sqoop数据导出一致性问题</h1><p>场景：如Sqoop在导出到Mysql时，使用4个Map任务，过程中有2个任务失败，那此时MySQL中存储了另外两个Map任务导入的数据，此时老板正好看到了这个报表数据。而开发工程师发现任务失败后，会调试问题并最终将全部数据正确的导入MySQL，那后面老板再次看报表数据，发现本次看到的数据与之前的不一致，这在生产环境是不允许的。</p><blockquote><p>官网：<a href="http://sqoop.apache.org/docs/1.4.6/SqoopUserGuide.html" target="_blank" rel="noopener">http://sqoop.apache.org/docs/1.4.6/SqoopUserGuide.html</a></p><p>Since Sqoop breaks down export process into multiple transactions, it is possible that a failed export job may result in partial data being committed to the database. This can further lead to subsequent jobs failing due to insert collisions in some cases, or lead to duplicated data in others. You can overcome this problem by specifying a staging table via the –staging-table option which acts as an auxiliary table that is used to stage exported data. The staged data is finally moved to the destination table in a single transaction.</p></blockquote><p>–staging-table方式</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">shell</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqoop export --connect jdbc:mysql://192.168.137.10:3306/user_behavior --username root --password 123456 --table app_cource_study_report --columns watch_video_cnt,complete_video_cnt,dt --fields-terminated-by "\t" --export-dir "/user/hive/warehouse/tmp.db/app_cource_study_analysis_$&#123;day&#125;" --staging-table app_cource_study_report_tmp --clear-staging-table --input-null-string '\N'</span><br></pre></td></tr></table></figure></div><h1 id="Sqoop底层运行的任务是什么"><a href="#Sqoop底层运行的任务是什么" class="headerlink" title="Sqoop底层运行的任务是什么"></a>Sqoop底层运行的任务是什么</h1><p>只有Map阶段，没有Reduce阶段的任务。</p><p>默认是4个MapTask。</p><h1 id="Sqoop一天导入多少数据"><a href="#Sqoop一天导入多少数据" class="headerlink" title="Sqoop一天导入多少数据"></a>Sqoop一天导入多少数据</h1><p>100万日活=》10万订单，1人10条，每天1g左右业务数据</p><p>Sqoop每天将1G的数据量导入到数仓。</p><h1 id="Sqoop数据导出的时候一次执行多长时间"><a href="#Sqoop数据导出的时候一次执行多长时间" class="headerlink" title="Sqoop数据导出的时候一次执行多长时间"></a>Sqoop数据导出的时候一次执行多长时间</h1><p>每天晚上00:30开始执行，Sqoop任务一般情况40 -50分钟的都有。取决于数据量（11:11，6:18等活动在1个小时左右）。</p><h1 id="Sqoop在导入数据的时候数据倾斜"><a href="#Sqoop在导入数据的时候数据倾斜" class="headerlink" title="Sqoop在导入数据的时候数据倾斜"></a>Sqoop在导入数据的时候数据倾斜</h1><blockquote><p><a href="https://blog.csdn.net/lizhiguo18/article/details/103969906" target="_blank" rel="noopener">https://blog.csdn.net/lizhiguo18/article/details/103969906</a></p></blockquote><p>Sqoop 抽数的并行化主要涉及到两个参数：num-mappers：启动N个map来并行导入数据，默认4个；split-by：按照某一列来切分表的工作单元。</p><p>通过ROWNUM() 生成一个严格均匀分布的字段，然后指定为分割字段.</p><h1 id="Sqoop数据导出Parquet"><a href="#Sqoop数据导出Parquet" class="headerlink" title="Sqoop数据导出Parquet"></a>Sqoop数据导出Parquet</h1><p><strong>我在工程项目中经常遇到的问题</strong></p><p>Ads层数据用Sqoop往MySql中导入数据的时候，如果用了orc（Parquet）不能导入，需转化成text格式</p><p>（1）创建临时表，把Parquet中表数据导入到临时表，把临时表导出到目标表用于可视化</p><p>（2）Sqoop里面有参数，可以直接把Parquet转换为text</p><p>（3）ads层建表的时候就不要建Parquet表</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;Sqoop是连接关系型数据库和Hadoop的桥梁，主要有两个方面(导入和导出)。&lt;/p&gt;
&lt;p&gt;目前在我的工程实践中，一般是将MySQL数据
      
    
    </summary>
    
    
      <category term="大数据" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="sqoop" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/sqoop/"/>
    
    
      <category term="易错点" scheme="https://masteryang4.github.io/tags/%E6%98%93%E9%94%99%E7%82%B9/"/>
    
      <category term="大数据" scheme="https://masteryang4.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="面试" scheme="https://masteryang4.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="sqoop" scheme="https://masteryang4.github.io/tags/sqoop/"/>
    
      <category term="离线大数据" scheme="https://masteryang4.github.io/tags/%E7%A6%BB%E7%BA%BF%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>spark系列之spark-streaming</title>
    <link href="https://masteryang4.github.io/2020/06/17/spark%E7%B3%BB%E5%88%97%E4%B9%8Bspark-streaming/"/>
    <id>https://masteryang4.github.io/2020/06/17/spark%E7%B3%BB%E5%88%97%E4%B9%8Bspark-streaming/</id>
    <published>2020-06-17T08:44:51.000Z</published>
    <updated>2020-06-17T11:41:04.721Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SparkStreaming概述"><a href="#SparkStreaming概述" class="headerlink" title="SparkStreaming概述"></a>SparkStreaming概述</h1><h2 id="Spark-Streaming是什么"><a href="#Spark-Streaming是什么" class="headerlink" title="Spark Streaming是什么"></a>Spark Streaming是什么</h2><p>Spark Streaming用于流式数据的处理。Spark Streaming支持的数据输入源很多，例如：Kafka、Flume、Twitter、ZeroMQ和简单的TCP套接字等等。数据输入后可以用Spark的高度抽象原语如：map、reduce、join、window等进行运算。而结果也能保存在很多地方，如HDFS，数据库等。</p><p>和Spark基于RDD的概念很相似，Spark Streaming使用<strong>离散化流(discretized stream)</strong>作为抽象表示，叫作DStream。DStream 是随时间推移而收到的数据的序列。在内部，每个时间区间收到的数据都作为 RDD 存在，而DStream是由这些RDD所组成的序列(因此得名“离散化”)。</p><h2 id="Spark-Streaming架构"><a href="#Spark-Streaming架构" class="headerlink" title="Spark Streaming架构"></a>Spark Streaming架构</h2><p>整体架构图</p><p><a href="https://pic.downk.cc/item/5ee9bd9ca240b370e3d63351.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://pic.downk.cc/item/5ee9bd9ca240b370e3d63351.png" class="lazyload"></a></p><p>spark-streaming架构图</p><p><a href="https://pic.downk.cc/item/5ee9bdaca240b370e3d646f8.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://pic.downk.cc/item/5ee9bdaca240b370e3d646f8.png" class="lazyload"></a></p><h2 id="背压机制"><a href="#背压机制" class="headerlink" title="背压机制"></a>背压机制</h2><p>Spark 1.5以前版本，用户如果要限制Receiver的数据接收速率，可以通过设置静态配制参数“spark.streaming.receiver.maxRate”的值来实现，此举虽然可以通过限制接收速率，来适配当前的处理能力，防止内存溢出，但也会引入其它问题。比如：producer数据生产高于maxRate，当前集群处理能力也高于maxRate，这就会造成资源利用率下降等问题。</p><p>为了更好的协调数据接收速率与资源处理能力，1.5版本开始Spark Streaming可以动态控制数据接收速率来适配集群数据处理能力。背压机制（即Spark Streaming Backpressure）: 根据JobScheduler反馈作业的执行信息来动态调整Receiver数据接收率。</p><p>通过属性<code>spark.streaming.backpressure.enabled</code>来控制是否启用backpressure机制，默认值false，即不启用。</p><h1 id="DStream入门"><a href="#DStream入门" class="headerlink" title="DStream入门"></a>DStream入门</h1><p>需求：使用netcat工具向9999端口不断的发送数据，通过SparkStreaming读取端口数据并统计不同单词出现的次数</p><p>maven依赖</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-streaming_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>WordCount案例代码</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">StreamWordCount</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.初始化Spark配置信息</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"StreamWordCount"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.初始化SparkStreamingContext</span></span><br><span class="line">    <span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="type">StreamingContext</span>(sparkConf, <span class="type">Seconds</span>(<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.通过监控端口创建DStream，读进来的数据为一行行</span></span><br><span class="line">    <span class="keyword">val</span> lineStreams = ssc.socketTextStream(<span class="string">"linux1"</span>, <span class="number">9999</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将每一行数据做切分，形成一个个单词</span></span><br><span class="line">    <span class="keyword">val</span> wordStreams = lineStreams.flatMap(_.split(<span class="string">" "</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将单词映射成元组（word,1）</span></span><br><span class="line">    <span class="keyword">val</span> wordAndOneStreams = wordStreams.map((_, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将相同的单词次数做统计</span></span><br><span class="line">    <span class="keyword">val</span> wordAndCountStreams = wordAndOneStreams.reduceByKey(_+_)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印</span></span><br><span class="line">    wordAndCountStreams.print()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//启动SparkStreamingContext</span></span><br><span class="line">    ssc.start()</span><br><span class="line">    ssc.awaitTermination()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>启动程序并通过netcat发送数据：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nc -lk 9999</span><br><span class="line">hello ysss</span><br></pre></td></tr></table></figure></div><p>WordCount解析</p><p>Discretized Stream是Spark Streaming的基础抽象，代表持续性的数据流和经过各种Spark原语操作后的结果数据流。在内部实现上，DStream是一系列连续的RDD来表示。<strong>每个RDD含有一段时间间隔内的数据。</strong></p><h1 id="DStream创建-数据源"><a href="#DStream创建-数据源" class="headerlink" title="DStream创建/数据源"></a>DStream创建/数据源</h1><h2 id="RDD队列"><a href="#RDD队列" class="headerlink" title="RDD队列"></a>RDD队列</h2><p>测试过程中，可以通过使用ssc.queueStream(queueOfRDDs)来创建DStream，每一个推送到这个队列中的RDD，都会作为一个DStream处理。</p><ul><li>需求：循环创建几个RDD，将RDD放入队列。通过SparkStream创建Dstream，计算WordCount</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ysss.bigdata.spark.streaming</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.dstream.&#123;<span class="type">DStream</span>, <span class="type">InputDStream</span>, <span class="type">ReceiverInputDStream</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.&#123;<span class="type">Seconds</span>, <span class="type">StreamingContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.collection.mutable</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SparkStreaming02_DStream_Queue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 配置对象</span></span><br><span class="line">        <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"wordcount"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 环境对象</span></span><br><span class="line">        <span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="type">StreamingContext</span>(sparkConf, <span class="type">Seconds</span>(<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 数据处理</span></span><br><span class="line">        <span class="keyword">val</span> que = <span class="keyword">new</span> mutable.<span class="type">Queue</span>[<span class="type">RDD</span>[<span class="type">String</span>]]()</span><br><span class="line">        <span class="keyword">val</span> queDS: <span class="type">InputDStream</span>[<span class="type">String</span>] = ssc.queueStream(que)</span><br><span class="line">        queDS.print()</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 关闭连接环境</span></span><br><span class="line">        ssc.start()</span><br><span class="line"></span><br><span class="line">        println(<span class="string">"queue append item"</span>)</span><br><span class="line">        <span class="keyword">for</span> ( i &lt;- <span class="number">1</span> to <span class="number">5</span> ) &#123;</span><br><span class="line">            <span class="keyword">val</span> rdd = ssc.sparkContext.makeRDD(<span class="type">List</span>(<span class="string">"1"</span>,<span class="string">"2"</span>))</span><br><span class="line">            que += rdd</span><br><span class="line">            <span class="type">Thread</span>.sleep(<span class="number">2000</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// block</span></span><br><span class="line">        ssc.awaitTermination()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>结果</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">-------------------------------------------</span><br><span class="line">Time: 1539075280000 ms</span><br><span class="line">-------------------------------------------</span><br><span class="line">(4,60)</span><br><span class="line">(0,60)</span><br><span class="line">(6,60)</span><br><span class="line">(8,60)</span><br><span class="line">(2,60)</span><br><span class="line">(1,60)</span><br><span class="line">(3,60)</span><br><span class="line">(7,60)</span><br><span class="line">(9,60)</span><br><span class="line">(5,60)</span><br><span class="line"></span><br><span class="line">-------------------------------------------</span><br><span class="line">Time: 1539075284000 ms</span><br><span class="line">-------------------------------------------</span><br><span class="line">(4,60)</span><br><span class="line">(0,60)</span><br><span class="line">(6,60)</span><br><span class="line">(8,60)</span><br><span class="line">(2,60)</span><br><span class="line">(1,60)</span><br><span class="line">(3,60)</span><br><span class="line">(7,60)</span><br><span class="line">(9,60)</span><br><span class="line">(5,60)</span><br><span class="line"></span><br><span class="line">-------------------------------------------</span><br><span class="line">Time: 1539075288000 ms</span><br><span class="line">-------------------------------------------</span><br><span class="line">(4,30)</span><br><span class="line">(0,30)</span><br><span class="line">(6,30)</span><br><span class="line">(8,30)</span><br><span class="line">(2,30)</span><br><span class="line">(1,30)</span><br><span class="line">(3,30)</span><br><span class="line">(7,30)</span><br><span class="line">(9,30)</span><br><span class="line">(5,30)</span><br><span class="line"></span><br><span class="line">-------------------------------------------</span><br><span class="line">Time: 1539075292000 ms</span><br><span class="line">-------------------------------------------</span><br></pre></td></tr></table></figure></div><p>扩展，从文件中读取</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ysss.bigdata.spark.streaming</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.dstream.&#123;<span class="type">DStream</span>, <span class="type">InputDStream</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.&#123;<span class="type">Seconds</span>, <span class="type">StreamingContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.collection.mutable</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SparkStreaming03_DStream_File</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 配置对象</span></span><br><span class="line">        <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"wordcount"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 环境对象</span></span><br><span class="line">        <span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="type">StreamingContext</span>(sparkConf, <span class="type">Seconds</span>(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 数据处理</span></span><br><span class="line">        <span class="comment">// 从文件夹中读取新的文件数据，功能不稳定 ，所以不推荐使用</span></span><br><span class="line">        <span class="comment">// flume更加专业，所以生产环境，监控文件或目录的变化，采集数据都使用flume</span></span><br><span class="line">        <span class="keyword">val</span> fileDS: <span class="type">DStream</span>[<span class="type">String</span>] = ssc.textFileStream(<span class="string">"in"</span>)</span><br><span class="line">        <span class="keyword">val</span> wordDS: <span class="type">DStream</span>[<span class="type">String</span>] = fileDS.flatMap(_.split(<span class="string">" "</span>))</span><br><span class="line">        <span class="keyword">val</span> wordToOneDS: <span class="type">DStream</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = wordDS.map( (_, <span class="number">1</span>) )</span><br><span class="line">        <span class="keyword">val</span> wordToCountDS: <span class="type">DStream</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = wordToOneDS.reduceByKey(_+_)</span><br><span class="line">        wordToCountDS.print()</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 关闭连接环境</span></span><br><span class="line">        ssc.start()</span><br><span class="line">        ssc.awaitTermination()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="自定义数据源"><a href="#自定义数据源" class="headerlink" title="自定义数据源"></a>自定义数据源</h2><p>需要继承Receiver，并实现onStart、onStop方法来自定义数据源采集。</p><ul><li>需求：自定义数据源，实现监控某个端口号，获取该端口号内容。</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ysss.bigdata.spark.streaming</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.&#123;<span class="type">BufferedReader</span>, <span class="type">InputStreamReader</span>&#125;</span><br><span class="line"><span class="keyword">import</span> java.net.<span class="type">Socket</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.storage.<span class="type">StorageLevel</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.dstream.<span class="type">DStream</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.receiver.<span class="type">Receiver</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.&#123;<span class="type">Seconds</span>, <span class="type">StreamingContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SparkStreaming04_DStream_DIY</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 配置对象</span></span><br><span class="line">        <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"wordcount"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 环境对象</span></span><br><span class="line">        <span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="type">StreamingContext</span>(sparkConf, <span class="type">Seconds</span>(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 数据处理</span></span><br><span class="line">        <span class="comment">// 自定义数据采集器</span></span><br><span class="line">        <span class="keyword">val</span> myDS = ssc.receiverStream( <span class="keyword">new</span> <span class="type">MyReceiver</span>( <span class="string">"localhost"</span>, <span class="number">9999</span> ) )</span><br><span class="line">        <span class="keyword">val</span> wordDS: <span class="type">DStream</span>[<span class="type">String</span>] = myDS.flatMap(_.split(<span class="string">" "</span>))</span><br><span class="line">        <span class="keyword">val</span> wordToOneDS: <span class="type">DStream</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = wordDS.map( (_, <span class="number">1</span>) )</span><br><span class="line">        <span class="keyword">val</span> wordToCountDS: <span class="type">DStream</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = wordToOneDS.reduceByKey(_+_)</span><br><span class="line">        wordToCountDS.print()</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 关闭连接环境</span></span><br><span class="line">        ssc.start()</span><br><span class="line">        ssc.awaitTermination()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    自定义数据采集器</span></span><br><span class="line"><span class="comment">    模仿spark自带的socket采集器</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    1. 继承Receiver ,设定泛型（采集数据的类型）, 传递参数</span></span><br><span class="line"><span class="comment">    2. 重写方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// rdd cache, checkpoint</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyReceiver</span>(<span class="params">host:<span class="type">String</span>, port:<span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Receiver</span>[<span class="type">String</span>](<span class="params"><span class="type">StorageLevel</span>.<span class="type">MEMORY_ONLY</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">var</span> socket: <span class="type">Socket</span> = _</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 接收数据</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">receive</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">val</span> reader = <span class="keyword">new</span> <span class="type">BufferedReader</span>(</span><br><span class="line">                <span class="keyword">new</span> <span class="type">InputStreamReader</span>(</span><br><span class="line">                    socket.getInputStream,</span><br><span class="line">                    <span class="string">"UTF-8"</span></span><br><span class="line">                )</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> s : <span class="type">String</span> = <span class="literal">null</span></span><br><span class="line">            <span class="comment">// 网络编程中，获取的数据没有null的概念</span></span><br><span class="line">            <span class="comment">// 如果网络编程中，需要明确告知服务器，客户端不再传数据，需要发送特殊的指令</span></span><br><span class="line">            <span class="comment">// 文件读取时，如果读到结束的时候，获取的结果为null</span></span><br><span class="line">            <span class="keyword">while</span> ( (s = reader.readLine()) != <span class="literal">null</span> ) &#123;</span><br><span class="line">                <span class="comment">// 采集到数据后，进行封装(存储)</span></span><br><span class="line">                <span class="keyword">if</span> ( s != <span class="string">"-END-"</span> ) &#123;</span><br><span class="line">                    store(s)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// stop</span></span><br><span class="line">                    <span class="comment">// close</span></span><br><span class="line">                    <span class="comment">// 重启</span></span><br><span class="line">                    <span class="comment">//restart("")</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 启动采集器</span></span><br><span class="line">        <span class="comment">// 采集 &amp; 封装</span></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">onStart</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">            socket = <span class="keyword">new</span> <span class="type">Socket</span>(host, port)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">new</span> <span class="type">Thread</span>(<span class="string">"Socket Receiver"</span>) &#123;</span><br><span class="line">                setDaemon(<span class="literal">true</span>)</span><br><span class="line">                <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">run</span></span>() &#123; receive() &#125;</span><br><span class="line">            &#125;.start()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">onStop</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ( socket != <span class="literal">null</span> ) &#123;</span><br><span class="line">                socket.close()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="kakfa数据源-重点"><a href="#kakfa数据源-重点" class="headerlink" title="kakfa数据源[重点]"></a>kakfa数据源[重点]</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>ReceiverAPI：需要一个专门的Executor去接收数据，然后发送给其他的Executor做计算。存在的问题，接收数据的Executor和计算的Executor速度会有所不同，特别在接收数据的Executor速度大于计算的Executor速度，会导致计算数据的节点内存溢出。</p><p>DirectAPI：是由计算的Executor来主动消费Kafka的数据，速度由自身控制。</p><h3 id="kafka-0-8-Receiver-模式"><a href="#kafka-0-8-Receiver-模式" class="headerlink" title="kafka 0-8 Receiver 模式"></a>kafka 0-8 Receiver 模式</h3><p>这种方式使用Receiver来获取数据。Receiver是使用Kafka的高层次Consumer API来实现的。receiver从Kafka中获取的数据都是存储在Spark Executor的内存中的（如果突然数据暴增，大量batch堆积，很容易出现内存溢出的问题），然后Spark Streaming启动的job会去处理那些数据。 </p><p>然而，在默认的配置下，这种方式可能会因为底层的失败而丢失数据。<strong>如果要启用高可靠机制，让数据零丢失，就必须启用Spark Streaming的预写日志机制（Write Ahead Log，WAL）。</strong>该机制会同步地将接收到的Kafka数据写入分布式文件系统（比如HDFS）上的预写日志中。所以，即使底层节点出现了失败，也可以使用预写日志中的数据进行恢复。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-streaming-kafka-0-8_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ysss.bigdata.spark.streaming</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.&#123;<span class="type">BufferedReader</span>, <span class="type">InputStreamReader</span>&#125;</span><br><span class="line"><span class="keyword">import</span> java.net.<span class="type">Socket</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.storage.<span class="type">StorageLevel</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.dstream.&#123;<span class="type">DStream</span>, <span class="type">ReceiverInputDStream</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.kafka.<span class="type">KafkaUtils</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.receiver.<span class="type">Receiver</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.&#123;<span class="type">Seconds</span>, <span class="type">StreamingContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SparkStreaming05_DStream_Kafka</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 配置对象</span></span><br><span class="line">        <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"wordcount"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 环境对象</span></span><br><span class="line">        <span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="type">StreamingContext</span>(sparkConf, <span class="type">Seconds</span>(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 数据处理</span></span><br><span class="line">        <span class="comment">// 使用0.8版本的kafka - 接收器方式</span></span><br><span class="line">        <span class="comment">// 访问kakfa会有相应的工具类</span></span><br><span class="line">        <span class="keyword">val</span> kafkaDS: <span class="type">ReceiverInputDStream</span>[(<span class="type">String</span>, <span class="type">String</span>)] = <span class="type">KafkaUtils</span>.createStream(</span><br><span class="line">            ssc,</span><br><span class="line">            <span class="string">"linux1:2181,linux2:2181,linux3:2181"</span>,</span><br><span class="line">            <span class="string">"ysss191125"</span>,</span><br><span class="line">            <span class="type">Map</span>(<span class="string">"ysss191125"</span> -&gt; <span class="number">3</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Kafka消息传递的时候以k-v对</span></span><br><span class="line">        <span class="comment">// k - 传值的时候提供的，默认为null,主要用于分区</span></span><br><span class="line">        <span class="comment">// v - message</span></span><br><span class="line">        kafkaDS.map(_._2).print()</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 关闭连接环境</span></span><br><span class="line">        ssc.start()</span><br><span class="line">        ssc.awaitTermination()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="kafka-0-8-Direct-模式"><a href="#kafka-0-8-Direct-模式" class="headerlink" title="kafka 0-8 Direct 模式"></a>kafka 0-8 Direct 模式</h3><p>这种新的不基于Receiver的直接方式，是在Spark 1.3中引入的，从而能够确保更加健壮的机制。替代掉使用Receiver来接收数据后，这种方式会周期性地查询Kafka，来获得每个topic+partition的最新的offset，从而定义每个batch的offset的范围。当处理数据的job启动时，就会使用Kafka的简单consumer api来获取Kafka指定offset范围的数据。 </p><p>自动维护 offset</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ysss.bigdata.spark.streaming</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> kafka.serializer.<span class="type">StringDecoder</span></span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.<span class="type">ConsumerConfig</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.dstream.<span class="type">InputDStream</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.kafka.<span class="type">KafkaUtils</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.&#123;<span class="type">Seconds</span>, <span class="type">StreamingContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SparkStreaming07_DStream_Kafka_Direct1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 这种方式，可以保证数据不丢失，但是可能会出现数据重复消费</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 环境对象 - 从checkpoint中读取数据偏移量</span></span><br><span class="line">        <span class="comment">//                 checkpoint还保存了计算逻辑,不适合扩展功能</span></span><br><span class="line">        <span class="comment">//                 checkpoint会延续计算，但是可能会压垮内存</span></span><br><span class="line">        <span class="comment">//                 checkpoint一般的存储路径为HDFS，所以会导致小文件过多。性能受到影响</span></span><br><span class="line">        <span class="comment">// 不推荐使用</span></span><br><span class="line">        <span class="keyword">val</span> ssc: <span class="type">StreamingContext</span> = <span class="type">StreamingContext</span>.getActiveOrCreate(<span class="string">"scp"</span>, () =&gt; getStreamingContext)</span><br><span class="line">        <span class="comment">// TODO 关闭连接环境</span></span><br><span class="line">        ssc.start()</span><br><span class="line">        ssc.awaitTermination()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getStreamingContext</span> </span>() = &#123;</span><br><span class="line">        <span class="comment">// TODO 配置对象</span></span><br><span class="line">        <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"wordcount"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="type">StreamingContext</span>(sparkConf, <span class="type">Seconds</span>(<span class="number">5</span>))</span><br><span class="line">        ssc.checkpoint(<span class="string">"scp"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 数据处理</span></span><br><span class="line">        <span class="comment">// 使用0.8版本的kafka - Direct方式 - 自动维护Offset</span></span><br><span class="line">        <span class="comment">// TODO 默认情况下，SparkStreaming采用checkpoint来保存kafka的数据偏移量</span></span><br><span class="line">        <span class="comment">// 访问kakfa会有相应的工具类</span></span><br><span class="line">        <span class="keyword">val</span> kafkaParamMap = <span class="type">Map</span>(</span><br><span class="line">            <span class="type">ConsumerConfig</span>.<span class="type">BOOTSTRAP_SERVERS_CONFIG</span> -&gt; <span class="string">"linux1:9092,linux2:9092,linux3:9092"</span>,</span><br><span class="line">            <span class="type">ConsumerConfig</span>.<span class="type">GROUP_ID_CONFIG</span> -&gt; <span class="string">"ysss191125new"</span></span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">val</span> kafkaDS: <span class="type">InputDStream</span>[(<span class="type">String</span>, <span class="type">String</span>)] = <span class="type">KafkaUtils</span>.createDirectStream[<span class="type">String</span>, <span class="type">String</span>, <span class="type">StringDecoder</span>, <span class="type">StringDecoder</span>](</span><br><span class="line">            ssc,</span><br><span class="line">            kafkaParamMap,</span><br><span class="line">            <span class="type">Set</span>(<span class="string">"ysss191125new"</span>)</span><br><span class="line">        )</span><br><span class="line">        kafkaDS.map(_._2).print()</span><br><span class="line">        kafkaDS.print()</span><br><span class="line"></span><br><span class="line">        ssc</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>手动维护 offset</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ysss.bigdata.spark.streaming</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> kafka.common.<span class="type">TopicAndPartition</span></span><br><span class="line"><span class="keyword">import</span> kafka.message.<span class="type">MessageAndMetadata</span></span><br><span class="line"><span class="keyword">import</span> kafka.serializer.<span class="type">StringDecoder</span></span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.<span class="type">ConsumerConfig</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.dstream.<span class="type">InputDStream</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.kafka.&#123;<span class="type">HasOffsetRanges</span>, <span class="type">KafkaUtils</span>, <span class="type">OffsetRange</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.&#123;<span class="type">Seconds</span>, <span class="type">StreamingContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SparkStreaming08_DStream_Kafka_Direc2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 配置对象</span></span><br><span class="line">        <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"wordcount"</span>)</span><br><span class="line">        <span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="type">StreamingContext</span>(sparkConf, <span class="type">Seconds</span>(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 数据处理</span></span><br><span class="line">        <span class="comment">// 使用0.8版本的kafka - Direct方式 - 手动维护Offset</span></span><br><span class="line">        <span class="comment">// 所谓的手动维护，其实就是开发人员自己获取偏移量，并进行保存处理。</span></span><br><span class="line">        <span class="comment">// 通过保存的偏移量，可以动态获取kafka中指定位置的数据</span></span><br><span class="line">        <span class="comment">// offset会保存到kakfa集群的系统主题中__consumer_offsets</span></span><br><span class="line">        <span class="keyword">val</span> kafkaMap = <span class="type">Map</span>(</span><br><span class="line">            <span class="type">ConsumerConfig</span>.<span class="type">BOOTSTRAP_SERVERS_CONFIG</span> -&gt; <span class="string">"linux1:9092,linux2:9092,linux3:9092"</span>,</span><br><span class="line">            <span class="type">ConsumerConfig</span>.<span class="type">GROUP_ID_CONFIG</span> -&gt; <span class="string">"ysss191125123"</span></span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">val</span> fromOffsets = <span class="type">Map</span>(</span><br><span class="line">            (<span class="type">TopicAndPartition</span>(<span class="string">"ysss191125new"</span>, <span class="number">0</span>), <span class="number">0</span>L),</span><br><span class="line">            (<span class="type">TopicAndPartition</span>(<span class="string">"ysss191125new"</span>, <span class="number">1</span>), <span class="number">1</span>L),</span><br><span class="line">            (<span class="type">TopicAndPartition</span>(<span class="string">"ysss191125new"</span>, <span class="number">2</span>), <span class="number">2</span>L)</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">// TODO 从kafka中获取指定topic中指定offset的数据</span></span><br><span class="line">        <span class="keyword">val</span> kafkaDS: <span class="type">InputDStream</span>[<span class="type">String</span>] = <span class="type">KafkaUtils</span>.createDirectStream[<span class="type">String</span>, <span class="type">String</span>, <span class="type">StringDecoder</span>, <span class="type">StringDecoder</span>, <span class="type">String</span>](</span><br><span class="line">            ssc,</span><br><span class="line">            kafkaMap,</span><br><span class="line">            fromOffsets,</span><br><span class="line">            (m:<span class="type">MessageAndMetadata</span>[<span class="type">String</span>, <span class="type">String</span>]) =&gt; m.message()</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> offsetRanges = <span class="type">Array</span>.empty[<span class="type">OffsetRange</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转换</span></span><br><span class="line">        <span class="comment">// 获取偏移量，一定要在最初的逻辑中获取，防止数据处理完毕后，无偏移量信息</span></span><br><span class="line">        kafkaDS.transform(rdd =&gt; &#123;</span><br><span class="line">            <span class="comment">// 获取RDD中的偏移量范围</span></span><br><span class="line">            <span class="comment">// 默认Spark中的RDD是没有offsetRanges方法，所以必须转换类型后才能使用</span></span><br><span class="line">            <span class="comment">// RDD 和 HasOffsetRanges有关系</span></span><br><span class="line">            offsetRanges = rdd.asInstanceOf[<span class="type">HasOffsetRanges</span>].offsetRanges</span><br><span class="line">            rdd</span><br><span class="line">        &#125;).foreachRDD(rdd=&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (o &lt;- offsetRanges) &#123;</span><br><span class="line">                println(<span class="string">s"<span class="subst">$&#123;o.topic&#125;</span> <span class="subst">$&#123;o.partition&#125;</span> <span class="subst">$&#123;o.fromOffset&#125;</span> <span class="subst">$&#123;o.untilOffset&#125;</span>"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            rdd.foreach(println)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        ssc.start()</span><br><span class="line">        ssc.awaitTermination()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="kafka-0-10-Direct-模式"><a href="#kafka-0-10-Direct-模式" class="headerlink" title="kafka 0-10 Direct 模式"></a>kafka 0-10 Direct 模式</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-streaming-kafka-0-10_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ysss.bigdata.spark.streaming</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.&#123;<span class="type">ConsumerConfig</span>, <span class="type">ConsumerRecord</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.dstream.<span class="type">InputDStream</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.kafka010.&#123;<span class="type">ConsumerStrategies</span>, <span class="type">KafkaUtils</span>, <span class="type">LocationStrategies</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.&#123;<span class="type">Seconds</span>, <span class="type">StreamingContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SparkStreaming08_DStream_Kafka_Direc2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 配置对象</span></span><br><span class="line">        <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"wordcount"</span>)</span><br><span class="line">        <span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="type">StreamingContext</span>(sparkConf, <span class="type">Seconds</span>(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 数据处理</span></span><br><span class="line">        <span class="comment">// 使用0.10版本的kafka - Direct方式 - 自动维护Offset</span></span><br><span class="line">        <span class="comment">// LocationStrategy : 位置策略</span></span><br><span class="line">        <span class="comment">// ConsumerStrategies : 消费策略</span></span><br><span class="line">        <span class="comment">// TODO sealed : 用于修饰类的关键字，表示密封类</span></span><br><span class="line">        <span class="comment">//              要求子类如果是样例类，必须全部在同一个源码文件中</span></span><br><span class="line">        <span class="keyword">val</span> kafkaMap = <span class="type">Map</span>(</span><br><span class="line">            <span class="type">ConsumerConfig</span>.<span class="type">BOOTSTRAP_SERVERS_CONFIG</span> -&gt; <span class="string">"linux1:9092,linux2:9092,linux3:9092"</span>,</span><br><span class="line">            <span class="type">ConsumerConfig</span>.<span class="type">GROUP_ID_CONFIG</span> -&gt; <span class="string">"ysss191125123"</span>,</span><br><span class="line">            <span class="type">ConsumerConfig</span>.<span class="type">KEY_DESERIALIZER_CLASS_CONFIG</span> -&gt; <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>,</span><br><span class="line">            <span class="type">ConsumerConfig</span>.<span class="type">VALUE_DESERIALIZER_CLASS_CONFIG</span> -&gt; <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span></span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">val</span> kafkaDS: <span class="type">InputDStream</span>[<span class="type">ConsumerRecord</span>[<span class="type">String</span>, <span class="type">String</span>]] = <span class="type">KafkaUtils</span>.createDirectStream[<span class="type">String</span>, <span class="type">String</span>](</span><br><span class="line">            ssc,</span><br><span class="line">            <span class="type">LocationStrategies</span>.<span class="type">PreferConsistent</span>,</span><br><span class="line">            <span class="type">ConsumerStrategies</span>.<span class="type">Subscribe</span>[<span class="type">String</span>, <span class="type">String</span>](</span><br><span class="line">                <span class="type">Set</span>(<span class="string">"ysss191125new"</span>), kafkaMap</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">        kafkaDS.map(_.value()).print()</span><br><span class="line"></span><br><span class="line">        ssc.start()</span><br><span class="line">        ssc.awaitTermination()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>手动维护可参考官网，和0-8手动维护类似。</p><p><strong>spark-streaming如何保证数据精准一次性处理呢？</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ysss.bigdata.spark.streaming</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> kafka.common.<span class="type">TopicAndPartition</span></span><br><span class="line"><span class="keyword">import</span> kafka.message.<span class="type">MessageAndMetadata</span></span><br><span class="line"><span class="keyword">import</span> kafka.serializer.<span class="type">StringDecoder</span></span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.<span class="type">ConsumerConfig</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.dstream.<span class="type">InputDStream</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.kafka.&#123;<span class="type">HasOffsetRanges</span>, <span class="type">KafkaUtils</span>, <span class="type">OffsetRange</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.&#123;<span class="type">Seconds</span>, <span class="type">StreamingContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SparkStreaming09_DStream_Kafka_Direc3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 配置对象</span></span><br><span class="line">        <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"wordcount"</span>)</span><br><span class="line">        <span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="type">StreamingContext</span>(sparkConf, <span class="type">Seconds</span>(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 数据处理</span></span><br><span class="line">        <span class="comment">// SparkStreaming消费Kafka数据时，手动维护offset的思路</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 1. 从指定的位置获取当前业务中保存的数据偏移量</span></span><br><span class="line">        <span class="comment">// mysql =&gt; message offset =&gt; 5</span></span><br><span class="line">        <span class="comment">// TODO 2. 从kafka中对应的分区里根据偏移量获取数据</span></span><br><span class="line">        <span class="comment">// topicAndPartition =&gt; topic : xxx, partition : 0, offset : 5</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 3. 消费数据时，需要将消费数据的偏移量拿到。</span></span><br><span class="line">        <span class="comment">// KafkaRDD =&gt; offsetRange =&gt; (5, 100)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 4. 执行业务操作。要求，偏移量的更新和业务要求在同一个事务中</span></span><br><span class="line">        <span class="comment">// Tx start</span></span><br><span class="line">        <span class="comment">//    service</span></span><br><span class="line">        <span class="comment">//    commit - offset -&gt; mysql</span></span><br><span class="line">        <span class="comment">// Tx commit</span></span><br><span class="line">        <span class="comment">// TODO 4.1 如果不使用事务，那么可能业务成功，但是offset提交失败</span></span><br><span class="line">        <span class="comment">//          会导致数据重复消费</span></span><br><span class="line">        <span class="comment">// TODO 4.2 如果不使用事务，那么可能offset提交成功，但是业务失败</span></span><br><span class="line">        <span class="comment">//          会导致数据丢失</span></span><br><span class="line">        <span class="comment">// TODO 4.3 分布式事务， 如果中间出现shuffle，怎么办？</span></span><br><span class="line">        <span class="comment">//          所以需要将数据拉取到driver端进行事务操作，保证数据不会出现问题。</span></span><br><span class="line">        <span class="comment">//          这样会导致driver的性能下降，所以其实不是一个好的选择。</span></span><br><span class="line">        <span class="comment">// SparkStreaming =&gt; 基本要求： 不丢失数据</span></span><br><span class="line">        <span class="comment">// Flink =&gt; 数据精准一次性处理。</span></span><br><span class="line"></span><br><span class="line">        ssc.start()</span><br><span class="line">        ssc.awaitTermination()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="消费kafka数据模式总结"><a href="#消费kafka数据模式总结" class="headerlink" title="消费kafka数据模式总结"></a>消费kafka数据模式总结</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">- 0-8 ReceiverAPI:</span><br><span class="line">1) 专门的Executor读取数据，速度不统一</span><br><span class="line">2) 跨机器传输数据</span><br><span class="line">3) Executor读取数据通过多个线程的方式，想要增加并行度，则需要多个流union</span><br><span class="line">4) offset存储在zookeeper中</span><br><span class="line"></span><br><span class="line">-  0-8 DirectAPI:</span><br><span class="line">1) Executor读取数据并计算</span><br><span class="line">2) 增加Executor个数来增加消费的并行度</span><br><span class="line">3) offset存储</span><br><span class="line">a. CheckPoint(getActiveOrCreate方式创建StreamingContext)</span><br><span class="line">b. 手动维护(有事务的存储系统)</span><br><span class="line">4) 获取offset必须在第一个调用的算子中：</span><br><span class="line">offsetRanges &#x3D; rdd.asInstanceOf[HasOffsetRanges].offsetRanges</span><br><span class="line"></span><br><span class="line">- 0-10 DirectAPI:</span><br><span class="line">1) Executor读取数据并计算</span><br><span class="line">2) 增加Executor个数来增加消费的并行度</span><br><span class="line">3) offset存储</span><br><span class="line">a. __consumer_offsets系统主题中</span><br><span class="line">b. 手动维护(有事务的存储系统)</span><br></pre></td></tr></table></figure></div><h1 id="DStream转换"><a href="#DStream转换" class="headerlink" title="DStream转换"></a>DStream转换</h1><p>DStream上的操作与RDD的类似，分为Transformations（转换）和Output Operations（输出）两种，此外转换操作中还有一些比较特殊的原语，如：updateStateByKey()、transform()以及各种Window相关的原语。</p><h2 id="无状态转化操作"><a href="#无状态转化操作" class="headerlink" title="无状态转化操作"></a>无状态转化操作</h2><p>无状态转化操作就是把简单的RDD转化操作应用到每个批次上，也就是转化DStream中的每一个RDD。部分无状态转化操作列在了下表中。注意，针对键值对的DStream转化操作(比如 reduceByKey())要添加import StreamingContext._才能在Scala中使用。</p><p><a href="https://pic.downk.cc/item/5ee9cb92a240b370e3e84b0a.png" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://pic.downk.cc/item/5ee9cb92a240b370e3e84b0a.png" class="lazyload"></a></p><p>需要记住的是，尽管这些函数看起来像作用在整个流上一样，但<strong>事实上每个DStream在内部是由许多RDD（批次）组成，且无状态转化操作是分别应用到每个RDD上的。</strong></p><p>例如：reduceByKey()会归约每个时间区间中的数据，但不会归约不同区间之间的数据。</p><h3 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h3><p><strong>transform允许DStream上执行任意的RDD-to-RDD函数。</strong>即使这些函数并没有在DStream的API中暴露出来，通过该函数可以方便的扩展Spark API。该函数每一批次调度一次。其实也就是对DStream中的RDD应用转换。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ysss.bigdata.spark.streaming</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.dstream.&#123;<span class="type">DStream</span>, <span class="type">ReceiverInputDStream</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.&#123;<span class="type">Seconds</span>, <span class="type">StreamingContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SparkStreaming10_DStream_WordCount</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"wordcount"</span>)</span><br><span class="line">        <span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="type">StreamingContext</span>(sparkConf, <span class="type">Seconds</span>(<span class="number">5</span>))</span><br><span class="line">        <span class="keyword">val</span> socketDS: <span class="type">ReceiverInputDStream</span>[<span class="type">String</span>] = ssc.socketTextStream(<span class="string">"localhost"</span>, <span class="number">9999</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 可以将DStream转换为RDD进行操作。</span></span><br><span class="line">        <span class="comment">// DStream =&gt; old RDD =&gt; new RDD =&gt; new DStream</span></span><br><span class="line">        <span class="keyword">val</span> resultDS: <span class="type">DStream</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = socketDS.transform(</span><br><span class="line">            rdd =&gt; &#123;</span><br><span class="line">                <span class="keyword">val</span> flatRDD = rdd.flatMap(_.split(<span class="string">" "</span>))</span><br><span class="line">                <span class="keyword">val</span> mapRDD = flatRDD.map((_, <span class="number">1</span>))</span><br><span class="line">                <span class="keyword">val</span> reduceRDD = mapRDD.reduceByKey(_ + _)</span><br><span class="line">                reduceRDD</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">        resultDS.print()</span><br><span class="line"></span><br><span class="line">        ssc.start()</span><br><span class="line">        ssc.awaitTermination()</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>相比直接在DStream上进行操作，transform的优势</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ysss.bigdata.spark.streaming</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.dstream.&#123;<span class="type">DStream</span>, <span class="type">ReceiverInputDStream</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.&#123;<span class="type">Seconds</span>, <span class="type">StreamingContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SparkStreaming11_DStream_Transform</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"wordcount"</span>)</span><br><span class="line">        <span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="type">StreamingContext</span>(sparkConf, <span class="type">Seconds</span>(<span class="number">5</span>))</span><br><span class="line">        <span class="keyword">val</span> socketDS: <span class="type">ReceiverInputDStream</span>[<span class="type">String</span>] = ssc.socketTextStream(<span class="string">"localhost"</span>, <span class="number">9999</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO transform可以获取底层的RDD进行处理</span></span><br><span class="line">        <span class="comment">// TODO transform可以周期性的执行driver的代码逻辑</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Code =&gt; Driver</span></span><br><span class="line"><span class="comment">//        val newDS: DStream[String] = socketDS.map(</span></span><br><span class="line"><span class="comment">//            dataString =&gt; &#123;</span></span><br><span class="line"><span class="comment">//                // Code = Executor</span></span><br><span class="line"><span class="comment">//                "string : " + dataString</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        )</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Code = Driver</span></span><br><span class="line">        <span class="comment">// JDBC.getData();</span></span><br><span class="line">        <span class="keyword">val</span> newDS1: <span class="type">DStream</span>[<span class="type">String</span>] = socketDS.transform(</span><br><span class="line">            rdd =&gt; &#123;</span><br><span class="line">                <span class="comment">// Code = Driver</span></span><br><span class="line">                <span class="comment">// JDBC.getData();</span></span><br><span class="line">                println(<span class="type">Thread</span>.currentThread().getName)</span><br><span class="line">                rdd.map(</span><br><span class="line">                    dataString =&gt; &#123;</span><br><span class="line">                        <span class="comment">// Code = Executor</span></span><br><span class="line">                        <span class="string">"string : "</span> + dataString</span><br><span class="line">                        <span class="comment">// JDBC.updateData();</span></span><br><span class="line">                    &#125;</span><br><span class="line">                )</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        newDS1.print()</span><br><span class="line"></span><br><span class="line">        ssc.start()</span><br><span class="line">        ssc.awaitTermination()</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><p><strong>两个流之间的join需要两个流的批次大小一致</strong>，这样才能做到同时触发计算。计算过程就是对当前批次的两个流中各自的RDD进行join，与两个RDD的join效果相同。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ysss.bigdata.spark.streaming</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.dstream.&#123;<span class="type">DStream</span>, <span class="type">ReceiverInputDStream</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.&#123;<span class="type">Seconds</span>, <span class="type">StreamingContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SparkStreaming12_DStream_Join</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"wordcount"</span>)</span><br><span class="line">        <span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="type">StreamingContext</span>(sparkConf, <span class="type">Seconds</span>(<span class="number">5</span>))</span><br><span class="line">        <span class="keyword">val</span> socketDS1: <span class="type">ReceiverInputDStream</span>[<span class="type">String</span>] = ssc.socketTextStream(<span class="string">"localhost"</span>, <span class="number">9999</span>)</span><br><span class="line">        <span class="keyword">val</span> socketDS2: <span class="type">ReceiverInputDStream</span>[<span class="type">String</span>] = ssc.socketTextStream(<span class="string">"localhost"</span>, <span class="number">8888</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> ds1: <span class="type">DStream</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = socketDS1.map((_,<span class="number">1</span>))</span><br><span class="line">        <span class="keyword">val</span> ds2: <span class="type">DStream</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = socketDS2.map((_,<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> joinDS: <span class="type">DStream</span>[(<span class="type">String</span>, (<span class="type">Int</span>, <span class="type">Int</span>))] = ds1.join(ds2)</span><br><span class="line"></span><br><span class="line">        joinDS.print()</span><br><span class="line"></span><br><span class="line">        ssc.start()</span><br><span class="line">        ssc.awaitTermination()</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="有状态转化操作"><a href="#有状态转化操作" class="headerlink" title="有状态转化操作"></a>有状态转化操作</h2><h3 id="UpdateStateByKey"><a href="#UpdateStateByKey" class="headerlink" title="UpdateStateByKey"></a>UpdateStateByKey</h3><p>UpdateStateByKey原语用于记录历史记录，有时，我们需要在DStream中跨批次维护状态(例如流计算中累加wordcount)。针对这种情况，updateStateByKey()为我们提供了对一个状态变量的访问，用于键值对形式的DStream。给定一个由(键，事件)对构成的 DStream，并传递一个指定如何根据新的事件更新每个键对应状态的函数，它可以构建出一个新的 DStream，其内部数据为(键，状态) 对。</p><p>updateStateByKey() 的结果会是一个新的DStream，其内部的RDD 序列是由每个时间区间对应的(键，状态)对组成的。</p><p>updateStateByKey操作使得我们可以在用新信息进行更新时保持任意的状态。为使用这个功能，需要做下面两步：</p><ul><li><p>定义状态，状态可以是一个任意的数据类型。</p></li><li><p>定义状态更新函数，用此函数阐明如何使用之前的状态和来自输入流的新值对状态进行更新。</p></li></ul><p>使用updateStateByKey需要对检查点目录进行配置，会使用检查点来保存状态。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ysss.bigdata.spark.streaming</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.dstream.&#123;<span class="type">DStream</span>, <span class="type">ReceiverInputDStream</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.&#123;<span class="type">Seconds</span>, <span class="type">StreamingContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SparkStreaming13_DStream_State</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"wordcount"</span>)</span><br><span class="line">        <span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="type">StreamingContext</span>(sparkConf, <span class="type">Seconds</span>(<span class="number">5</span>))</span><br><span class="line">        ssc.checkpoint(<span class="string">"scp"</span>)</span><br><span class="line">        <span class="keyword">val</span> socketDS = ssc.socketTextStream(<span class="string">"localhost"</span>, <span class="number">9999</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> wordDS: <span class="type">DStream</span>[<span class="type">String</span>] = socketDS.flatMap(_.split(<span class="string">" "</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> wordToOneDS: <span class="type">DStream</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = wordDS.map((_,<span class="number">1</span>))</span><br><span class="line">        <span class="comment">// TODO 使用有状态操作updateStateByKey保存数据</span></span><br><span class="line">        <span class="comment">// SparkStreaming的状态保存依赖的是checkpoint,所以需要设定相关路径</span></span><br><span class="line">        <span class="keyword">val</span> wordToCountDS: <span class="type">DStream</span>[(<span class="type">String</span>, <span class="type">Long</span>)] = wordToOneDS.updateStateByKey[<span class="type">Long</span>](</span><br><span class="line">            <span class="comment">// 累加器 = 6</span></span><br><span class="line">            <span class="comment">// UDAF = 8</span></span><br><span class="line">            <span class="comment">// TODO 第一个参数表示相同key的value数据集合</span></span><br><span class="line">            <span class="comment">// TODO 第二个参数表示相同key的缓冲区的数据</span></span><br><span class="line">            (seq: <span class="type">Seq</span>[<span class="type">Int</span>], buffer: <span class="type">Option</span>[<span class="type">Long</span>]) =&gt; &#123;</span><br><span class="line">                <span class="comment">// TODO 返回值表示更新后的缓冲区的值</span></span><br><span class="line">                <span class="keyword">val</span> newBufferValue = buffer.getOrElse(<span class="number">0</span>L) + seq.sum</span><br><span class="line">                <span class="type">Option</span>(newBufferValue)</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">        wordToCountDS.print()</span><br><span class="line"></span><br><span class="line">        ssc.start()</span><br><span class="line">        ssc.awaitTermination()</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="WindowOperations"><a href="#WindowOperations" class="headerlink" title="WindowOperations"></a>WindowOperations</h3><p>Window Operations可以设置窗口的大小和滑动窗口的间隔来动态的获取当前Steaming的允许状态。所有基于窗口的操作都需要两个参数，分别为窗口时长以及滑动步长。</p><ul><li><p>窗口时长：计算内容的时间范围；</p></li><li><p>滑动步长：隔多久触发一次计算。</p></li></ul><p><strong>注意：这两者都必须为采集周期大小的整数倍。</strong></p><p>【回顾】scala语言中的window</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ysss.bigdata.spark.streaming</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.dstream.<span class="type">DStream</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.&#123;<span class="type">Seconds</span>, <span class="type">StreamingContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SparkStreaming14_DStream_Window</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// overflow : 滚动 -&gt; StackOverflowError -&gt; 栈溢出</span></span><br><span class="line">        <span class="comment">// 滑动</span></span><br><span class="line">        <span class="comment">// flatMap =&gt; 整体-&gt;个体</span></span><br><span class="line">        <span class="comment">// sliding =&gt; 整体连续部分（3） -&gt; 整体</span></span><br><span class="line">        <span class="comment">// 将sliding中的范围称之为窗口，其中的数据就称之为窗口数据</span></span><br><span class="line">        <span class="comment">// 窗口可以动态调整，向后滑动。</span></span><br><span class="line">        <span class="keyword">val</span> iterator: <span class="type">Iterator</span>[<span class="type">List</span>[<span class="type">Int</span>]] = list.sliding(<span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">while</span> ( iterator.hasNext ) &#123;</span><br><span class="line">            println(iterator.next())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><code>window(windowLength, slideInterval):</code></p><p>基于对源DStream窗化的批次进行计算返回一个新的Dstream；</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ysss.bigdata.spark.streaming</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.dstream.&#123;<span class="type">DStream</span>, <span class="type">ReceiverInputDStream</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.&#123;<span class="type">Seconds</span>, <span class="type">StreamingContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SparkStreaming15_DStream_Window1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"wordcount"</span>)</span><br><span class="line">        <span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="type">StreamingContext</span>(sparkConf, <span class="type">Seconds</span>(<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 滑窗</span></span><br><span class="line">        <span class="keyword">val</span> socketDS: <span class="type">ReceiverInputDStream</span>[<span class="type">String</span>] = ssc.socketTextStream(<span class="string">"localhost"</span>, <span class="number">9999</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设定窗口。将2个采集周期的数据当成一个整体进行处理</span></span><br><span class="line">        <span class="comment">// 默认窗口是可以滑动的。滑动的幅度为一个采集周期</span></span><br><span class="line">        <span class="comment">// 可以动态改变滑动幅度</span></span><br><span class="line">        <span class="comment">// 如果两个窗口移动过程中，没有重合的数据，称之为滚动窗口</span></span><br><span class="line">        <span class="comment">// window方法的第一个参数表示窗口的范围大小，以采集周期为单位</span></span><br><span class="line">        <span class="comment">// window方法的第二个参数表示窗口的滑动幅度，也表示计算的周期</span></span><br><span class="line">        <span class="keyword">val</span> windowDS: <span class="type">DStream</span>[<span class="type">String</span>] = socketDS.window(</span><br><span class="line">            <span class="type">Seconds</span>(<span class="number">6</span>), <span class="type">Seconds</span>(<span class="number">3</span>))</span><br><span class="line">        windowDS</span><br><span class="line">            .flatMap(_.split(<span class="string">" "</span>))</span><br><span class="line">            .map((_,<span class="number">1</span>))</span><br><span class="line">            .reduceByKey(_+_)</span><br><span class="line">            .print()</span><br><span class="line"></span><br><span class="line">        ssc.start()</span><br><span class="line">        ssc.awaitTermination()</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><code>reduceByKeyAndWindow(func, windowLength, slideInterval, [numTasks]):</code></p><p>当在一个(K,V)对的DStream上调用此函数，会返回一个新(K,V)对的DStream，此处通过对滑动窗口中批次数据使用reduce函数来整合每个key的value值。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ysss.bigdata.spark.streaming</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.dstream.&#123;<span class="type">DStream</span>, <span class="type">ReceiverInputDStream</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.&#123;<span class="type">Seconds</span>, <span class="type">StreamingContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SparkStreaming17_DStream_Window3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"wordcount"</span>)</span><br><span class="line">        <span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="type">StreamingContext</span>(sparkConf, <span class="type">Seconds</span>(<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 滑窗</span></span><br><span class="line">        <span class="keyword">val</span> socketDS: <span class="type">ReceiverInputDStream</span>[<span class="type">String</span>] = ssc.socketTextStream(<span class="string">"localhost"</span>, <span class="number">9999</span>)</span><br><span class="line">        <span class="keyword">val</span> wordToOneDS: <span class="type">DStream</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = socketDS</span><br><span class="line">                .flatMap(_.split(<span class="string">" "</span>))</span><br><span class="line">                .map((_, <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">val</span> windowDS: <span class="type">DStream</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = wordToOneDS.reduceByKeyAndWindow(</span><br><span class="line">            (x: <span class="type">Int</span>, y: <span class="type">Int</span>) =&gt; x + y, <span class="type">Seconds</span>(<span class="number">6</span>), <span class="type">Seconds</span>(<span class="number">3</span>)</span><br><span class="line">        )</span><br><span class="line">        windowDS.print()</span><br><span class="line"></span><br><span class="line">        ssc.start()</span><br><span class="line">        ssc.awaitTermination()</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><code>reduceByKeyAndWindow(func, invFunc, windowLength, slideInterval, [numTasks]):</code></p><p>这个函数是上述函数的变化版本，每个窗口的reduce值都是通过用前一个窗的reduce值来递增计算。通过reduce进入到滑动窗口数据并”反向reduce”离开窗口的旧数据来实现这个操作。一个例子是随着窗口滑动对keys的“加”“减”计数。通过前边介绍可以想到，这个函数只适用于”可逆的reduce函数”，也就是这些reduce函数有相应的”反reduce”函数(以参数invFunc形式传入)。如前述函数，reduce任务的数量通过可选参数来配置。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ysss.bigdata.spark.streaming</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.dstream.&#123;<span class="type">DStream</span>, <span class="type">ReceiverInputDStream</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.&#123;<span class="type">Seconds</span>, <span class="type">StreamingContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SparkStreaming19_DStream_Window5</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"wordcount"</span>)</span><br><span class="line">        <span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="type">StreamingContext</span>(sparkConf, <span class="type">Seconds</span>(<span class="number">3</span>))</span><br><span class="line">        ssc.checkpoint(<span class="string">"scp"</span>)</span><br><span class="line">        <span class="comment">// 滑窗</span></span><br><span class="line">        <span class="keyword">val</span> socketDS: <span class="type">ReceiverInputDStream</span>[<span class="type">String</span>] = ssc.socketTextStream(<span class="string">"localhost"</span>, <span class="number">9999</span>)</span><br><span class="line">        <span class="keyword">val</span> wordToOneDS: <span class="type">DStream</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = socketDS.map(num=&gt;(<span class="string">"a"</span>, <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">val</span> windowDS: <span class="type">DStream</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = wordToOneDS.reduceByKeyAndWindow(</span><br><span class="line">            (x: <span class="type">Int</span>, y: <span class="type">Int</span>) =&gt; &#123;</span><br><span class="line">                <span class="keyword">val</span> sum = x + y</span><br><span class="line">                println( sum + <span class="string">"="</span> + x + <span class="string">"+"</span> + y )</span><br><span class="line">                sum</span><br><span class="line">            &#125;,</span><br><span class="line">            (x:<span class="type">Int</span>, y:<span class="type">Int</span>) =&gt; &#123;</span><br><span class="line">                <span class="keyword">val</span> diff = x - y</span><br><span class="line">                println( diff + <span class="string">"="</span> + x + <span class="string">"-"</span> + y )</span><br><span class="line">                diff</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="type">Seconds</span>(<span class="number">6</span>), <span class="type">Seconds</span>(<span class="number">3</span>)</span><br><span class="line">        )</span><br><span class="line">        windowDS.print()</span><br><span class="line"></span><br><span class="line">        ssc.start()</span><br><span class="line">        ssc.awaitTermination()</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><code>countByWindow(windowLength, slideInterval):</code></p><p>返回一个滑动窗口计数流中的元素个数；</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ysss.bigdata.spark.streaming</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.dstream.&#123;<span class="type">DStream</span>, <span class="type">ReceiverInputDStream</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.&#123;<span class="type">Seconds</span>, <span class="type">StreamingContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SparkStreaming18_DStream_Window4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"wordcount"</span>)</span><br><span class="line">        <span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="type">StreamingContext</span>(sparkConf, <span class="type">Seconds</span>(<span class="number">3</span>))</span><br><span class="line">        ssc.checkpoint(<span class="string">"scp"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 滑窗</span></span><br><span class="line">        <span class="keyword">val</span> socketDS: <span class="type">ReceiverInputDStream</span>[<span class="type">String</span>] = ssc.socketTextStream(<span class="string">"localhost"</span>, <span class="number">9999</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对窗口的数据进行计数，会使用checkpoint进行保存</span></span><br><span class="line">        <span class="keyword">val</span> countDS: <span class="type">DStream</span>[<span class="type">Long</span>] = socketDS.countByWindow(<span class="type">Seconds</span>(<span class="number">6</span>), <span class="type">Seconds</span>(<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">        countDS.print()</span><br><span class="line"></span><br><span class="line">        ssc.start()</span><br><span class="line">        ssc.awaitTermination()</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="DStream输出"><a href="#DStream输出" class="headerlink" title="DStream输出"></a>DStream输出</h1><p>输出操作指定了对流数据经转化操作得到的数据所要执行的操作(例如把结果推入外部数据库或输出到屏幕上)。与RDD中的惰性求值类似，如果一个DStream及其派生出的DStream都没有被执行输出操作，那么这些DStream就都不会被求值。如果StreamingContext中没有设定输出操作，整个context就都不会启动。</p><p>输出操作如下：</p><ul><li><p>print()：在运行流程序的驱动结点上打印DStream中每一批次数据的最开始10个元素。这用于开发和调试。在Python API中，同样的操作叫print()。</p></li><li><p>saveAsTextFiles(prefix, [suffix])：以text文件形式存储这个DStream的内容。每一批次的存储文件名基于参数中的prefix和suffix。”prefix-Time_IN_MS[.suffix]”。</p></li><li><p>saveAsObjectFiles(prefix, [suffix])：以Java对象序列化的方式将Stream中的数据保存为 SequenceFiles . 每一批次的存储文件名基于参数中的为”prefix-TIME_IN_MS[.suffix]”. Python中目前不可用。</p></li><li><p>saveAsHadoopFiles(prefix, [suffix])：将Stream中的数据保存为 Hadoop files. 每一批次的存储文件名基于参数中的为”prefix-TIME_IN_MS[.suffix]”。Python API 中目前不可用。</p></li><li><p><strong>foreachRDD(func)：这是最通用的输出操作，即将函数 func 用于产生于 stream的每一个RDD。其中参数传入的函数func应该实现将每一个RDD中数据推送到外部系统，如将RDD存入文件或者通过网络将其写入数据库。</strong></p></li></ul><p>通用的输出操作foreachRDD()，它用来对DStream中的RDD运行任意计算。这和transform() 有些类似，都可以让我们访问任意RDD。<strong>在foreachRDD()中，可以重用我们在Spark中实现的所有行动操作。</strong>比如，常见的用例之一是把数据写到诸如MySQL的外部数据库中。 </p><blockquote><p>注意：</p><p>1) 连接不能写在driver层面（序列化）</p><p>2) 如果写在foreach则每个RDD中的每一条数据都创建，得不偿失；</p><p>3) 增加foreachPartition，在分区创建（获取）。</p></blockquote><p>方法一：性能低，每个RDD要连接一次</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ysss.bigdata.spark.streaming</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.&#123;<span class="type">DriverManager</span>, <span class="type">PreparedStatement</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.dstream.&#123;<span class="type">DStream</span>, <span class="type">ReceiverInputDStream</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.&#123;<span class="type">Seconds</span>, <span class="type">StreamingContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SparkStreaming20_DStream_Output</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"wordcount"</span>)</span><br><span class="line">        <span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="type">StreamingContext</span>(sparkConf, <span class="type">Seconds</span>(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> socketDS = ssc.socketTextStream(<span class="string">"localhost"</span>, <span class="number">9999</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将数据保存到MySQL数据库中</span></span><br><span class="line">        <span class="comment">// id, name, age</span></span><br><span class="line">        socketDS.foreachRDD(rdd=&gt;&#123;</span><br><span class="line">            rdd.foreach(data=&gt;&#123;</span><br><span class="line">                <span class="comment">// 解决性能问题</span></span><br><span class="line">                <span class="keyword">val</span> datas = data.split(<span class="string">","</span>)</span><br><span class="line">                <span class="keyword">val</span> id = datas(<span class="number">0</span>).toInt</span><br><span class="line">                <span class="keyword">val</span> name = datas(<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">val</span> age = datas(<span class="number">2</span>).toInt</span><br><span class="line"></span><br><span class="line">                <span class="comment">// TODO 加载数据库驱动</span></span><br><span class="line">                <span class="type">Class</span>.forName(<span class="string">"com.mysql.jdbc.Driver"</span>)</span><br><span class="line">                <span class="comment">// TODO 建立链接和操作对象</span></span><br><span class="line">                <span class="keyword">val</span> conn =</span><br><span class="line">                    <span class="type">DriverManager</span>.getConnection(</span><br><span class="line">                        <span class="string">"jdbc:mysql://linux1:3306/rdd"</span>,</span><br><span class="line">                        <span class="string">"root"</span>,<span class="string">"000000"</span>)</span><br><span class="line">                <span class="keyword">val</span> sql = <span class="string">"insert into user (id ,name, age) values (?, ?, ?)"</span></span><br><span class="line">                <span class="keyword">val</span> statement: <span class="type">PreparedStatement</span> = conn.prepareStatement(sql)</span><br><span class="line">                statement.setInt(<span class="number">1</span>, id)</span><br><span class="line">                statement.setString(<span class="number">2</span>, name)</span><br><span class="line">                statement.setInt(<span class="number">3</span>, age)</span><br><span class="line">                <span class="comment">// TODO 操作数据</span></span><br><span class="line">                statement.executeUpdate()</span><br><span class="line">                <span class="comment">// TODO 关闭连接</span></span><br><span class="line">                statement.close()</span><br><span class="line">                conn.close()</span><br><span class="line">                println(<span class="string">"数据保存成功！！！"</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        ssc.start()</span><br><span class="line">        ssc.awaitTermination()</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>方法二：把连接放到foreachRDD外面，但是根本执行不了，因为所有的连接对象都不支持序列化操作</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ysss.bigdata.spark.streaming</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.&#123;<span class="type">DriverManager</span>, <span class="type">PreparedStatement</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.&#123;<span class="type">Seconds</span>, <span class="type">StreamingContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SparkStreaming21_DStream_Output1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"wordcount"</span>)</span><br><span class="line">        <span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="type">StreamingContext</span>(sparkConf, <span class="type">Seconds</span>(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> socketDS = ssc.socketTextStream(<span class="string">"localhost"</span>, <span class="number">9999</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将数据保存到MySQL数据库中</span></span><br><span class="line">        <span class="comment">// id, name, age</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// TODO 加载数据库驱动</span></span><br><span class="line">        <span class="type">Class</span>.forName(<span class="string">"com.mysql.jdbc.Driver"</span>)</span><br><span class="line">        <span class="comment">// TODO 建立链接和操作对象</span></span><br><span class="line">        <span class="comment">// TODO 所有的连接对象都不支持序列化操作</span></span><br><span class="line">        <span class="keyword">val</span> conn =</span><br><span class="line">            <span class="type">DriverManager</span>.getConnection(</span><br><span class="line">                <span class="string">"jdbc:mysql://linux1:3306/rdd"</span>,</span><br><span class="line">                <span class="string">"root"</span>,<span class="string">"000000"</span>)</span><br><span class="line">        <span class="keyword">val</span> sql = <span class="string">"insert into user (id ,name, age) values (?, ?, ?)"</span></span><br><span class="line">        <span class="keyword">val</span> statement: <span class="type">PreparedStatement</span> = conn.prepareStatement(sql)</span><br><span class="line"></span><br><span class="line">        socketDS.foreachRDD(rdd=&gt;&#123;</span><br><span class="line">            <span class="comment">// TODO RDD的方法称之为算子，存在分布式计算，需要进行闭包检测</span></span><br><span class="line">            rdd.foreach(data=&gt;&#123;</span><br><span class="line">                <span class="comment">// 解决性能问题</span></span><br><span class="line">                <span class="keyword">val</span> datas = data.split(<span class="string">","</span>)</span><br><span class="line">                <span class="keyword">val</span> id = datas(<span class="number">0</span>).toInt</span><br><span class="line">                <span class="keyword">val</span> name = datas(<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">val</span> age = datas(<span class="number">2</span>).toInt</span><br><span class="line"></span><br><span class="line">                statement.setInt(<span class="number">1</span>, id)</span><br><span class="line">                statement.setString(<span class="number">2</span>, name)</span><br><span class="line">                statement.setInt(<span class="number">3</span>, age)</span><br><span class="line">                <span class="comment">// TODO 操作数据</span></span><br><span class="line">                <span class="comment">//statement.addBatch()</span></span><br><span class="line">                <span class="comment">//statement.executeBatch()</span></span><br><span class="line">                statement.executeUpdate()</span><br><span class="line"></span><br><span class="line">                println(<span class="string">"数据保存成功！！！"</span>)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// SparkException : Task not serializable</span></span><br><span class="line">        <span class="comment">// TODO 关闭连接</span></span><br><span class="line">        statement.close()</span><br><span class="line">        conn.close()</span><br><span class="line"></span><br><span class="line">        ssc.start()</span><br><span class="line">        ssc.awaitTermination()</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>方法三：<code>rdd.foreachPartition</code>,以分区为单位进行遍历</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ysss.bigdata.spark.streaming</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.&#123;<span class="type">DriverManager</span>, <span class="type">PreparedStatement</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.&#123;<span class="type">Seconds</span>, <span class="type">StreamingContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SparkStreaming22_DStream_Output2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"wordcount"</span>)</span><br><span class="line">        <span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="type">StreamingContext</span>(sparkConf, <span class="type">Seconds</span>(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> socketDS = ssc.socketTextStream(<span class="string">"localhost"</span>, <span class="number">9999</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将数据保存到MySQL数据库中</span></span><br><span class="line">        <span class="comment">// id, name, age</span></span><br><span class="line"></span><br><span class="line">        socketDS.foreachRDD(rdd=&gt;&#123;</span><br><span class="line">            <span class="comment">//【注意】mapPartitions和foreachPartition的区别：</span></span><br><span class="line">            <span class="comment">// 以分区为单位进行转换 =&gt; 返回</span></span><br><span class="line">            <span class="comment">//rdd.mapPartitions()</span></span><br><span class="line">            <span class="comment">// 以分区为单位进行遍历 =&gt; 不需要返回</span></span><br><span class="line">            rdd.foreachPartition(</span><br><span class="line">                datas =&gt; &#123;</span><br><span class="line">                    <span class="comment">// TODO 加载数据库驱动</span></span><br><span class="line">                    <span class="type">Class</span>.forName(<span class="string">"com.mysql.jdbc.Driver"</span>)</span><br><span class="line">                    <span class="comment">// TODO 建立链接和操作对象</span></span><br><span class="line">                    <span class="comment">// TODO 所有的连接对象都不支持序列化操作</span></span><br><span class="line">                    <span class="keyword">val</span> conn =</span><br><span class="line">                    <span class="type">DriverManager</span>.getConnection(</span><br><span class="line">                        <span class="string">"jdbc:mysql://linux1:3306/rdd"</span>,</span><br><span class="line">                        <span class="string">"root"</span>,<span class="string">"000000"</span>)</span><br><span class="line">                    <span class="keyword">val</span> sql = <span class="string">"insert into user (id ,name, age) values (?, ?, ?)"</span></span><br><span class="line">                    <span class="keyword">val</span> statement: <span class="type">PreparedStatement</span> = conn.prepareStatement(sql)</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// datas 其实是scala的集合，所以不存在分布式计算的概念</span></span><br><span class="line">                    datas.foreach(</span><br><span class="line">                        data =&gt; &#123;</span><br><span class="line">                            <span class="comment">// 解决性能问题</span></span><br><span class="line">                            <span class="keyword">val</span> datas = data.split(<span class="string">","</span>)</span><br><span class="line">                            <span class="keyword">val</span> id = datas(<span class="number">0</span>).toInt</span><br><span class="line">                            <span class="keyword">val</span> name = datas(<span class="number">1</span>)</span><br><span class="line">                            <span class="keyword">val</span> age = datas(<span class="number">2</span>).toInt</span><br><span class="line"></span><br><span class="line">                            statement.setInt(<span class="number">1</span>, id)</span><br><span class="line">                            statement.setString(<span class="number">2</span>, name)</span><br><span class="line">                            statement.setInt(<span class="number">3</span>, age)</span><br><span class="line">                            <span class="comment">// TODO 操作数据</span></span><br><span class="line">                            <span class="comment">//statement.addBatch()</span></span><br><span class="line">                            <span class="comment">//statement.executeBatch()</span></span><br><span class="line">                            statement.executeUpdate()</span><br><span class="line"></span><br><span class="line">                            println(<span class="string">"数据保存成功！！！"</span>)</span><br><span class="line">                        &#125;</span><br><span class="line">                    )</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// TODO 关闭连接</span></span><br><span class="line">                    statement.close()</span><br><span class="line">                    conn.close()</span><br><span class="line">                &#125;</span><br><span class="line">            )</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ssc.start()</span><br><span class="line">        ssc.awaitTermination()</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="优雅关闭"><a href="#优雅关闭" class="headerlink" title="优雅关闭"></a>优雅关闭</h1><p>流式任务需要7*24小时执行，但是有时涉及到升级代码需要主动停止程序，但是分布式程序，没办法做到一个个进程去杀死，所有配置优雅的关闭就显得至关重要了。</p><p>使用外部文件系统来控制内部程序关闭。</p><p>把<code>spark.streaming.stopGracefullyOnShutdown</code>参数设置成ture,Spark会在JVM关闭时正常关闭StreamingContext,而不是立马关闭</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sparkConf.set(<span class="string">"spark.streaming.stopGracefullyOnShutdown"</span>, <span class="string">"true"</span>)</span><br></pre></td></tr></table></figure></div><p>案例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ysss.bigdata.spark.streaming</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.&#123;<span class="type">DriverManager</span>, <span class="type">PreparedStatement</span>, <span class="type">ResultSet</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.dstream.&#123;<span class="type">DStream</span>, <span class="type">ReceiverInputDStream</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.&#123;<span class="type">Seconds</span>, <span class="type">StreamingContext</span>, <span class="type">StreamingContextState</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SparkStreaming23_Stop</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">"local[*]"</span>).setAppName(<span class="string">"wordcount"</span>)</span><br><span class="line">        <span class="comment">// TODO 配置优雅地关闭</span></span><br><span class="line">        sparkConf.set(<span class="string">"spark.streaming.stopGracefullyOnShutdown"</span>, <span class="string">"true"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="type">StreamingContext</span>(sparkConf, <span class="type">Seconds</span>(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> socketDS: <span class="type">ReceiverInputDStream</span>[<span class="type">String</span>] = ssc.socketTextStream(<span class="string">"localhost"</span>, <span class="number">9999</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> wordDS: <span class="type">DStream</span>[<span class="type">String</span>] = socketDS.flatMap(_.split(<span class="string">" "</span>))</span><br><span class="line">        <span class="keyword">val</span> wordToOneDS: <span class="type">DStream</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = wordDS.map( (_, <span class="number">1</span>) )</span><br><span class="line">        <span class="keyword">val</span> wordToCountDS: <span class="type">DStream</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = wordToOneDS.reduceByKey(_+_)</span><br><span class="line"></span><br><span class="line">        wordToCountDS.print()</span><br><span class="line"></span><br><span class="line">        ssc.start()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="type">Thread</span>(</span><br><span class="line">            <span class="keyword">new</span> <span class="type">Runnable</span> &#123;</span><br><span class="line">                <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">run</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">                    <span class="comment">// TODO SparkStreaming是可以停止。但是停止的逻辑代码的位置？</span></span><br><span class="line">                    <span class="comment">// TODO stop方法不能放置在driver的主线程中。</span></span><br><span class="line">                    <span class="comment">// TODO 直接调用ssc的stop方法是不可以的。需要循环判断sparkStreaming是否应该关闭</span></span><br><span class="line">                    <span class="keyword">while</span> ( <span class="literal">true</span> ) &#123;</span><br><span class="line">                        <span class="comment">// TODO 在Driver端应该设置标记，让当前关闭线程可以访问。可以动态改变状态。</span></span><br><span class="line">                        <span class="comment">// TODO 但是Driver端的标记何时更新，由谁更新都是不确定的。</span></span><br><span class="line">                        <span class="comment">// TODO 所以一般标记不是放置在Driver端，而是在第三方软件中：redis,zk,mysql,hdfs</span></span><br><span class="line"></span><br><span class="line">                        <span class="type">Class</span>.forName(<span class="string">"com.mysql.jdbc.Driver"</span>)</span><br><span class="line">                        <span class="comment">// TODO 建立链接和操作对象</span></span><br><span class="line">                        <span class="comment">// TODO 所有的连接对象都不支持序列化操作</span></span><br><span class="line">                        <span class="keyword">val</span> conn =</span><br><span class="line">                        <span class="type">DriverManager</span>.getConnection(</span><br><span class="line">                            <span class="string">"jdbc:mysql://linux1:3306/rdd"</span>,</span><br><span class="line">                            <span class="string">"root"</span>,<span class="string">"000000"</span>)</span><br><span class="line">                        <span class="keyword">val</span> sql = <span class="string">"select age from user where id = 1"</span></span><br><span class="line">                        <span class="keyword">val</span> statement: <span class="type">PreparedStatement</span> = conn.prepareStatement(sql)</span><br><span class="line">                        <span class="keyword">val</span> rs: <span class="type">ResultSet</span> = statement.executeQuery()</span><br><span class="line">                        rs.next()</span><br><span class="line">                        <span class="keyword">val</span> age: <span class="type">Int</span> = rs.getInt(<span class="number">1</span>)</span><br><span class="line">                        <span class="keyword">if</span> ( age &lt;= <span class="number">20</span> ) &#123;</span><br><span class="line"></span><br><span class="line">                            <span class="comment">// TODO 判断SSC的状态</span></span><br><span class="line">                            <span class="keyword">val</span> state: <span class="type">StreamingContextState</span> = ssc.getState()</span><br><span class="line">                            <span class="keyword">if</span> ( state == <span class="type">StreamingContextState</span>.<span class="type">ACTIVE</span> ) &#123;</span><br><span class="line">                                println(<span class="string">"SparkStreaming的环境准备关闭..."</span>)</span><br><span class="line">                                <span class="comment">// TODO 优雅地关闭SSC</span></span><br><span class="line">                                <span class="comment">// 将现有的数据处理完再关闭就是优雅地关闭</span></span><br><span class="line">                                ssc.stop(<span class="literal">true</span>, <span class="literal">true</span>)</span><br><span class="line">                                <span class="type">System</span>.exit(<span class="number">0</span>)</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="type">Thread</span>.sleep(<span class="number">1000</span> * <span class="number">5</span>)</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ).start()</span><br><span class="line"></span><br><span class="line">        ssc.awaitTermination()</span><br><span class="line">        <span class="comment">// TODO Thread 线程停止的方式？run方法执行完毕</span></span><br><span class="line">        <span class="comment">// 为什么不调用stop方法停止线程？因为会出现数据安全问题</span></span><br><span class="line">        <span class="comment">// i++ =&gt; 1), 2)</span></span><br><span class="line">        <span class="comment">// new Thread().stop()</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SparkStreaming概述&quot;&gt;&lt;a href=&quot;#SparkStreaming概述&quot; class=&quot;headerlink&quot; title=&quot;SparkStreaming概述&quot;&gt;&lt;/a&gt;SparkStreaming概述&lt;/h1&gt;&lt;h2 id=&quot;Spark-Str
      
    
    </summary>
    
    
      <category term="大数据" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="spark" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/spark/"/>
    
    
      <category term="教程" scheme="https://masteryang4.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="大数据" scheme="https://masteryang4.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="spark" scheme="https://masteryang4.github.io/tags/spark/"/>
    
      <category term="spark-streaming" scheme="https://masteryang4.github.io/tags/spark-streaming/"/>
    
      <category term="实时大数据" scheme="https://masteryang4.github.io/tags/%E5%AE%9E%E6%97%B6%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>redis为什么那么快</title>
    <link href="https://masteryang4.github.io/2020/06/16/redis%E4%B8%BA%E4%BB%80%E4%B9%88%E9%82%A3%E4%B9%88%E5%BF%AB/"/>
    <id>https://masteryang4.github.io/2020/06/16/redis%E4%B8%BA%E4%BB%80%E4%B9%88%E9%82%A3%E4%B9%88%E5%BF%AB/</id>
    <published>2020-06-16T15:55:38.000Z</published>
    <updated>2020-06-16T15:57:31.422Z</updated>
    
    <content type="html"><![CDATA[<h1 id="redis是单线程的，为什么那么快"><a href="#redis是单线程的，为什么那么快" class="headerlink" title="redis是单线程的，为什么那么快"></a>redis是单线程的，为什么那么快</h1><ul><li><p>完全基于内存，绝大部分请求是纯粹的内存操作，非常快速。</p></li><li><p>数据结构简单，对数据操作也简单，Redis中的数据结构是专门进行设计的</p></li><li><p>采用单线程，避免了不必要的上下文切换和竞争条件，也不存在多进程或者多线程导致的切换而消耗 CPU，不用去考虑各种锁的问题，不存在加锁释放锁操作，没有因为可能出现死锁而导致的性能消耗</p></li><li><p>使用多路I/O复用模型，非阻塞IO</p></li><li><p>使用底层模型不同，它们之间底层实现方式以及与客户端之间通信的应用协议不一样，Redis直接自己构建了VM 机制 ，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请求</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;redis是单线程的，为什么那么快&quot;&gt;&lt;a href=&quot;#redis是单线程的，为什么那么快&quot; class=&quot;headerlink&quot; title=&quot;redis是单线程的，为什么那么快&quot;&gt;&lt;/a&gt;redis是单线程的，为什么那么快&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;完
      
    
    </summary>
    
    
      <category term="大数据" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="Redis" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/Redis/"/>
    
    
      <category term="大数据" scheme="https://masteryang4.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="数据库" scheme="https://masteryang4.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="缓存" scheme="https://masteryang4.github.io/tags/%E7%BC%93%E5%AD%98/"/>
    
      <category term="JavaWeb" scheme="https://masteryang4.github.io/tags/JavaWeb/"/>
    
  </entry>
  
  <entry>
    <title>Spark的WordCount到底有几个RDD</title>
    <link href="https://masteryang4.github.io/2020/06/16/Spark%E7%9A%84WordCount%E5%88%B0%E5%BA%95%E6%9C%89%E5%87%A0%E4%B8%AARDD/"/>
    <id>https://masteryang4.github.io/2020/06/16/Spark%E7%9A%84WordCount%E5%88%B0%E5%BA%95%E6%9C%89%E5%87%A0%E4%B8%AARDD/</id>
    <published>2020-06-16T05:54:59.000Z</published>
    <updated>2020-06-16T05:57:32.010Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote><p>本文转载自  <a href="https://blog.csdn.net/zhongqi2513/article/details/81513587" target="_blank" rel="noopener">https://blog.csdn.net/zhongqi2513/article/details/81513587</a> </p></blockquote><p>这样的一句标准的sparkcore的wordcount的代码到底能要产生几个RDD呢。相信大家对于一个标准的WordCount的代码一定不陌生：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sc.textFile(<span class="string">"hdfs://myha01/wc/input/words.txt"</span>)</span><br><span class="line">  .flatMap(_.split(<span class="string">" "</span>))</span><br><span class="line">  .map((_,<span class="number">1</span>))</span><br><span class="line">  .reduceByKey(_+_)</span><br><span class="line">  .saveAsTextFile(<span class="string">"hdfs://myha01/wc/output/"</span>)</span><br></pre></td></tr></table></figure></div><p>这局代码：</p><p>1、开始使用了一个textFile用来读取数据的方法</p><p>2、中间使用了三个标准的RDD的操作算子：</p><p><code>flatMap(_.split(&quot; &quot;))</code> 负责把由每一行组成的RDD按照空格切开压平成标准的由单词组成的RDD</p><p><code>map((_,1))</code>负责把每个单词word变成（word,1）每个单词出现一次</p><p><code>reduceByKey(_+_)</code>负责把按照key相同也就是单词相同的key-value划分成一组，然后每一组做count聚合，最终就得出了输入文件中，每个单词出现了多少次。</p><p>3、最后，使用了一个<code>saveAsTextFile</code>的方法来存储数据</p><p>那到底这句代码中执行过程中，是不是刚好每个算子生成一个RDD呢？ 很不幸，不是的。如果需要知晓答案，最好的方式，就是翻阅参与运算的每个算子到底做了什么事情。</p><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>接下来是详细分析：</p><p>1、首先看sc.textFile(“hdfs://myha01/wc/input/words.txt”)：textFile方法在SparkContext类中</p><p><a href="https://img-blog.csdn.net/2018080818524234?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pob25ncWkyNTEz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img-blog.csdn.net/2018080818524234?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pob25ncWkyNTEz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" class="lazyload"></a></p><p>接着看textFile中的hadoopFile方法的实现：</p><p><a href="https://img-blog.csdn.net/20180808185447476?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pob25ncWkyNTEz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img-blog.csdn.net/20180808185447476?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pob25ncWkyNTEz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" class="lazyload"></a></p><p>通过这个代码可以得知，在hadoopFile的内部产生了<strong>第一个RDD：HadoopRDD</strong></p><p>接着回到textFile方法：</p><p><a href="https://img-blog.csdn.net/20180808185553702?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pob25ncWkyNTEz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img-blog.csdn.net/20180808185553702?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pob25ncWkyNTEz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" class="lazyload"></a></p><p>发现，其实返回的HadoopRDD又调用了map算子，看map算子的实现：</p><p><a href="https://img-blog.csdn.net/20180808185644932?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pob25ncWkyNTEz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img-blog.csdn.net/20180808185644932?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pob25ncWkyNTEz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" class="lazyload"></a></p><p>map算子的内部实现中，又创建了一个RDD，这就是<strong>第二个RDD： MapPartitionsRDD</strong></p><p>那也就是说，textFile算子的最终返回值就是第二个RDD：MapPartitionsRDD</p><p>接着看：flatMap(_.split(“ “))算子的操作实现：flatMap算子在RDD中</p><p><a href="https://img-blog.csdn.net/20180808190412683?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pob25ncWkyNTEz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img-blog.csdn.net/20180808190412683?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pob25ncWkyNTEz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" class="lazyload"></a></p><p>所以flatMap(_.split(“ “))算子操作产生了<strong>第三个RDD：MapPartitionsRDD</strong></p><p>接着看map((_,1))算子操作：map算子在RDD类中</p><p><a href="https://img-blog.csdn.net/20180808190610353?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pob25ncWkyNTEz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img-blog.csdn.net/20180808190610353?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pob25ncWkyNTEz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" class="lazyload"></a></p><p>map((_,1))算子的具体实现依然是简单的new MapPartitionRDD的方式生成<strong>第四个RDD：MapPartitionsRDD</strong></p><p>接着看：reduceByKey(<em>+</em>)算子的具体实现：reduceByKey在PairRDDFunctions类中</p><p><a href="https://img-blog.csdn.net/20180808191032475?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pob25ncWkyNTEz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img-blog.csdn.net/20180808191032475?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pob25ncWkyNTEz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" class="lazyload"></a></p><p>跳到：</p><p><a href="https://img-blog.csdn.net/20180808191055291?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pob25ncWkyNTEz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img-blog.csdn.net/20180808191055291?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pob25ncWkyNTEz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" class="lazyload"></a></p><p>跳到：</p><p><a href="https://img-blog.csdn.net/20180808191139772?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pob25ncWkyNTEz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img-blog.csdn.net/20180808191139772?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pob25ncWkyNTEz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" class="lazyload"></a></p><p>到这个地方说明：reduceByKey算子的返回值其实是创建了<strong>第五个RDD：ShuffledRDD</strong></p><p>接着看：saveAsTextFile(“hdfs://myha01/wc/output/“)算子的具体实现：saveAsTextFile算子在RDD类中</p><p><a href="https://img-blog.csdn.net/20180808191410601?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pob25ncWkyNTEz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img-blog.csdn.net/20180808191410601?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pob25ncWkyNTEz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" class="lazyload"></a></p><p>this.mapPartitions这句代码在调用的时候，在mapPartitions的内部，其实又创建了<strong>第六个RDD：MapPartitionRDD</strong></p><p><a href="https://img-blog.csdn.net/20180808191542404?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pob25ncWkyNTEz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img-blog.csdn.net/20180808191542404?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pob25ncWkyNTEz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" class="lazyload"></a></p><p>接着回到：saveAsTextFile方法的实现，其实返现，最后一句话在调用中，也会生成一个RDD</p><p>这就是<strong>第七个RDD：MapPartitionRDD</strong></p><p><a href="https://img-blog.csdn.net/20180808192008596?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pob25ncWkyNTEz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img-blog.csdn.net/20180808192008596?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pob25ncWkyNTEz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" class="lazyload"></a></p><p>到底为止，其他的地方，是没有再产生RDD的。</p><p>所以按照刚才的分析得出的最终结论是：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">第一个RDD：HadoopRDD</span><br><span class="line">第二个RDD：MapPartitionsRDD</span><br><span class="line">第三个RDD：MapPartitionsRDD</span><br><span class="line">第四个RDD：MapPartitionsRDD</span><br><span class="line">第五个RDD：ShuffledRDD</span><br><span class="line">第六个RDD：MapPartitionRDD</span><br><span class="line">第七个RDD：MapPartitionRDD</span><br></pre></td></tr></table></figure></div><p>其实，在执行saveAsTextFile之前，我们可以通过RDD提供的toDebugString看到这些个算子在调用的时候到底产生了多少个RDD:</p><p><a href="https://img-blog.csdn.net/2018080819285544?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pob25ncWkyNTEz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" data-fancybox="group" data-caption class="fancybox"><img alt title data-src="https://img-blog.csdn.net/2018080819285544?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pob25ncWkyNTEz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" class="lazyload"></a></p><p>望各位仁兄牢记。如果不记得，请翻阅源码。本篇文章是基于最新的Spark-2.3.1的版本</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>7个RDD，2+1+1+1+2</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sc.textFile(<span class="string">"hdfs://myha01/wc/input/words.txt"</span>)</span><br><span class="line">  .flatMap(_.split(<span class="string">" "</span>))</span><br><span class="line">  .map((_,<span class="number">1</span>))</span><br><span class="line">  .reduceByKey(_+_)</span><br><span class="line">  .saveAsTextFile(<span class="string">"hdfs://myha01/wc/output/"</span>)</span><br></pre></td></tr></table></figure></div><table><thead><tr><th>算子</th><th>产生的RDD</th></tr></thead><tbody><tr><td><code>sc.textFile(&quot;hdfs://myha01/wc/input/words.txt&quot;)</code></td><td>第一个RDD：HadoopRDD<br>第二个RDD：MapPartitionsRDD</td></tr><tr><td><code>.flatMap(_.split(&quot; &quot;))</code></td><td>第三个RDD：MapPartitionsRDD</td></tr><tr><td><code>.map((_,1))</code></td><td>第四个RDD：MapPartitionsRDD</td></tr><tr><td><code>.reduceByKey(_+_)</code></td><td>第五个RDD：ShuffledRDD</td></tr><tr><td><code>.saveAsTextFile(&quot;hdfs://myha01/wc/output/&quot;)</code></td><td>第六个RDD：MapPartitionRDD<br>第七个RDD：MapPartitionRDD</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;本文转载自  &lt;a href=&quot;https://blog.csdn.net/zhongqi2513/article
      
    
    </summary>
    
    
      <category term="大数据" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="spark" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/spark/"/>
    
    
      <category term="易错点" scheme="https://masteryang4.github.io/tags/%E6%98%93%E9%94%99%E7%82%B9/"/>
    
      <category term="大数据" scheme="https://masteryang4.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="面试" scheme="https://masteryang4.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="spark" scheme="https://masteryang4.github.io/tags/spark/"/>
    
      <category term="spark-core" scheme="https://masteryang4.github.io/tags/spark-core/"/>
    
  </entry>
  
  <entry>
    <title>常用排序算法总结</title>
    <link href="https://masteryang4.github.io/2020/06/15/%E5%B8%B8%E7%94%A8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>https://masteryang4.github.io/2020/06/15/%E5%B8%B8%E7%94%A8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</id>
    <published>2020-06-15T09:31:13.000Z</published>
    <updated>2020-06-15T09:35:34.260Z</updated>
    
    <content type="html"><![CDATA[<h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 冒泡排序 时间复杂度 O(n^2) 空间复杂度O(1)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BubbleSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] data)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">"开始排序"</span>);</span><br><span class="line">      <span class="keyword">int</span> arrayLength = data.length;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrayLength - <span class="number">1</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arrayLength - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(data[j] &gt; data[j + <span class="number">1</span>])&#123;</span><br><span class="line">               <span class="keyword">int</span> temp = data[j + <span class="number">1</span>];</span><br><span class="line">               data[j + <span class="number">1</span>] = data[j];</span><br><span class="line">               data[j] = temp;</span><br><span class="line">               flag = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         System.out.println(java.util.Arrays.toString(data));</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (!flag)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span>[] data = &#123; <span class="number">9</span>, -<span class="number">16</span>, <span class="number">21</span>, <span class="number">23</span>, -<span class="number">30</span>, -<span class="number">49</span>, <span class="number">21</span>, <span class="number">30</span>, <span class="number">30</span> &#125;;</span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">"排序之前：\n"</span> + java.util.Arrays.toString(data));</span><br><span class="line"></span><br><span class="line">      bubbleSort(data);</span><br><span class="line"></span><br><span class="line">      System.out.println(<span class="string">"排序之后：\n"</span> + java.util.Arrays.toString(data));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ys.shuzu;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 标准快排</span></span><br><span class="line"><span class="comment"> * 【注意】</span></span><br><span class="line"><span class="comment"> * 最左边为基准数（flag）的时候，从右开始往前遍历。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Kuaisupaixu</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quicksort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left &gt; right) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> flag = arr[left];</span><br><span class="line">        <span class="keyword">int</span> l = left;</span><br><span class="line">        <span class="keyword">int</span> r = right;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (l != r) &#123;</span><br><span class="line">            <span class="keyword">while</span> (arr[r] &gt;= flag &amp;&amp; l &lt; r) &#123; <span class="comment">//【重点】</span></span><br><span class="line">                r -= <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (arr[l] &lt;= flag &amp;&amp; l &lt; r) &#123;</span><br><span class="line">                l += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = arr[r];</span><br><span class="line">            arr[r] = arr[l];</span><br><span class="line">            arr[l] = temp;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        arr[left] = arr[l];</span><br><span class="line">        arr[l] = flag;</span><br><span class="line"></span><br><span class="line">        quicksort(arr, left, l - <span class="number">1</span>);</span><br><span class="line">        quicksort(arr, l + <span class="number">1</span>, right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] a = &#123;<span class="number">9</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        quicksort(a, <span class="number">0</span>, a.length - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : a) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 快排</span></span><br><span class="line"><span class="comment"> * 时间复杂度:平均时间复杂度为O(nlogn)</span></span><br><span class="line"><span class="comment"> * 空间复杂度:O(logn)，因为递归栈空间的使用问题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quickSort</span></span>(list: <span class="type">List</span>[<span class="type">Int</span>]): <span class="type">List</span>[<span class="type">Int</span>] = list <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Nil</span> =&gt; <span class="type">Nil</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">List</span>() =&gt; <span class="type">List</span>()</span><br><span class="line">    <span class="keyword">case</span> head :: tail =&gt;</span><br><span class="line">      <span class="keyword">val</span> (left, right) = tail.partition(_ &lt; head)</span><br><span class="line">      quickSort(left) ::: head :: quickSort(right)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div><h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><p>核心思想：不断的将大的数组分成两个小数组，直到不能拆分为止，即形成了单个值。此时使用合并的排序思想对已经有序的数组进行合并，合并为一个大的数据，不断重复此过程，直到最终所有数据合并到一个数组为止。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ys.shuzu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 【归并排序】</span></span><br><span class="line"><span class="comment"> * 时间复杂度nlogn（平均，最好，最坏都是这个值）</span></span><br><span class="line"><span class="comment"> * 空间复杂度n（用空间换时间，时间上和快排差不多）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> arr[] = &#123;<span class="number">8</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">2</span>&#125;; <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> temp[] = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length]; <span class="comment">//归并排序需要一个额外空间</span></span><br><span class="line">        mergeSort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>, temp);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"归并排序后="</span> + Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分+合方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span>[] temp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>; <span class="comment">//中间索引</span></span><br><span class="line">            <span class="comment">//向左递归进行分解</span></span><br><span class="line">            mergeSort(arr, left, mid, temp);</span><br><span class="line">            <span class="comment">//向右递归进行分解</span></span><br><span class="line">            mergeSort(arr, mid + <span class="number">1</span>, right, temp);</span><br><span class="line">            <span class="comment">//合并</span></span><br><span class="line">            merge(arr, left, mid, right, temp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//合并的方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr   排序的原始数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> left  左边有序序列的初始索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mid   中间索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> right 右边索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> temp  做中转的数组</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> mid, <span class="keyword">int</span> right, <span class="keyword">int</span>[] temp)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i = left; <span class="comment">// 初始化i, 左边有序序列的初始索引</span></span><br><span class="line">        <span class="keyword">int</span> j = mid + <span class="number">1</span>; <span class="comment">//初始化j, 右边有序序列的初始索引</span></span><br><span class="line">        <span class="keyword">int</span> t = <span class="number">0</span>; <span class="comment">// 指向temp数组的当前索引</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//(一)</span></span><br><span class="line">        <span class="comment">//先把左右两边(有序)的数据按照规则填充到temp数组</span></span><br><span class="line">        <span class="comment">//直到左右两边的有序序列，有一边处理完毕为止</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= right) &#123;<span class="comment">//继续</span></span><br><span class="line">            <span class="comment">//如果左边的有序序列的当前元素，小于等于右边有序序列的当前元素</span></span><br><span class="line">            <span class="comment">//即将左边的当前元素，填充到 temp数组</span></span><br><span class="line">            <span class="comment">//然后 t++, i++</span></span><br><span class="line">            <span class="keyword">if</span> (arr[i] &lt;= arr[j]) &#123;</span><br><span class="line">                temp[t] = arr[i];</span><br><span class="line">                t += <span class="number">1</span>;</span><br><span class="line">                i += <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">//反之,将右边有序序列的当前元素，填充到temp数组</span></span><br><span class="line">                temp[t] = arr[j];</span><br><span class="line">                t += <span class="number">1</span>;</span><br><span class="line">                j += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//(二)</span></span><br><span class="line">        <span class="comment">//把有剩余数据的一边的数据依次全部填充到temp</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt;= mid) &#123; <span class="comment">//左边的有序序列还有剩余的元素，就全部填充到temp</span></span><br><span class="line">            temp[t] = arr[i];</span><br><span class="line">            t += <span class="number">1</span>;</span><br><span class="line">            i += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (j &lt;= right) &#123; <span class="comment">//右边的有序序列还有剩余的元素，就全部填充到temp</span></span><br><span class="line">            temp[t] = arr[j];</span><br><span class="line">            t += <span class="number">1</span>;</span><br><span class="line">            j += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//(三)</span></span><br><span class="line">        <span class="comment">//将temp数组的元素拷贝到arr</span></span><br><span class="line">        <span class="comment">//注意，并不是每次都拷贝所有</span></span><br><span class="line">        t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> tempLeft = left; <span class="comment">//</span></span><br><span class="line">        <span class="comment">//第一次合并 tempLeft = 0 , right = 1 //  tempLeft = 2  right = 3 // tL=0 ri=3</span></span><br><span class="line">        <span class="comment">//最后一次 tempLeft = 0  right = 7</span></span><br><span class="line">        <span class="keyword">while</span> (tempLeft &lt;= right) &#123;</span><br><span class="line">            arr[tempLeft] = temp[t];</span><br><span class="line">            t += <span class="number">1</span>;</span><br><span class="line">            tempLeft += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 快排 </span></span><br><span class="line"><span class="comment"> * 时间复杂度:O(nlogn)</span></span><br><span class="line"><span class="comment"> * 空间复杂度:O(n)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span></span>(left: <span class="type">List</span>[<span class="type">Int</span>], right: <span class="type">List</span>[<span class="type">Int</span>]): <span class="type">List</span>[<span class="type">Int</span>] = (left, right) <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> (<span class="type">Nil</span>, _) =&gt; right</span><br><span class="line">    <span class="keyword">case</span> (_, <span class="type">Nil</span>) =&gt; left</span><br><span class="line">    <span class="keyword">case</span> (x :: xTail, y :: yTail) =&gt;</span><br><span class="line">      <span class="keyword">if</span> (x &lt;= y) x :: merge(xTail, right)</span><br><span class="line">      <span class="keyword">else</span> y :: merge(left, yTail)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div><h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二分查找 时间复杂度O(log2n);空间复杂度O(1)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binarySearch</span></span>(arr:<span class="type">Array</span>[<span class="type">Int</span>],left:<span class="type">Int</span>,right:<span class="type">Int</span>,findVal:<span class="type">Int</span>): <span class="type">Int</span>=&#123;</span><br><span class="line">  <span class="keyword">if</span>(left&gt;right)&#123;<span class="comment">//递归退出条件，找不到，返回-1</span></span><br><span class="line">    <span class="number">-1</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> midIndex = (left+right)/<span class="number">2</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (findVal &lt; arr(midIndex))&#123;<span class="comment">//向左递归查找</span></span><br><span class="line">    binarySearch(arr,left,midIndex<span class="number">-1</span>,findVal)</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(findVal &gt; arr(midIndex))&#123;<span class="comment">//向右递归查找</span></span><br><span class="line">    binarySearch(arr,midIndex+<span class="number">1</span>,right,findVal)</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;<span class="comment">//查找到，返回下标</span></span><br><span class="line">    midIndex</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ys.chazhao;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 查找数目超过半数的值并打印，如果没有就打印0</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 方法二：快速排序，中间的值就是数量为半数的值。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//&#123;1,2,3,2,2,2,5,4,2&#125;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Banshuchazhao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">MoreThanHalfNum_Solution</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = array[<span class="number">0</span>], count = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (array[i] == res)</span><br><span class="line">                count++;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                count--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">                res = array[i];</span><br><span class="line">                count = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 验证</span></span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (array[i] == res)</span><br><span class="line">                count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count &gt; array.length / <span class="number">2</span> ? res : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = MoreThanHalfNum_Solution(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">2</span>&#125;);</span><br><span class="line">        System.out.println(i);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>拓展需求：当一个有序数组中，有多个相同的数值时，如何将所有的数值都查找到。</p><p>代码实现如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  &#123;1,8, 10, 89, 1000, 1000，1234&#125; 当一个有序数组中，有多个相同的数值时，如何将所有的数值都查找到，比如这里的 1000.</span></span><br><span class="line"><span class="comment">  //分析</span></span><br><span class="line"><span class="comment">  1. 返回的结果是一个可变数组 ArrayBuffer</span></span><br><span class="line"><span class="comment">  2. 在找到结果时，向左边扫描，向右边扫描 [条件]</span></span><br><span class="line"><span class="comment">  3. 找到结果后，就加入到ArrayBuffer</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">binarySearch2</span></span>(arr: <span class="type">Array</span>[<span class="type">Int</span>], l: <span class="type">Int</span>, r: <span class="type">Int</span>,</span><br><span class="line">                    findVal: <span class="type">Int</span>): <span class="type">ArrayBuffer</span>[<span class="type">Int</span>] = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//找不到条件?</span></span><br><span class="line">    <span class="keyword">if</span> (l &gt; r) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="type">ArrayBuffer</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> midIndex = (l + r) / <span class="number">2</span></span><br><span class="line">    <span class="keyword">val</span> midVal = arr(midIndex)</span><br><span class="line">    <span class="keyword">if</span> (midVal &gt; findVal) &#123;</span><br><span class="line">      <span class="comment">//向左进行递归查找</span></span><br><span class="line">      binarySearch2(arr, l, midIndex - <span class="number">1</span>, findVal)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (midVal &lt; findVal) &#123; <span class="comment">//向右进行递归查找</span></span><br><span class="line">      binarySearch2(arr, midIndex + <span class="number">1</span>, r, findVal)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      println(<span class="string">"midIndex="</span> + midIndex)</span><br><span class="line">      <span class="comment">//定义一个可变数组</span></span><br><span class="line">      <span class="keyword">val</span> resArr = <span class="type">ArrayBuffer</span>[<span class="type">Int</span>]()</span><br><span class="line">      <span class="comment">//向左边扫描</span></span><br><span class="line">      <span class="keyword">var</span> temp = midIndex - <span class="number">1</span></span><br><span class="line">      breakable &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (temp &lt; <span class="number">0</span> || arr(temp) != findVal) &#123;</span><br><span class="line">            <span class="keyword">break</span>()</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (arr(temp) == findVal) &#123;</span><br><span class="line">            resArr.append(temp)</span><br><span class="line">          &#125;</span><br><span class="line">          temp -= <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//将中间这个索引加入</span></span><br><span class="line">      resArr.append(midIndex)</span><br><span class="line">      <span class="comment">//向右边扫描</span></span><br><span class="line">      temp = midIndex + <span class="number">1</span></span><br><span class="line">      breakable &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (temp &gt; arr.length - <span class="number">1</span> || arr(temp) != findVal) &#123;</span><br><span class="line">            <span class="keyword">break</span>()</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (arr(temp) == findVal) &#123;</span><br><span class="line">            resArr.append(temp)</span><br><span class="line">          &#125;</span><br><span class="line">          temp += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> resArr</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div><h1 id="二叉树相关"><a href="#二叉树相关" class="headerlink" title="二叉树相关"></a>二叉树相关</h1><p>二叉树的特点</p><p>（1）树执行查找、删除、插入的时间复杂度都是O(logN)</p><p>（2）遍历二叉树的方法包括前序、中序、后序</p><p>（3）非平衡树指的是根的左右两边的子节点的数量不一致</p><p>（4）在非空二叉树中，第i层的结点总数不超过 , i&gt;=1；</p><p>（5）深度为h的二叉树最多有个结点(h&gt;=1)，最少有h个结点；</p><p>（6）对于任意一棵二叉树，如果其叶结点数为N0，而度数为2的结点总数为N2，则N0=N2+1；</p><p>定义节点以及前序、中序、后序遍历</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>(<span class="params">treeNo:<span class="type">Int</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> no = treeNo</span><br><span class="line">  <span class="keyword">var</span> left:<span class="type">TreeNode</span> = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">var</span> right:<span class="type">TreeNode</span> = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//后序遍历</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">postOrder</span></span>():<span class="type">Unit</span>=&#123;</span><br><span class="line">    <span class="comment">//向左递归输出左子树</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.left != <span class="literal">null</span>)&#123;</span><br><span class="line">      <span class="keyword">this</span>.left.postOrder</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//向右递归输出右子树</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.right != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.right.postOrder</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出当前节点值</span></span><br><span class="line">    printf(<span class="string">"节点信息 no=%d \n"</span>,no)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//中序遍历</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">infixOrder</span></span>():<span class="type">Unit</span>=&#123;</span><br><span class="line">    <span class="comment">//向左递归输出左子树</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.left != <span class="literal">null</span>)&#123;</span><br><span class="line">      <span class="keyword">this</span>.left.infixOrder()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出当前节点值</span></span><br><span class="line">    printf(<span class="string">"节点信息 no=%d \n"</span>,no)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向右递归输出右子树</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.right != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.right.infixOrder()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//前序遍历</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">preOrder</span></span>():<span class="type">Unit</span>=&#123;</span><br><span class="line">    <span class="comment">//输出当前节点值</span></span><br><span class="line">    printf(<span class="string">"节点信息 no=%d \n"</span>,no)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向左递归输出左子树</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.left != <span class="literal">null</span>)&#123;</span><br><span class="line">      <span class="keyword">this</span>.left.postOrder()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向右递归输出右子树</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.right != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.right.preOrder()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//后序遍历查找</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">postOrderSearch</span></span>(no:<span class="type">Int</span>): <span class="type">TreeNode</span> = &#123;</span><br><span class="line">    <span class="comment">//向左递归输出左子树</span></span><br><span class="line">    <span class="keyword">var</span> resNode:<span class="type">TreeNode</span> = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.left != <span class="literal">null</span>) &#123;</span><br><span class="line">      resNode = <span class="keyword">this</span>.left.postOrderSearch(no)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (resNode != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> resNode</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.right != <span class="literal">null</span>) &#123;</span><br><span class="line">      resNode = <span class="keyword">this</span>.right.postOrderSearch(no)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (resNode != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> resNode</span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">"ttt~~"</span>)</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.no == no) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line">    resNode</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//中序遍历查找</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">infixOrderSearch</span></span>(no:<span class="type">Int</span>): <span class="type">TreeNode</span> = &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> resNode : <span class="type">TreeNode</span> = <span class="literal">null</span></span><br><span class="line">    <span class="comment">//先向左递归查找</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.left != <span class="literal">null</span>) &#123;</span><br><span class="line">      resNode = <span class="keyword">this</span>.left.infixOrderSearch(no)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (resNode != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> resNode</span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">"yyy~~"</span>)</span><br><span class="line">    <span class="keyword">if</span> (no == <span class="keyword">this</span>.no) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//向右递归查找</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.right != <span class="literal">null</span>) &#123;</span><br><span class="line">      resNode = <span class="keyword">this</span>.right.infixOrderSearch(no)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resNode</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//前序查找</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">preOrderSearch</span></span>(no:<span class="type">Int</span>): <span class="type">TreeNode</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (no == <span class="keyword">this</span>.no) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//向左递归查找</span></span><br><span class="line">    <span class="keyword">var</span> resNode : <span class="type">TreeNode</span> = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.left != <span class="literal">null</span>) &#123;</span><br><span class="line">      resNode = <span class="keyword">this</span>.left.preOrderSearch(no)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (resNode != <span class="literal">null</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span>  resNode</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//向右边递归查找</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.right != <span class="literal">null</span>) &#123;</span><br><span class="line">      resNode = <span class="keyword">this</span>.right.preOrderSearch(no)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> resNode</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//删除节点</span></span><br><span class="line">  <span class="comment">//删除节点规则</span></span><br><span class="line">  <span class="comment">//1如果删除的节点是叶子节点，则删除该节点</span></span><br><span class="line">  <span class="comment">//2如果删除的节点是非叶子节点，则删除该子树</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">delNode</span></span>(no:<span class="type">Int</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//首先比较当前节点的左子节点是否为要删除的节点</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.left != <span class="literal">null</span> &amp;&amp; <span class="keyword">this</span>.left.no == no) &#123;</span><br><span class="line">      <span class="keyword">this</span>.left = <span class="literal">null</span></span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//比较当前节点的右子节点是否为要删除的节点</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.right != <span class="literal">null</span> &amp;&amp; <span class="keyword">this</span>.right.no == no) &#123;</span><br><span class="line">      <span class="keyword">this</span>.right = <span class="literal">null</span></span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//向左递归删除</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.left != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.left.delNode(no)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//向右递归删除</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.right != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.right.delNode(no)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>定义二叉树，前序、中序、后序遍历，前序、中序、后序查找，删除节点</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinaryTree</span></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> root:<span class="type">TreeNode</span> = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//后序遍历</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">postOrder</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="literal">null</span>)&#123;</span><br><span class="line">      root.postOrder()</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      println(<span class="string">"当前二叉树为空，不能遍历"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//中序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">infixOrder</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="keyword">if</span> (root != <span class="literal">null</span>)&#123;</span><br><span class="line">        root.infixOrder()</span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        println(<span class="string">"当前二叉树为空，不能遍历"</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//前序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preOrder</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="keyword">if</span> (root != <span class="literal">null</span>)&#123;</span><br><span class="line">        root.preOrder()</span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        println(<span class="string">"当前二叉树为空，不能遍历"</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//后序遍历查找</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">postOrderSearch</span></span>(no:<span class="type">Int</span>): <span class="type">TreeNode</span> = &#123;</span><br><span class="line">      <span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">        root.postOrderSearch(no)</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//中序遍历查找</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">infixOrderSeacher</span></span>(no:<span class="type">Int</span>): <span class="type">TreeNode</span> = &#123;</span><br><span class="line">      <span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> root.infixOrderSearch(no)</span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//前序查找</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preOrderSearch</span></span>(no:<span class="type">Int</span>): <span class="type">TreeNode</span> = &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> root.preOrderSearch(no)</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//println("当前二叉树为空，不能查找")</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//删除节点</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delNode</span></span>(no:<span class="type">Int</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">      <span class="keyword">if</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//先处理一下root是不是要删除的</span></span><br><span class="line">        <span class="keyword">if</span> (root.no == no)&#123;</span><br><span class="line">          root = <span class="literal">null</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">          root.delNode(no)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;冒泡排序&quot;&gt;&lt;a href=&quot;#冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序&quot;&gt;&lt;/a&gt;冒泡排序&lt;/h1&gt;&lt;div class=&quot;code-area-wrap&quot;&gt;&lt;div class=&quot;highlight-tools&quot;&gt;&lt;i class
      
    
    </summary>
    
    
      <category term="算法与数据结构" scheme="https://masteryang4.github.io/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="面试" scheme="https://masteryang4.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="算法与数据结构" scheme="https://masteryang4.github.io/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>springboot精简教程</title>
    <link href="https://masteryang4.github.io/2020/06/14/springboot%E7%B2%BE%E7%AE%80%E6%95%99%E7%A8%8B/"/>
    <id>https://masteryang4.github.io/2020/06/14/springboot%E7%B2%BE%E7%AE%80%E6%95%99%E7%A8%8B/</id>
    <published>2020-06-14T14:55:58.000Z</published>
    <updated>2020-06-14T15:02:26.437Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><h2 id="2-1-Spring分布式架构"><a href="#2-1-Spring分布式架构" class="headerlink" title="2.1 Spring分布式架构"></a>2.1 Spring分布式架构</h2><p><a href="http://www.zh0122.com/2017/04/15/04_%E5%B0%9A%E7%A1%85%E8%B0%B7JavaEE%E6%8A%80%E6%9C%AF%E4%B9%8BSpring&SpringBoot/media/image3.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="http://www.zh0122.com/2017/04/15/04_%E5%B0%9A%E7%A1%85%E8%B0%B7JavaEE%E6%8A%80%E6%9C%AF%E4%B9%8BSpring&SpringBoot/media/image3.png" class="lazyload"></a></p><h2 id="2-2-SpringBoot-概述"><a href="#2-2-SpringBoot-概述" class="headerlink" title="2.2 SpringBoot 概述"></a>2.2 SpringBoot 概述</h2><p>Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。</p><p>该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。</p><p>通过这种方式，Spring Boot致力于在蓬勃发展的快速应用开发领域(rapid application development)成为领导者。</p><h2 id="2-3-为什么要使用SpringBoot"><a href="#2-3-为什么要使用SpringBoot" class="headerlink" title="2.3 为什么要使用SpringBoot"></a>2.3 为什么要使用SpringBoot</h2><p>说到为什么使用Spring Boot, 就不得不提到Spring框架的前世今生</p><p>Spring框架由于其繁琐的配置，一度被人认为“配置地狱”，各种XML、Annotation配置混合使用，让人眼花缭乱，而且如果出错了也很难找出原因。</p><p>通过SpringMVC框架部署和发布web程序，需要和系统外服务器进行关联，操作繁琐不方便。</p><p>Spring Boot是由Spring官方推出的一个新框架，对Spring进行了高度封装，是Spring未来的发展方向。使用Spring<br>Boot框架后，可以帮助开发者快速搭建Spring框架，也可以帮助开发者快速启动一个Web服务，无须依赖外部Servlet容器，使编码变得简单，使配置变得简单，使部署变得简单，使监控变得简单。</p><h2 id="2-4-Spring-前世今生"><a href="#2-4-Spring-前世今生" class="headerlink" title="2.4 Spring 前世今生"></a>2.4 Spring 前世今生</h2><p>1) Spring1.x 时代</p><p>在Spring1.x时代，都是通过xml文件配置bean</p><p>随着项目的不断扩大，需要将xml配置分放到不同的配置文件中</p><p>需要频繁的在java类和xml配置文件中切换。</p><p>2) Spring2.x时代</p><p>随着JDK 1.5带来的注解支持，Spring2.x可以使用注解对Bean进行申明和注入，大大的<br>减少了xml配置文件，同时也大大简化了项目的开发。</p><p>那么，问题来了，究竟是应该使用xml还是注解呢？</p><blockquote><p>最佳实践：</p><p>应用的基本配置用xml，比如：数据源、资源文件等； </p><p>业务开发用注解，比如：Service中注入bean等； </p></blockquote><p>3) Spring3.x到Spring4.x</p><p>从Spring3.x开始提供了Java配置方式，使用Java配置方式可以更好的理解你配置的<br>Bean，现在我们就处于这个时代，并且Spring4.x和Spring<br>boot都推荐使用java配置的式。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Spring 1.X</span></span><br><span class="line"><span class="comment">//使用基本的框架类及配置文件（.xml）实现对象的声明及对象关系的整合。</span></span><br><span class="line">org.springframework.core.io.ClassPathResource</span><br><span class="line">org.springframework.beans.factory.xml.XmlBeanFactory</span><br><span class="line">org.springframework.context.support.ClassPathXmlApplicationContext </span><br><span class="line"><span class="comment">//Spring 2.X</span></span><br><span class="line"><span class="comment">//使用注解代替配置文件中对象的声明。简化配置。</span></span><br><span class="line">org.springframework.stereotype.<span class="meta">@Component</span></span><br><span class="line">org.springframework.stereotype.<span class="meta">@Controller</span></span><br><span class="line">org.springframework.stereotype.<span class="meta">@Service</span></span><br><span class="line">org.springframework.stereotype.<span class="meta">@Repository</span></span><br><span class="line">org.springframework.stereotype.<span class="meta">@Scope</span></span><br><span class="line">org.springframework.beans.factory.annotation.<span class="meta">@Autowired</span> </span><br><span class="line"><span class="comment">//Spring 3.X</span></span><br><span class="line"><span class="comment">//使用更强大的注解完全代替配置文件。</span></span><br><span class="line">org.springframework.context.annotation.AnnotationConfigApplicationContext</span><br><span class="line">org.springframework.context.annotation.<span class="meta">@Configuration</span></span><br><span class="line">org.springframework.context.annotation.<span class="meta">@Bean</span></span><br><span class="line">org.springframework.context.annotation.<span class="meta">@Value</span></span><br><span class="line">org.springframework.context.annotation.<span class="meta">@Import</span> </span><br><span class="line"><span class="comment">//Spring 4.X</span></span><br><span class="line"><span class="comment">//使用条件注解强化之前版本的注解。</span></span><br><span class="line">org.springframework.context.annotation.<span class="meta">@Conditional</span></span><br></pre></td></tr></table></figure></div><h2 id="2-5-自动创建一个SpringBoot项目"><a href="#2-5-自动创建一个SpringBoot项目" class="headerlink" title="2.5 自动创建一个SpringBoot项目"></a>2.5 自动创建一个SpringBoot项目</h2><p>1) 在Idea中new→Module→Spring Initializr</p><p><a href="http://www.zh0122.com/2017/04/15/04_%E5%B0%9A%E7%A1%85%E8%B0%B7JavaEE%E6%8A%80%E6%9C%AF%E4%B9%8BSpring&SpringBoot/media/image4.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="http://www.zh0122.com/2017/04/15/04_%E5%B0%9A%E7%A1%85%E8%B0%B7JavaEE%E6%8A%80%E6%9C%AF%E4%B9%8BSpring&SpringBoot/media/image4.png" class="lazyload"></a></p><p>2) 给工程命名、设置包名等，其他默认即可</p><p><a href="http://www.zh0122.com/2017/04/15/04_%E5%B0%9A%E7%A1%85%E8%B0%B7JavaEE%E6%8A%80%E6%9C%AF%E4%B9%8BSpring&SpringBoot/media/image5.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="http://www.zh0122.com/2017/04/15/04_%E5%B0%9A%E7%A1%85%E8%B0%B7JavaEE%E6%8A%80%E6%9C%AF%E4%B9%8BSpring&SpringBoot/media/image5.png" class="lazyload"></a></p><p>3) 选择工程的版本</p><p><a href="http://www.zh0122.com/2017/04/15/04_%E5%B0%9A%E7%A1%85%E8%B0%B7JavaEE%E6%8A%80%E6%9C%AF%E4%B9%8BSpring&SpringBoot/media/image6.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="http://www.zh0122.com/2017/04/15/04_%E5%B0%9A%E7%A1%85%E8%B0%B7JavaEE%E6%8A%80%E6%9C%AF%E4%B9%8BSpring&SpringBoot/media/image6.png" class="lazyload"></a></p><p>4) 点击Next ，给工程命名，然后点击Finish</p><p><a href="http://www.zh0122.com/2017/04/15/04_%E5%B0%9A%E7%A1%85%E8%B0%B7JavaEE%E6%8A%80%E6%9C%AF%E4%B9%8BSpring&SpringBoot/media/image7.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="http://www.zh0122.com/2017/04/15/04_%E5%B0%9A%E7%A1%85%E8%B0%B7JavaEE%E6%8A%80%E6%9C%AF%E4%B9%8BSpring&SpringBoot/media/image7.png" class="lazyload"></a></p><h2 id="2-6-手动创建一个SpringBoot-项目"><a href="#2-6-手动创建一个SpringBoot-项目" class="headerlink" title="2.6 手动创建一个SpringBoot 项目"></a>2.6 手动创建一个SpringBoot 项目</h2><h3 id="2-6-1-创建Maven项目"><a href="#2-6-1-创建Maven项目" class="headerlink" title="2.6.1 创建Maven项目"></a>2.6.1 创建Maven项目</h3><h3 id="2-6-2-集成Spring-Boot框架"><a href="#2-6-2-集成Spring-Boot框架" class="headerlink" title="2.6.2 集成Spring Boot框架"></a>2.6.2 集成Spring Boot框架</h3><ul><li>修改pom.xml文件，增加Spring Boot框架的依赖关系及对Web环境的支持。</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></div><ul><li>Spring Boot版本为官方最新正式版2.2.2.RELEASE</li><li>以往的项目中，所有类库的依赖关系都需要我们自己导入到pom.xml文件中，但是Spring<br>Boot项目增加spring-boot-starter-web依赖后，会自动加载web环境配置相关依赖(SpringMVC,<br>Tomcat)，简化了我们的操作。</li><li>spring-boot-starter-parent：继承Spring Boot的相关参数</li><li>spring-boot-starter-xxx：代表一个Spring Boot模块</li><li>spring-boot-starter-web：代表Web模块，在这个模块中包含了许多依赖的JAR包</li></ul><p><a href="http://www.zh0122.com/2017/04/15/04_%E5%B0%9A%E7%A1%85%E8%B0%B7JavaEE%E6%8A%80%E6%9C%AF%E4%B9%8BSpring&SpringBoot/media/image8.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="http://www.zh0122.com/2017/04/15/04_%E5%B0%9A%E7%A1%85%E8%B0%B7JavaEE%E6%8A%80%E6%9C%AF%E4%B9%8BSpring&SpringBoot/media/image8.png" class="lazyload"></a></p><p>扩展:修改一下Maven编译插件的版本</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 设置Maven编译插件的版本  SpringBoot高版本用的Maven插件版本比较</span></span><br><span class="line"><span class="comment">          高，STS没支持到，需手动指定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">maven-jar-plugin.version</span>&gt;</span>3.1.1<span class="tag">&lt;/<span class="name">maven-jar-plugin.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h3 id="2-6-3-增加程序代码"><a href="#2-6-3-增加程序代码" class="headerlink" title="2.6.3 增加程序代码"></a>2.6.3 增加程序代码</h3><ul><li>在src/main/java目录中增加类com.atguigu.springboot.SpringBootSelfApplication，并增加相应代码。</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springboot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootSelfApplication</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(SpringBootSelfApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>Spring<br>Boot项目中都会有一个以Application结尾的应用类，然后有一个标准的Java入口方法main方法。通过这个方法启动SpringBoot项目，方法中无需放入任何业务逻辑。</li><li>@SpringBootApplication注解是Spring Boot核心注解</li><li>右键点击项目或项目中的SpringBootSelfApplication类, 选择菜单Run as Spring Boot<br>App，启动SpringBoot项目.</li></ul><h3 id="2-6-4-集成Tomcat服务器"><a href="#2-6-4-集成Tomcat服务器" class="headerlink" title="2.6.4 集成Tomcat服务器"></a>2.6.4 集成Tomcat服务器</h3><ul><li>SpringBoot内置了Tomcat，当增加Web依赖后执行main方法，等同于启动Tomcat服务器,<br>默认端口号为8080。如果想具体指定,通过server.port来指定</li><li>默认情况下SpringBoot启动后，默认的context-path的值为/，从浏览器端访问项目时，,不需要加项目名，直接通过<br><a href="http://localhost:8080/请求名" target="_blank" rel="noopener">http://localhost:8080/请求名</a> 来访问，<br>如果想具体指定，通过server.servlet.context-path来指定</li><li>例如:在src/main/resources/目录中增加application.properties文件。</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">properties</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.servlet.context-path</span>=<span class="string">/</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">80</span></span><br></pre></td></tr></table></figure></div><ul><li>SpringBoot会自动读取src/main/resources/路径或着src/main/resources/config路径中的application.properties文件或application.yml文件。</li></ul><h3 id="2-6-5-为什么还会有配置文件"><a href="#2-6-5-为什么还会有配置文件" class="headerlink" title="2.6.5 为什么还会有配置文件"></a>2.6.5 为什么还会有配置文件</h3><p>Spring Boot我们称之为微框架，这里的“微”不是小和少的意思，而是“简”的意思，简单，简洁。</p><p>项目中大部分的基础配置由Spring Boot框架帮我们自动集成，简化了我们的配置，但是框架自身为了扩展性，依然需要提供配置文件。</p><p>上面的代码中只是简单的应用了Spring Boot框架，但是我们真正要做的是将Spring<br>Boot应用到项目中，所以接下来我们增加对SpringMVC框架，Mybatis框架的集成。</p><h2 id="2-7-SpringBoot-集成-Spring-amp-Spring-Web-MVC"><a href="#2-7-SpringBoot-集成-Spring-amp-Spring-Web-MVC" class="headerlink" title="2.7 SpringBoot 集成 Spring &amp; Spring Web MVC"></a>2.7 SpringBoot 集成 Spring &amp; Spring Web MVC</h2><ul><li>基本的Spring Boot环境已经构建好了，现在需要配置Spring框架及SpringMVC框架的业务环境</li></ul><h3 id="2-7-1-ComponentScan注解"><a href="#2-7-1-ComponentScan注解" class="headerlink" title="2.7.1 @ComponentScan注解"></a>2.7.1 @ComponentScan注解</h3><ul><li>通过@ComponentScan注解指定扫描的包</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springboot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages=<span class="string">"com.atguigu"</span>)</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootSelfApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(SpringBootSelfApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>默认扫描</li></ul><p>默认扫描当前包com.atguigu.springboot和子包com.atguigu.springboot.*</p><p>如果还需要扫描其他的包，那么需要增加@ComponentScan注解,指定包名进行扫描。</p><h3 id="2-7-2-增加控制器代码"><a href="#2-7-2-增加控制器代码" class="headerlink" title="2.7.2 增加控制器代码"></a>2.7.2 增加控制器代码</h3><p>在src/main/java目录中增加类com.atguigu.springboot.controller.UserController，并增加相应代码。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springboot.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ResponseBody</span>  <span class="comment">//返回Json数据</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/getAllUser"</span>)  <span class="comment">//指定请求URL</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getAllUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">"username"</span>, <span class="string">"张三"</span>);</span><br><span class="line"><span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="2-7-3-执行main方法启动应用"><a href="#2-7-3-执行main方法启动应用" class="headerlink" title="2.7.3 执行main方法启动应用"></a>2.7.3 执行main方法启动应用</h3><p>访问路径<code>http://localhost:8080[/应用路径名称]/ getAllUser</code>页面打印JSON字符串即可<a href="http://www.zh0122.com/2017/04/15/04_%E5%B0%9A%E7%A1%85%E8%B0%B7JavaEE%E6%8A%80%E6%9C%AF%E4%B9%8BSpring&SpringBoot/media/image9.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="http://www.zh0122.com/2017/04/15/04_%E5%B0%9A%E7%A1%85%E8%B0%B7JavaEE%E6%8A%80%E6%9C%AF%E4%B9%8BSpring&SpringBoot/media/image9.png" class="lazyload"></a></p><h3 id="2-7-4-Controller和-RestController区别"><a href="#2-7-4-Controller和-RestController区别" class="headerlink" title="2.7.4 @Controller和@RestController区别"></a>2.7.4 @Controller和@RestController区别</h3><p>@RestController等同于@Controller + @ResponseBody，所以上面的代码可以变为：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springboot.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/getAllUser"</span>)  <span class="comment">//指定请求URL</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getAllUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">map.put(<span class="string">"username"</span>, <span class="string">"张三"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="2-7-5-页面跳转-了解"><a href="#2-7-5-页面跳转-了解" class="headerlink" title="2.7.5 页面跳转[了解]"></a>2.7.5 页面跳转[了解]</h3><p>1) 如果需要转发跳转Jsp页面,可参考如下步骤</p><ul><li>在pom.xml中加入如下依赖</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><ul><li>将jsp页面存放在src/main/webapp目录下,Springboot默认从该目录下查找jsp页面</li><li>在application.properties文件中配置：</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">properties</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.mvc.view.prefix</span>=<span class="string">/   </span></span><br><span class="line"><span class="meta">spring.mvc.view.suffix</span>=<span class="string">.jsp</span></span><br></pre></td></tr></table></figure></div><p>2) 如需要进行重定向，可参考如下步骤</p><ul><li>在请求处理方法中的返回值前面加上”redirect:”</li><li>重定向的页面同样存放在src/main/webapp下</li></ul><h2 id="2-8-SpringBoot集成通用Mapper"><a href="#2-8-SpringBoot集成通用Mapper" class="headerlink" title="2.8 SpringBoot集成通用Mapper"></a>2.8 SpringBoot集成通用Mapper</h2><h3 id="2-8-1-通用Mapper简介"><a href="#2-8-1-通用Mapper简介" class="headerlink" title="2.8.1 通用Mapper简介"></a>2.8.1 通用Mapper简介</h3><p>通用mapper可以极大的方便开发人员进行CRUD操作，提供极其方便的单表增删改查。</p><p>一句话简单说，它就是个辅助mybatis极简单表开发的组件。它不是为了替代mybatis，而是让mybatis的开发更方便。</p><h3 id="2-8-2-集成通用Mapper"><a href="#2-8-2-集成通用Mapper" class="headerlink" title="2.8.2 集成通用Mapper"></a>2.8.2 集成通用Mapper</h3><p>1) 在pom.xml中加入通用Mapper的starter</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>2) 添加持久层代码</p><ul><li>通用Mapper提供了Mapper接口，该接口中提供了常用的CRUD方法.</li><li>用户可以自己定义自己的Mapper接口，继承通用Mapper提供的Mapper接口，</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springboot.mapper;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springboot.beans.User;</span><br><span class="line"><span class="keyword">import</span> tk.mybatis.mapper.common.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>3) 在src/main/resources下创建application.yml文件,配置数据源</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">yml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># jdbc配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/bigdata?serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">1234</span></span><br></pre></td></tr></table></figure></div><h2 id="2-9-整合测试"><a href="#2-9-整合测试" class="headerlink" title="2.9 整合测试"></a>2.9 整合测试</h2><h3 id="2-9-1-增加业务层代码"><a href="#2-9-1-增加业务层代码" class="headerlink" title="2.9.1 增加业务层代码"></a>2.9.1 增加业务层代码</h3><p>1) 增加业务层接口</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springboot.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.springboot.beans.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询所有的用户</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectAllUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>2) 增加业务层实现类</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springboot.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.springboot.beans.User;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.springboot.mapper.UserMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectAllUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userMapper.selectAll();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="2-9-2-增加控制层方法"><a href="#2-9-2-增加控制层方法" class="headerlink" title="2.9.2 增加控制层方法"></a>2.9.2 增加控制层方法</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.springboot.controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.springboot.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/getAllUser"</span>)  <span class="comment">//指定请求URL</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getAllUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> userService.selectAllUser();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="2-9-3-扫描Mapper"><a href="#2-9-3-扫描Mapper" class="headerlink" title="2.9.3 扫描Mapper"></a>2.9.3 扫描Mapper</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan</span>(basePackages = <span class="string">"com.atguigu.springboot.mapper"</span>)</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootSelfApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringBootSelfApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="2-9-4-测试"><a href="#2-9-4-测试" class="headerlink" title="2.9.4 测试"></a>2.9.4 测试</h3><p>访问路径<code>http://localhost:8080[/应用路径名称]/ getAllUser</code>页面打印JSON字符串即可</p><p><a href="http://www.zh0122.com/2017/04/15/04_%E5%B0%9A%E7%A1%85%E8%B0%B7JavaEE%E6%8A%80%E6%9C%AF%E4%B9%8BSpring&SpringBoot/media/image10.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="http://www.zh0122.com/2017/04/15/04_%E5%B0%9A%E7%A1%85%E8%B0%B7JavaEE%E6%8A%80%E6%9C%AF%E4%B9%8BSpring&SpringBoot/media/image10.png" class="lazyload"></a></p><h2 id="2-10-Restful风格URL"><a href="#2-10-Restful风格URL" class="headerlink" title="2.10 Restful风格URL"></a>2.10 Restful风格URL</h2><h3 id="2-10-1-REST-简介"><a href="#2-10-1-REST-简介" class="headerlink" title="2.10.1 REST 简介"></a>2.10.1 REST 简介</h3><p>REST（Representational State Transfer）又被称作表现层状态转换。它涉及到三个重要名词：</p><ul><li><p>资源</p><p>所谓资源简单讲就是服务所能提供的数据，可以是实体数据也可是媒体类型，图片、PDF、文本等</p></li><li><p>表现层</p><p>何为变现层？简单说就是将数据以某种方式展现给用户，或者给客户返回一张图片等等动作称之为表现，通常是已JSON或XML形式展现数据</p></li><li><p>状态转换</p><p>状态转换就是对数据进行一系列的操作，因为资源本身并非一尘不变，随着需求的变化而变化。一个资源可能会随着需求的变化而经历一个资源创建、修改、查询、删除等过程，REST风格正是基于HTTP协议运行的，HTTP协议又被称为无状态协议，所以资源的变化需要在服务端完成，</p></li></ul><p>简单用一句话概括就是：REST风格使用URL定位资源，用HTTP动词（GET,POST,DELETE,PUT）描述操作。</p><h3 id="2-10-1-REST-规定"><a href="#2-10-1-REST-规定" class="headerlink" title="2.10.1 REST 规定"></a>2.10.1 REST 规定</h3><ul><li><p>GET请求</p><ul><li>获取资源</li></ul></li></ul><blockquote><p>例如：/emp/1</p><p>获取id=1的员工信息</p></blockquote><ul><li>POST请求</li><li>添加资源</li></ul><blockquote><p>例如：/emp</p><p>添加员工信息</p></blockquote><ul><li>PUT请求</li><li>更新资源</li></ul><blockquote><p>例如：/emp/1</p><p>更新id=1的员工信息</p></blockquote><ul><li>DELETE请求</li><li>删除资源</li></ul><blockquote><p>例如：/emp/1</p><p>删除id=1的员工信息</p></blockquote><h3 id="2-10-2-Resulful风格URL-和普通URL对比"><a href="#2-10-2-Resulful风格URL-和普通URL对比" class="headerlink" title="2.10.2 Resulful风格URL 和普通URL对比"></a>2.10.2 Resulful风格URL 和普通URL对比</h3><p>普通URL:<code>localhost:8888/SpringBootSelf/selectUser?id=1001&amp;username=zhangsan</code></p><p>Restful:  <code>localhost:8888/SpringBootSelf/selectUser/1001/zhangsan</code></p><h3 id="2-10-3-如何在后台处理Restful风格URL中的参数"><a href="#2-10-3-如何在后台处理Restful风格URL中的参数" class="headerlink" title="2.10.3 如何在后台处理Restful风格URL中的参数"></a>2.10.3 如何在后台处理Restful风格URL中的参数</h3><ul><li><p>客户端的URL:<code>localhost:8888/SpringBootSelf/selectUser/1001</code></p></li><li><p>在@RequestMapping注解中使用 {} 占位符对应实际URL中的参数</p></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/selectUser/&#123;ids&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User  <span class="title">selectUser</span><span class="params">(@PathVariable(<span class="string">"ids"</span>)</span> Integer id ) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userService.doSelectUser(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>在方法中使用@PathVariable注解指定将占位符对应的URL中的参数值赋值给方法的形参.</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/selectUser/&#123;ids&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User  <span class="title">selectUser</span><span class="params">(@PathVariable(<span class="string">"ids"</span>)</span> Integer id ) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userService.doSelectUser(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="2-10-4-转换PUT请求和DELETE请求-了解"><a href="#2-10-4-转换PUT请求和DELETE请求-了解" class="headerlink" title="2.10.4 转换PUT请求和DELETE请求[了解]"></a>2.10.4 转换PUT请求和DELETE请求[了解]</h3><ul><li><p>PUT请求和DELETE请求需要通过POST请求来转换</p></li><li><p>发送POST请求我们需要在form表单中发送，所以我们需要使用SpringBoot的模板</p></li><li><p>转换的步骤：</p><p>1、添加Thymeleaf模块</p></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><blockquote><p>添加该模块后在main/resources目录下创建templates目录</p></blockquote><p>2、在templates目录下创建index.html页面，添加form表单，请求方式设置为post，表单中设置一个隐藏域，name属性值为_method,value值为put（转换为PUT请求时的值）或delete（转换为DELETE请求时的值）</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">html</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/getEmp/1"</span>&gt;</span>获取员工<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/emp/4"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"_method"</span> <span class="attr">value</span>=<span class="string">"delete"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"删除员工"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>3、配置过滤器</p><ul><li>创建一个类继承HiddenHttpMethodFilter</li><li>在类上添加@WebFilter</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.filter.HiddenHttpMethodFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFilter</span> <span class="keyword">extends</span> <span class="title">HiddenHttpMethodFilter</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>4、在启动类上添加@ServletComponentScan注解</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ServletComponentScan</span></span><br><span class="line"><span class="meta">@MapperScan</span>(basePackages = <span class="string">"com.atguigu.springboot.mapper"</span>)</span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootSelfApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringBootSelfApplication<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SpringBoot&quot;&gt;&lt;a href=&quot;#SpringBoot&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot&quot;&gt;&lt;/a&gt;SpringBoot&lt;/h1&gt;&lt;h2 id=&quot;2-1-Spring分布式架构&quot;&gt;&lt;a href=&quot;#2-1-Sp
      
    
    </summary>
    
    
      <category term="JavaWeb" scheme="https://masteryang4.github.io/categories/JavaWeb/"/>
    
      <category term="springboot" scheme="https://masteryang4.github.io/categories/JavaWeb/springboot/"/>
    
    
      <category term="教程" scheme="https://masteryang4.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="JavaWeb" scheme="https://masteryang4.github.io/tags/JavaWeb/"/>
    
      <category term="springboot" scheme="https://masteryang4.github.io/tags/springboot/"/>
    
  </entry>
  
  <entry>
    <title>spring精简教程</title>
    <link href="https://masteryang4.github.io/2020/06/14/spring%E7%B2%BE%E7%AE%80%E6%95%99%E7%A8%8B/"/>
    <id>https://masteryang4.github.io/2020/06/14/spring%E7%B2%BE%E7%AE%80%E6%95%99%E7%A8%8B/</id>
    <published>2020-06-14T14:55:47.000Z</published>
    <updated>2020-06-14T15:01:10.279Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简单了解框架"><a href="#简单了解框架" class="headerlink" title="简单了解框架"></a>简单了解框架</h1><p>框架，即framework。其实就是某种应用的半成品，就是一组组件，供你选用完成你自己的系统。简单说就是使用别人搭好的舞台，你来做表演。而且，框架一般是成熟的，不断升级的软件。</p><p>框架是对特定应用领域中的应用系统的部分设计和实现的整体结构。</p><p>因为软件系统发展到今天已经很复杂了，特别是服务器端软件，涉及到的知识，内容，问题太多。在某些方面使用别人成熟的框架，就相当于让别人帮你完成一些基础工作，你只需要集中精力完成系统的业务逻辑设计。而且框架一般是成熟，稳健的，他可以处理系统很多细节问题，比如，事务处理，安全性，数据流控制等问题。还有框架一般都经过很多人使用，所以结构很好，所以扩展性也很好，而且它是不断升级的，你可以直接享受别人升级代码带来的好处。</p><h1 id="第1章-Spring"><a href="#第1章-Spring" class="headerlink" title="第1章 Spring"></a>第1章 Spring</h1><h2 id="1-1-Spring-概述"><a href="#1-1-Spring-概述" class="headerlink" title="1.1 Spring 概述"></a>1.1 Spring 概述</h2><p>1) Spring是一个开源框架</p><p>2) Spring为简化企业级开发而生，使用Spring，JavaBean就可以实现很多以前要靠EJB才能实现的功能。同样的功能，在EJB中要通过繁琐的配置和复杂的代码才能够实现，而在Spring中却非常的优雅和简洁。</p><p>3) Spring是一个<strong>IOC</strong>(DI)和<strong>AOP</strong>容器框架。</p><p>4) Spring的优良特性</p><blockquote><p>① <strong>非侵入式</strong>：基于Spring开发的应用中的对象可以不依赖于Spring的API</p><p>② <strong>依赖注入</strong>：DI——Dependency Injection，反转控制(IOC)最经典的实现。</p><p>③ <strong>面向切面编程</strong>：Aspect Oriented Programming——AOP</p><p>④ <strong>容器</strong>：Spring是一个容器，因为它包含并且管理应用对象的生命周期</p><p><strong>⑤ 组件化</strong>：Spring实现了使用简单的组件配置组合成一个复杂的应用。在 Spring 中可以使用XML和Java注解组合这些对象。</p></blockquote><p><strong>⑥ 一站式</strong>：在IOC和AOP的基础上可以整合各种企业应用的开源框架和优秀的第三方类库（实际上Spring<br>自身也提供了表述层的SpringMVC和持久层的Spring JDBC）。</p><p>5) Spring模块</p><p><a href="http://www.zh0122.com/2017/04/15/04_%E5%B0%9A%E7%A1%85%E8%B0%B7JavaEE%E6%8A%80%E6%9C%AF%E4%B9%8BSpring&SpringBoot/media/image1.png" data-fancybox="group" data-caption="Image" class="fancybox"><img alt="Image" title="Image" data-src="http://www.zh0122.com/2017/04/15/04_%E5%B0%9A%E7%A1%85%E8%B0%B7JavaEE%E6%8A%80%E6%9C%AF%E4%B9%8BSpring&SpringBoot/media/image1.png" class="lazyload"></a></p><h2 id="1-2-Spring-HelloWorld"><a href="#1-2-Spring-HelloWorld" class="headerlink" title="1.2 Spring HelloWorld"></a>1.2 Spring HelloWorld</h2><p>1) 创建一个Maven版的Java工程</p><p>2) 在pom.xml中加入对Spring的依赖</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>3) 创建Spring的核心配置文件</p><ul><li>File-&gt;New-&gt;Spring Bean Configuration File</li><li>为文件取名字 例如：applicationContext.xml</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>4) 编写组件</p><ul><li>创建控制层组件</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ys.spring.controller;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 控制层组件  处理客户端的请求，给客户端响应</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> com.ys.spring.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">listAllUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>创建业务层组件接口</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ys.spring.service;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 业务层组件   处理业务逻辑</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">doGetAllUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>创建业务层组件实现类</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ys.spring.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ys.spring.dao.UserDao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span>  <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGetAllUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>创建持久层组件接口</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ys.spring.dao;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 持久层组件  负责数据库的CRUD操作</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectAllUsers</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>创建持久层组件实现类</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ys.spring.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoJdbcImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectAllUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"UserDaoJdbcImpl  selectAllUsers  Success ....."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>在spring的核心配置文件中管理Bean</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 管理组件 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">bean: 对应一个被Spring管理的组件对象</span></span><br><span class="line"><span class="comment"> id: bean的唯一标识</span></span><br><span class="line"><span class="comment"> class: 组件对象对应的类的全类名</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userController"</span> <span class="attr">class</span>=<span class="string">"com.ys.spring.controller.UserController"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userServiceImpl"</span> <span class="attr">class</span>=<span class="string">"com.ys.spring.service.UserServiceImpl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDaoJdbcImpl"</span> <span class="attr">class</span>=<span class="string">"com.ys.spring.dao.UserDaoJdbcImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></div><ul><li>编写测试类</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ys.spring.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ys.spring.controller.UserController;</span><br><span class="line"><span class="keyword">import</span> com.ys.spring.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.ys.spring.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSpring</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSpringXML</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//1. 先创建Spring的容器对象</span></span><br><span class="line">ApplicationContext ctx = </span><br><span class="line"><span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 从Spring的容器中获取Bean对象</span></span><br><span class="line">UserController uc = ctx.getBean(<span class="string">"userController"</span>, UserController<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(<span class="string">"uc:"</span> + uc);</span><br><span class="line">UserService us = ctx.getBean(<span class="string">"userServiceImpl"</span>,UserService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(<span class="string">"us:"</span> + us );</span><br><span class="line">UserDao ud = ctx.getBean(<span class="string">"userDaoJdbcImpl"</span>,UserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(<span class="string">"ud:"</span> + ud );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>5) 组件装配</p><ul><li>在控制层组件中定义业务层组件类型的属性</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ys.spring.controller;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 控制层组件  处理客户端的请求，给客户端响应</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ys.spring.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> UserService userService ;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserService</span><span class="params">(UserService userService)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.userService = userService;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">listAllUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">userService.doGetAllUser();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>在业务层组件中定义持久层组件类型的属性</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ys.spring.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ys.spring.dao.UserDao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span>  <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> UserDao userDao ;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGetAllUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">userDao.selectAllUsers();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>在Spring的核心配置文件中完成组件装配</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang"></div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">"http://www.springframework.org/schema/beans"</span></span><br><span class="line">xmlns:xsi=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">xsi:schemaLocation=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 管理组件 --&gt;</span><br><span class="line">&lt;!-- </span><br><span class="line">bean: 对应一个被Spring管理的组件对象</span><br><span class="line"> id: bean的唯一标识</span><br><span class="line"> class: 组件对象对应的类的全类名</span><br><span class="line"> --&gt;</span><br><span class="line">&lt;bean id=<span class="string">"userController"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.ys.spring.controller.UserController"</span>&gt;</span><br><span class="line">&lt;!-- 给属性注入值 --&gt;</span><br><span class="line">&lt;property name="userService" ref="userServiceImpl"&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;bean id=<span class="string">"userServiceImpl"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.ys.spring.service.UserServiceImpl"</span>&gt;</span><br><span class="line">&lt;property name="userDao" ref="userDaoJdbcImpl"&gt;&lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;bean id="userDaoJdbcImpl" class="com.ys.spring.dao.UserDaoJdbcImpl"&gt;&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></div><ul><li>测试控制层 业务层 持久层的调用</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ys.spring.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ys.spring.controller.UserController;</span><br><span class="line"><span class="keyword">import</span> com.ys.spring.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.ys.spring.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSpring</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSpringXML</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//1. 先创建Spring的容器对象</span></span><br><span class="line">ApplicationContext ctx = </span><br><span class="line"><span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 从Spring的容器中获取Bean对象</span></span><br><span class="line">UserController uc = ctx.getBean(<span class="string">"userController"</span>, UserController<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(<span class="string">"uc:"</span> + uc);</span><br><span class="line">UserService us = ctx.getBean(<span class="string">"userServiceImpl"</span>,UserService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(<span class="string">"us:"</span> + us );</span><br><span class="line">UserDao ud = ctx.getBean(<span class="string">"userDaoJdbcImpl"</span>,UserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(<span class="string">"ud:"</span> + ud );</span><br><span class="line"></span><br><span class="line">uc.listAllUsers();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="1-3-基于注解开发Spring应用"><a href="#1-3-基于注解开发Spring应用" class="headerlink" title="1.3 基于注解开发Spring应用"></a>1.3 基于注解开发Spring应用</h2><h3 id="1-3-1-常用注解标识组件"><a href="#1-3-1-常用注解标识组件" class="headerlink" title="1.3.1 常用注解标识组件"></a>1.3.1 常用注解标识组件</h3><p>1) 普通组件：</p><blockquote><p>@Component 标识一个受Spring IOC容器管理的组件</p></blockquote><p>2) 持久化层组件：</p><blockquote><p>@Repository 标识一个受Spring IOC容器管理的持久化层组件</p></blockquote><p>3) 业务逻辑层组件：</p><blockquote><p>@Service 标识一个受Spring IOC容器管理的业务逻辑层组件</p></blockquote><p>4) 表述层控制器组件：</p><blockquote><p>@Controller 标识一个受Spring IOC容器管理的表述层控制器组件</p></blockquote><h3 id="1-3-2-组件命名规则"><a href="#1-3-2-组件命名规则" class="headerlink" title="1.3.2 组件命名规则"></a>1.3.2 组件命名规则</h3><p>1) 默认情况：使用组件的简单类名首字母小写后得到的字符串作为bean的id</p><p>2) 使用组件注解的value属性指定bean的id</p><p>3) 注意：事实上Spring并没有能力识别一个组件到底是不是它所标记的类型，即使将<br>@Respository注解用在一个表述层控制器组件上面也不会产生任何错误，所以<br>@Respository、@Service、@Controller这几个注解仅仅是为了让开发人员自己 明确当前的组件扮演的角色。</p><h3 id="1-3-3-Spring-HelloWorld-注解版"><a href="#1-3-3-Spring-HelloWorld-注解版" class="headerlink" title="1.3.3 Spring HelloWorld 注解版"></a>1.3.3 Spring HelloWorld 注解版</h3><p>1) 在控制层 业务层 持久层组件标注对应的注解</p><ul><li>在控制层组件标注注解</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>在业务层组件标注注解</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span>  <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>在持久层组件标注注解</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoJdbcImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span>  </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>2) 在Spring的核心配置文件中开启组件扫描</p><ul><li>首先在xml文件中的namespace视图下勾选context名称空间</li></ul><p><a href="http://www.zh0122.com/2017/04/15/04_%E5%B0%9A%E7%A1%85%E8%B0%B7JavaEE%E6%8A%80%E6%9C%AF%E4%B9%8BSpring&SpringBoot/media/image2.png" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="http://www.zh0122.com/2017/04/15/04_%E5%B0%9A%E7%A1%85%E8%B0%B7JavaEE%E6%8A%80%E6%9C%AF%E4%B9%8BSpring&SpringBoot/media/image2.png" class="lazyload"></a></p><ul><li>在Spring的核心配置文件中开启组件扫描</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 组件扫描 </span></span><br><span class="line"><span class="comment"> base-package: 基本包</span></span><br><span class="line"><span class="comment"> Spring会扫描通过base-package指定的包下以及子包下的组件，将带有Spring相关</span></span><br><span class="line"><span class="comment">         注解的类管理到IOC容器中。</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.ys.spring"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>3) 编写测试类</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ys.spring.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ys.spring.controller.UserController;</span><br><span class="line"><span class="keyword">import</span> com.ys.spring.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.ys.spring.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSpring</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSpringXML</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//1. 先创建Spring的容器对象</span></span><br><span class="line">ApplicationContext ctx = </span><br><span class="line"><span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"><span class="comment">//2. 从Spring的容器中获取Bean对象</span></span><br><span class="line">UserController uc = ctx.getBean(<span class="string">"userController"</span>, UserController<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(<span class="string">"uc:"</span> + uc);</span><br><span class="line">UserService us = ctx.getBean(<span class="string">"userServiceImpl"</span>,UserService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(<span class="string">"us:"</span> + us );</span><br><span class="line">UserDao ud = ctx.getBean(<span class="string">"userDaoJdbcImpl"</span>,UserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(<span class="string">"ud:"</span> + ud );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="1-3-4-Autowired注解"><a href="#1-3-4-Autowired注解" class="headerlink" title="1.3.4 @Autowired注解"></a>1.3.4 @Autowired注解</h3><p>1) @Autowired的工作机制</p><ul><li>首先会通过当前被装配的属性的类型到IOC容器中去匹配对应的Bean对象,如果能唯一确定一个bean对象，则装配成功</li><li>当通过当前被装配的属性的类型匹配在IOC容器中匹配到多个对应的Bean对象时，<br>会再使用当前被装配的属性的名字与匹配到的Bean对象的id值再进行唯一确定，如果能确定唯一一个，则装配<br>成功，否则，抛出异常</li></ul><blockquote><p>expected single matching bean but found 2:<br>userDaoJdbcImpl,userDaoMyBatisImpl</p></blockquote><ul><li>如果被装配的属性在IOC容器中匹配不到任何一个Bean对象，也会抛出异常</li></ul><blockquote><p>expected at least 1 bean which qualifies as autowire candidate for<br>this dependency.</p><p>Dependency annotations:</p><p>@org.springframework.beans.factory.annotation.Autowired(required=true)}</p></blockquote><ul><li>如果匹配到多个Bean的情况，并且通过属性名也无法唯一确定一个Bean的时候，可以手动通过@Qualifier注解来具体指定装配哪个Bean对象.</li><li>@Autowired 注解中required的属性默认是true，表示属性必须被装配，可以改为false，表示可选.也就是<br>有就装配，没有就不装配.</li><li>@Autowired 和 @Qualifier 注解可以加在属性上，也可以加在方法上。</li></ul><h3 id="1-3-5-基于注解装配"><a href="#1-3-5-基于注解装配" class="headerlink" title="1.3.5 基于注解装配"></a>1.3.5 基于注解装配</h3><p>1) 在 控制层 和 业务层分别定义需要被装配的组件类型的属性,并在属性上标注注解</p><ul><li>在控制层中定义业务层类型的属性 和 相关方法</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserService userService ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">listAllUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">userService.doGetAllUser();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>在业务层中定义持久层类型的属性 和相关方法</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ys.spring.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ys.spring.dao.UserDao;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span>  <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserDao userDao ;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGetAllUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">userDao.selectAllUsers();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><ul><li>在持久层中定义相关方法</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoJdbcImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectAllUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"UserDaoJdbcImpl  selectAllUsers  Success ....."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>2) 在测试方法中测试 控制层 业务层 持久层的调用</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ys.spring.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ys.spring.controller.UserController;</span><br><span class="line"><span class="keyword">import</span> com.ys.spring.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.ys.spring.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSpring</span> </span>&#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSpringXML</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//1. 先创建Spring的容器对象</span></span><br><span class="line">ApplicationContext ctx = </span><br><span class="line"><span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 从Spring的容器中获取Bean对象</span></span><br><span class="line">UserController uc = ctx.getBean(<span class="string">"userController"</span>, UserController<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(<span class="string">"uc:"</span> + uc);</span><br><span class="line">UserService us = ctx.getBean(<span class="string">"userServiceImpl"</span>,UserService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(<span class="string">"us:"</span> + us );</span><br><span class="line">UserDao ud = ctx.getBean(<span class="string">"userDaoJdbcImpl"</span>,UserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">System.out.println(<span class="string">"ud:"</span> + ud );</span><br><span class="line">uc.listAllUsers();</span><br><span class="line"><span class="comment">//【注意】id首字母要小写</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简单了解框架&quot;&gt;&lt;a href=&quot;#简单了解框架&quot; class=&quot;headerlink&quot; title=&quot;简单了解框架&quot;&gt;&lt;/a&gt;简单了解框架&lt;/h1&gt;&lt;p&gt;框架，即framework。其实就是某种应用的半成品，就是一组组件，供你选用完成你自己的系统。简单说就是使用
      
    
    </summary>
    
    
      <category term="JavaWeb" scheme="https://masteryang4.github.io/categories/JavaWeb/"/>
    
      <category term="spring" scheme="https://masteryang4.github.io/categories/JavaWeb/spring/"/>
    
    
      <category term="教程" scheme="https://masteryang4.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="JavaWeb" scheme="https://masteryang4.github.io/tags/JavaWeb/"/>
    
      <category term="spring" scheme="https://masteryang4.github.io/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>解决Github连不上、ping不通的问题</title>
    <link href="https://masteryang4.github.io/2020/06/07/%E8%A7%A3%E5%86%B3Github%E8%BF%9E%E4%B8%8D%E4%B8%8A%E3%80%81ping%E4%B8%8D%E9%80%9A%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://masteryang4.github.io/2020/06/07/%E8%A7%A3%E5%86%B3Github%E8%BF%9E%E4%B8%8D%E4%B8%8A%E3%80%81ping%E4%B8%8D%E9%80%9A%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2020-06-07T15:59:15.000Z</published>
    <updated>2020-06-07T16:10:43.018Z</updated>
    
    <content type="html"><![CDATA[<h1 id="修改host即可"><a href="#修改host即可" class="headerlink" title="修改host即可"></a>修改host即可</h1><p>Github连不上、ping不通、git clone特别慢等现象，通常是因为<code>github.global.ssl.fastly.net</code>域名被限制了。</p><p>因此，只要找到你当前线路最快的ip，修改一下host就能提速。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>一、在网站 <a href="https://www.ipaddress.com/" target="_blank" rel="noopener">https://www.ipaddress.com</a> 分别找这两个域名所对应的最快的ip地址</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">github.global.ssl.fastly.net</span><br><span class="line">github.com</span><br></pre></td></tr></table></figure></div><p>二、在<code>C:\Windows\System32\drivers\etc\hosts</code>里面做映射</p><p>注意要以<strong>自己查到</strong>的<strong>这两个域名所对应的最快IP地址</strong>为准。</p><p>在hosts文件最下方添加即可。</p><p>示例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">199.232.69.194 github.global.ssl.fastly.net</span><br><span class="line">140.82.114.4 github.com</span><br></pre></td></tr></table></figure></div><p>保存修改后，再登陆一般就木有问题了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;修改host即可&quot;&gt;&lt;a href=&quot;#修改host即可&quot; class=&quot;headerlink&quot; title=&quot;修改host即可&quot;&gt;&lt;/a&gt;修改host即可&lt;/h1&gt;&lt;p&gt;Github连不上、ping不通、git clone特别慢等现象，通常是因为&lt;code&gt;gi
      
    
    </summary>
    
    
      <category term="Git&amp;Github" scheme="https://masteryang4.github.io/categories/Git-Github/"/>
    
    
      <category term="教程" scheme="https://masteryang4.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
      <category term="Git&amp;Github" scheme="https://masteryang4.github.io/tags/Git-Github/"/>
    
      <category term="bug解决" scheme="https://masteryang4.github.io/tags/bug%E8%A7%A3%E5%86%B3/"/>
    
  </entry>
  
  <entry>
    <title>Redis常见问题及扩展</title>
    <link href="https://masteryang4.github.io/2020/06/07/Redis%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E5%8F%8A%E6%89%A9%E5%B1%95/"/>
    <id>https://masteryang4.github.io/2020/06/07/Redis%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E5%8F%8A%E6%89%A9%E5%B1%95/</id>
    <published>2020-06-07T15:04:34.000Z</published>
    <updated>2020-06-07T15:08:37.885Z</updated>
    
    <content type="html"><![CDATA[<h1 id="缓存穿透、缓存雪崩、缓存击穿"><a href="#缓存穿透、缓存雪崩、缓存击穿" class="headerlink" title="缓存穿透、缓存雪崩、缓存击穿"></a>缓存穿透、缓存雪崩、缓存击穿</h1><p>1、缓存穿透是指查询一个一定不存在的数据。由于缓存命不中时会去查询数据库，查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到数据库去查询，造成缓存穿透。</p><p>解决方案：</p><ul><li><p>是将空对象也缓存起来，并给它设置一个很短的过期时间，最长不超过5分钟</p></li><li><p>采用<strong>布隆过滤器</strong>，将所有可能存在的数据<strong>哈希</strong>到一个足够大的bitmap中，一个一定不存在的数据会被这个bitmap拦截掉，从而避免了对底层存储系统的查询压力</p></li></ul><blockquote><p>布隆过滤器(bloom filter)： <a href="https://zhuanlan.zhihu.com/p/72378274" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/72378274</a> </p></blockquote><p>2、如果缓存集中在一段时间内失效，发生大量的缓存穿透，所有的查询都落在数据库上，就会造成缓存雪崩。</p><p>解决方案：</p><ul><li>尽量让失效的时间点不分布在同一个时间点</li></ul><p>3、缓存击穿，是指一个key非常热点，在不停的扛着大并发，当这个key在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库，就像在一个屏障上凿开了一个洞。</p><p>解决方案：</p><ul><li>可以设置key永不过期</li></ul><h1 id="哨兵模式"><a href="#哨兵模式" class="headerlink" title="哨兵模式"></a>哨兵模式</h1><p>主从复制中反客为主的自动版，如果主机Down掉，哨兵会从从机中选择一台作为主机，并将它设置为其他从机的主机，而且如果原来的主机再次启动的话也会成为从机。</p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>string</td><td>字符串</td></tr><tr><td>list</td><td>可以重复的集合</td></tr><tr><td>set</td><td>不可以重复的集合</td></tr><tr><td>hash</td><td>类似于Map&lt;String,String&gt;</td></tr><tr><td>zset(sorted set）</td><td>带分数的set</td></tr></tbody></table><h1 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h1><p>1、RDB持久化：</p><ul><li><p>在指定的时间间隔内持久化</p></li><li><p>服务shutdown会自动持久化</p></li><li><p>输入bgsave也会持久化</p></li></ul><p>2、AOF :  以日志形式记录每个更新操作</p><ul><li><p>Redis重新启动时读取这个文件，重新执行新建、修改数据的命令恢复数据。</p></li><li><p>保存策略：</p><ul><li>推荐（并且也是默认）的措施为每秒持久化一次，这种策略可以兼顾速度和安全性。</li></ul></li><li><p>缺点：</p><ul><li>比起RDB占用更多的磁盘空间</li><li>恢复备份速度要慢</li><li>每次读写都同步的话，有一定的性能压力</li><li>存在个别Bug，造成恢复不能</li></ul></li></ul><p><strong>选择策略：</strong></p><p>官方推荐：</p><p>如果对数据不敏感，可以选单独用RDB；不建议单独用AOF，因为可能出现Bug;如果只是做纯内存缓存，可以都不用。</p><h1 id="悲观锁、乐观锁"><a href="#悲观锁、乐观锁" class="headerlink" title="悲观锁、乐观锁"></a>悲观锁、乐观锁</h1><p>悲观锁：</p><p>执行操作前假设当前的操作肯定（或有很大几率）会被打断（悲观）。基于这个假设，我们在做操作前就会把相关资源锁定，不允许自己执行期间有其他操作干扰。</p><p>乐观锁：</p><p>执行操作前假设当前操作不会被打断（乐观）。基于这个假设，我们在做操作前不会锁定资源，万一发生了其他操作的干扰，那么本次操作将被放弃。</p><p><strong>Redis使用的就是乐观锁。</strong></p><h1 id="推荐参考："><a href="#推荐参考：" class="headerlink" title="推荐参考："></a>推荐参考：</h1><blockquote><p><a href="https://zhuanlan.zhihu.com/p/89620471" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/89620471</a> </p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;缓存穿透、缓存雪崩、缓存击穿&quot;&gt;&lt;a href=&quot;#缓存穿透、缓存雪崩、缓存击穿&quot; class=&quot;headerlink&quot; title=&quot;缓存穿透、缓存雪崩、缓存击穿&quot;&gt;&lt;/a&gt;缓存穿透、缓存雪崩、缓存击穿&lt;/h1&gt;&lt;p&gt;1、缓存穿透是指查询一个一定不存在的数据。由
      
    
    </summary>
    
    
      <category term="大数据" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="Redis" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/Redis/"/>
    
    
      <category term="大数据" scheme="https://masteryang4.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="面试" scheme="https://masteryang4.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="Redis" scheme="https://masteryang4.github.io/tags/Redis/"/>
    
      <category term="布隆过滤器" scheme="https://masteryang4.github.io/tags/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    
      <category term="缓存" scheme="https://masteryang4.github.io/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>大数据常用框架源码编译</title>
    <link href="https://masteryang4.github.io/2020/06/07/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%B8%B8%E7%94%A8%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/"/>
    <id>https://masteryang4.github.io/2020/06/07/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%B8%B8%E7%94%A8%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/</id>
    <published>2020-06-07T12:28:17.000Z</published>
    <updated>2020-06-07T12:33:39.199Z</updated>
    
    <content type="html"><![CDATA[<h1 id="源码编译通用步骤"><a href="#源码编译通用步骤" class="headerlink" title="源码编译通用步骤"></a>源码编译通用步骤</h1><h2 id="一、搭建编译环境"><a href="#一、搭建编译环境" class="headerlink" title="一、搭建编译环境"></a>一、搭建编译环境</h2><p>一般编译环境为Linux + JDK + Maven，有些框架可能需要别的环境支持，一般都会注明，在后面细说。以下教程都是基于Linux + JDK8环境编译。</p><ul><li><p>Linux和JDK环境这里不再赘述</p></li><li><p>MAVEN环境搭建</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1. 从apache网站拉取tar包并解压</span></span><br><span class="line">MVNTAR=$(curl http://maven.apache.org/download.cgi | grep -E <span class="string">"&gt;apache-maven-.*bin\.tar\.gz&lt;"</span> | sed <span class="string">'s/.*a href="\(.*\)".*/\1/g'</span>)</span><br><span class="line">curl <span class="variable">$MVNTAR</span> | tar zxC /opt/module</span><br><span class="line">mv /opt/module/$(basename <span class="variable">$MVNTAR</span> | cut -d - -f 1,2,3) /opt/module/maven</span><br><span class="line"></span><br><span class="line"><span class="comment">#2. 配置环境变量</span></span><br><span class="line">vim /etc/profile.d/my_env.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加如下内容并保存退出</span></span><br><span class="line"><span class="built_in">export</span> M2_HOME=/opt/module/maven</span><br><span class="line"><span class="built_in">export</span> MAVEN_HOME=/opt/module/maven</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;MAVEN_HOME&#125;</span>/bin:<span class="variable">$&#123;PATH&#125;</span></span><br></pre></td></tr></table></figure></div><p>完成后重启Xshell会话</p></li></ul><h2 id="二、下载源码"><a href="#二、下载源码" class="headerlink" title="二、下载源码"></a>二、下载源码</h2><p>下载你想要编译的框架的源码。一般源码下载有两种方式：</p><ol><li>想编译的版本已经发布release版，但是由于兼容性原因需要重新编译。这种情况直接从框架官网下载源码包并解压即可。</li><li>想测试框架还没发布的最新功能。此时从git托管服务器拉取最新源码，这时，我们需要git环境</li></ol><ul><li><p>Git环境搭建</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y epel-release</span><br><span class="line">sudo yum install -y git</span><br></pre></td></tr></table></figure></div></li><li><p>到 <a href="https://git-wip-us.apache.org/repos/asf" target="_blank" rel="noopener">https://git-wip-us.apache.org/repos/asf</a> 查看想要编译的框架的git服务器，拉取源码(以Hive为例)</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#新建源码存储目录</span></span><br><span class="line">mkdir -p /opt/software/<span class="built_in">source</span></span><br><span class="line"><span class="built_in">cd</span> /opt/software/<span class="built_in">source</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#拉取源码</span></span><br><span class="line">git <span class="built_in">clone</span> https://git-wip-us.apache.org/repos/asf/hive.git</span><br></pre></td></tr></table></figure></div></li><li><p>进入拉取的源码目录，切换到自己想要的分支</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看所有本地和远程分支，这里也可以切换到之前版本的分支</span></span><br><span class="line"><span class="built_in">cd</span> hive</span><br><span class="line">git branch -a</span><br><span class="line"></span><br><span class="line"><span class="comment">#新建本地分支同步远程分支</span></span><br><span class="line">git checkout -b 3.1 origin/branch-3.1</span><br></pre></td></tr></table></figure></div></li><li><p>如果想切换到特定release的源码，使用git tag命令</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看所有tag</span></span><br><span class="line">git tag</span><br><span class="line"></span><br><span class="line"><span class="comment">#切换到想要的tag，这里以release-3.1.2为例</span></span><br><span class="line">git checkout rel/release-3.1.2</span><br></pre></td></tr></table></figure></div></li></ul><h2 id="三、查看编译说明"><a href="#三、查看编译说明" class="headerlink" title="三、查看编译说明"></a>三、查看编译说明</h2><p>一般来说，源码根目录都会有building.txt之类的文件作为编译说明，如果没有找到，也可以去官网查看编译说明。说明里一般都会注明前置要求，例如一些额外的编译环境要求等。</p><p>Hive没有前置要求，我们直接进入第四步</p><h2 id="四、对源码做必要修改"><a href="#四、对源码做必要修改" class="headerlink" title="四、对源码做必要修改"></a>四、对源码做必要修改</h2><p>一般我们只有在框架不兼容的情况下我们需要重新编译，不兼容一般是由于框架依赖版本不一致造成的，一般我们只需要编辑框架的pom.xml文件修改依赖版本即可。但是有些依赖新版本和旧版本不兼容，此时我们就需要对源码进行更多的修改。这些修改最好在IDE中进行。</p><p>Hive的guava版本和Hadoop 3.1.3的不兼容，我们修改其为27.0-jre</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">将</span><br><span class="line"><span class="tag">&lt;<span class="name">guava.version</span>&gt;</span>19.0<span class="tag">&lt;/<span class="name">guava.version</span>&gt;</span></span><br><span class="line">修改为</span><br><span class="line"><span class="tag">&lt;<span class="name">guava.version</span>&gt;</span>27.0-jre<span class="tag">&lt;/<span class="name">guava.version</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>这个依赖新老版本就不兼容，修改版本后我们需要对源码进行必要修改。详细修改步骤会在另外一篇教程中讲述</p><h2 id="五、编译"><a href="#五、编译" class="headerlink" title="五、编译"></a>五、编译</h2><p>准备工作全部做完，最后我们开始编译。一般的编译命令为：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package -Pdist -DskipTests -Dmaven.javadoc.skip=<span class="literal">true</span></span><br></pre></td></tr></table></figure></div><p>然后静待编译完成。这个过程会比较久，而且会从maven官网拉取大量jar包，所以要保证网络状况良好。</p><p>编译完成的Tar包的位置，各个框架都不一样，我们可以用下面的命令查找</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find ./ -name *.tar.gz</span><br></pre></td></tr></table></figure></div><h1 id="Hive编译"><a href="#Hive编译" class="headerlink" title="Hive编译"></a>Hive编译</h1><ul><li>拉取源码</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/software/<span class="built_in">source</span></span><br><span class="line">git <span class="built_in">clone</span> https://git-wip-us.apache.org/repos/asf/hive.git</span><br></pre></td></tr></table></figure></div><ul><li>修改pom.xml，将guava的版本改为如下版本</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;guava.version&gt;27.0-jre&lt;&#x2F;guava.version&gt;</span><br></pre></td></tr></table></figure></div><ul><li><p>修改以下文件中关于 com.google.common.util.concurrent.Futures#addCallback 的调用</p><ul><li>src\java\org\apache\hadoop\hive\llap\AsyncPbRpcProxy.java</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//173行</span></span><br><span class="line">Futures.addCallback(</span><br><span class="line">    future,</span><br><span class="line">    <span class="keyword">new</span> ResponseCallback&lt;U&gt;(</span><br><span class="line">        request.getCallback(), nodeId, <span class="keyword">this</span>)</span><br><span class="line">    ,executor);</span><br><span class="line"></span><br><span class="line"><span class="comment">//278行</span></span><br><span class="line">Futures.addCallback(requestManagerFuture, <span class="keyword">new</span> FutureCallback&lt;Void&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(Void result)</span> </span>&#123;</span><br><span class="line">        LOG.info(<span class="string">"RequestManager shutdown"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!(t <span class="keyword">instanceof</span> CancellationException)) &#123;</span><br><span class="line">            LOG.warn(<span class="string">"RequestManager shutdown with error"</span>, t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, requestManagerExecutor);</span><br></pre></td></tr></table></figure></div><ul><li>src\java\org\apache\hadoop\hive\llap\daemon\impl\AMReporter.java</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//162行</span></span><br><span class="line">Futures.addCallback(queueLookupFuture, <span class="keyword">new</span> FutureCallback&lt;Void&gt;() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(Void result)</span> </span>&#123;</span><br><span class="line">    LOG.info(<span class="string">"AMReporter QueueDrainer exited"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (t <span class="keyword">instanceof</span> CancellationException &amp;&amp; isShutdown.get()) &#123;</span><br><span class="line">      LOG.info(<span class="string">"AMReporter QueueDrainer exited as a result of a cancellation after shutdown"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      LOG.error(<span class="string">"AMReporter QueueDrainer exited with error"</span>, t);</span><br><span class="line">      Thread.getDefaultUncaughtExceptionHandler().uncaughtException(Thread.currentThread(), t);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, queueLookupExecutor);</span><br><span class="line"></span><br><span class="line"><span class="comment">//266行</span></span><br><span class="line">Futures.addCallback(future, <span class="keyword">new</span> FutureCallback&lt;Void&gt;() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(Void result)</span> </span>&#123;</span><br><span class="line">    LOG.info(<span class="string">"Sent taskKilled for &#123;&#125;"</span>, taskAttemptId);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">    LOG.warn(<span class="string">"Failed to send taskKilled for &#123;&#125;. The attempt will likely time out."</span>,</span><br><span class="line">        taskAttemptId);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, executor);</span><br><span class="line"></span><br><span class="line"><span class="comment">//331行</span></span><br><span class="line">Futures.addCallback(future, <span class="keyword">new</span> FutureCallback&lt;Void&gt;() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(Void result)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Nothing to do.</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">    QueryIdentifier currentQueryIdentifier = amNodeInfo.getQueryIdentifier();</span><br><span class="line">    amNodeInfo.setAmFailed(<span class="keyword">true</span>);</span><br><span class="line">    LOG.warn(<span class="string">"Heartbeat failed to AM &#123;&#125;. Marking query as failed. query=&#123;&#125;"</span>,</span><br><span class="line">      amNodeInfo.amNodeId, currentQueryIdentifier, t);</span><br><span class="line">    queryFailedHandler.queryFailed(currentQueryIdentifier);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, executor);</span><br></pre></td></tr></table></figure></div><ul><li>src\java\org\apache\hadoop\hive\llap\daemon\impl\LlapTaskReporter.java</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//131行</span></span><br><span class="line">Futures.addCallback(future, <span class="keyword">new</span> HeartbeatCallback(errorReporter), heartbeatExecutor);</span><br></pre></td></tr></table></figure></div><ul><li>src\java\org\apache\hadoop\hive\llap\daemon\impl\TaskExecutorService.java</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//178行</span></span><br><span class="line">Futures.addCallback(future, <span class="keyword">new</span> WaitQueueWorkerCallback(), executionCompletionExecutorServiceRaw);</span><br><span class="line"></span><br><span class="line"><span class="comment">//692行</span></span><br><span class="line">Futures.addCallback(future, wrappedCallback, executionCompletionExecutorService);</span><br></pre></td></tr></table></figure></div><ul><li>src\java\org\apache\hadoop\hive\llap\tezplugins\LlapTaskSchedulerService.java</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//747行</span></span><br><span class="line">Futures.addCallback(nodeEnablerFuture, <span class="keyword">new</span> LoggingFutureCallback(<span class="string">"NodeEnablerThread"</span>, LOG),nodeEnabledExecutor);</span><br><span class="line"></span><br><span class="line"><span class="comment">//751行</span></span><br><span class="line">Futures.addCallback(delayedTaskSchedulerFuture,</span><br><span class="line">    <span class="keyword">new</span> LoggingFutureCallback(<span class="string">"DelayedTaskSchedulerThread"</span>, LOG),delayedTaskSchedulerExecutor);</span><br><span class="line"></span><br><span class="line"><span class="comment">//755行</span></span><br><span class="line">Futures.addCallback(schedulerFuture, <span class="keyword">new</span> LoggingFutureCallback(<span class="string">"SchedulerThread"</span>, LOG),schedulerExecutor);</span><br></pre></td></tr></table></figure></div><ul><li>src\java\org\apache\hadoop\hive\ql\exec\tez\WorkloadManager.java</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1089行</span></span><br><span class="line">Futures.addCallback(future, FATAL_ERROR_CALLBACK, timeoutPool);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1923行</span></span><br><span class="line">Futures.addCallback(getFuture, <span class="keyword">this</span>,timeoutPool);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1977行</span></span><br><span class="line">Futures.addCallback(waitFuture, <span class="keyword">this</span>, timeoutPool);</span><br></pre></td></tr></table></figure></div><ul><li>src\test\org\apache\hadoop\hive\ql\exec\tez\SampleTezSessionState.java</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//121行</span></span><br><span class="line">Futures.addCallback(waitForAmRegFuture, <span class="keyword">new</span> FutureCallback&lt;Boolean&gt;() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(Boolean result)</span> </span>&#123;</span><br><span class="line">    future.set(session);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">    future.setException(t);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,timeoutPool);</span><br></pre></td></tr></table></figure></div></li><li><p>编译</p></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean package -Pdist -DskipTests -Dmaven.javadoc.skip=<span class="literal">true</span></span><br></pre></td></tr></table></figure></div><h1 id="Tez编译"><a href="#Tez编译" class="headerlink" title="Tez编译"></a>Tez编译</h1><ul><li><p>拉取源码</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/software/<span class="built_in">source</span></span><br><span class="line">git <span class="built_in">clone</span> https://git-wip-us.apache.org/repos/asf/tez.git</span><br></pre></td></tr></table></figure></div></li><li><p>安装Tez必要环境</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y protobuf protobuf-static protobuf-devel</span><br></pre></td></tr></table></figure></div></li><li><p>编译</p><p>查看编译说明，按照编译说明用下列命令编译</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> tez</span><br><span class="line">mvn clean package -Dhadoop.version=3.1.3 -Phadoop28 -P\!hadoop27 -DskipTests -Dmaven.javadoc.skip=<span class="literal">true</span></span><br></pre></td></tr></table></figure></div></li></ul><h1 id="Phoenix编译"><a href="#Phoenix编译" class="headerlink" title="Phoenix编译"></a>Phoenix编译</h1><ul><li>拉取源码</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/software/<span class="built_in">source</span></span><br><span class="line">git <span class="built_in">clone</span> https://git-wip-us.apache.org/repos/asf/phoenix.git</span><br></pre></td></tr></table></figure></div><ul><li>编译</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> phoenix</span><br><span class="line">mvn clean package -DskipTests -Dhbase.profile=2.2 -Dhbase.version=2.2.4</span><br></pre></td></tr></table></figure></div><h1 id="Spark编译"><a href="#Spark编译" class="headerlink" title="Spark编译"></a>Spark编译</h1><ul><li>去spark官网下载源码，解压到/opt/software/source</li><li>进入该目录，编译</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./dev/make-distribution.sh --name without-hive --tgz -Pyarn -Phadoop-3.1 -Dhadoop.version=3.1.3 -Pparquet-provided -Porc-provided -Phadoop-provided</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;源码编译通用步骤&quot;&gt;&lt;a href=&quot;#源码编译通用步骤&quot; class=&quot;headerlink&quot; title=&quot;源码编译通用步骤&quot;&gt;&lt;/a&gt;源码编译通用步骤&lt;/h1&gt;&lt;h2 id=&quot;一、搭建编译环境&quot;&gt;&lt;a href=&quot;#一、搭建编译环境&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="大数据" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="源码编译" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/"/>
    
    
      <category term="大数据" scheme="https://masteryang4.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="hive" scheme="https://masteryang4.github.io/tags/hive/"/>
    
      <category term="spark" scheme="https://masteryang4.github.io/tags/spark/"/>
    
      <category term="源码编译" scheme="https://masteryang4.github.io/tags/%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/"/>
    
      <category term="phoenix" scheme="https://masteryang4.github.io/tags/phoenix/"/>
    
      <category term="tez" scheme="https://masteryang4.github.io/tags/tez/"/>
    
  </entry>
  
  <entry>
    <title>HiveSQL之常用查询函数case</title>
    <link href="https://masteryang4.github.io/2020/05/26/HiveSQL%E4%B9%8B%E5%B8%B8%E7%94%A8%E6%9F%A5%E8%AF%A2%E5%87%BD%E6%95%B0case/"/>
    <id>https://masteryang4.github.io/2020/05/26/HiveSQL%E4%B9%8B%E5%B8%B8%E7%94%A8%E6%9F%A5%E8%AF%A2%E5%87%BD%E6%95%B0case/</id>
    <published>2020-05-26T15:53:58.000Z</published>
    <updated>2020-05-26T16:18:08.383Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关键词：CASE-WHEN-THEN-ELSE-END"><a href="#关键词：CASE-WHEN-THEN-ELSE-END" class="headerlink" title="关键词：CASE  WHEN  THEN  ELSE  END"></a>关键词：CASE  WHEN  THEN  ELSE  END</h1><h1 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h1><table><thead><tr><th>name</th><th>dept_id</th><th>sex</th></tr></thead><tbody><tr><td>悟空</td><td>A</td><td>男</td></tr><tr><td>大海</td><td>A</td><td>男</td></tr><tr><td>宋宋</td><td>B</td><td>男</td></tr><tr><td>凤姐</td><td>A</td><td>女</td></tr><tr><td>婷姐</td><td>B</td><td>女</td></tr><tr><td>婷婷</td><td>B</td><td>女</td></tr></tbody></table><h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>求出不同部门男女各多少人。结果如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A   2    1</span><br><span class="line">B   1    2</span><br></pre></td></tr></table></figure></div><h1 id="创建本地emp-sex-txt，导入数据"><a href="#创建本地emp-sex-txt，导入数据" class="headerlink" title="创建本地emp_sex.txt，导入数据"></a>创建本地emp_sex.txt，导入数据</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[ys@hadoop102 datas]$ vim emp_sex.txt</span><br><span class="line">悟空A男</span><br><span class="line">大海A男</span><br><span class="line">宋宋B男</span><br><span class="line">凤姐A女</span><br><span class="line">婷姐B女</span><br><span class="line">婷婷B女</span><br></pre></td></tr></table></figure></div><h1 id="创建hive表并导入数据"><a href="#创建hive表并导入数据" class="headerlink" title="创建hive表并导入数据"></a>创建hive表并导入数据</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp_sex(</span><br><span class="line"><span class="keyword">name</span> <span class="keyword">string</span>, </span><br><span class="line">dept_id <span class="keyword">string</span>, </span><br><span class="line">sex <span class="keyword">string</span>) </span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">"\t"</span>;</span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">'/opt/module/datas/emp_sex.txt'</span> <span class="keyword">into</span> <span class="keyword">table</span> emp_sex;</span><br></pre></td></tr></table></figure></div><h1 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">sql</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">  dept_id,</span><br><span class="line">  <span class="keyword">sum</span>(<span class="keyword">case</span> sex <span class="keyword">when</span> <span class="string">'男'</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) male_count,</span><br><span class="line">  <span class="keyword">sum</span>(<span class="keyword">case</span> sex <span class="keyword">when</span> <span class="string">'女'</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) female_count</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">  emp_sex</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span></span><br><span class="line">  dept_id;</span><br></pre></td></tr></table></figure></div><ul><li>首先注意CASE  WHEN  THEN  ELSE  END的缺一不可</li><li><strong>也要注意<code>sum</code>函数的用法，<code>sum(条件)</code>是经常会用到的方法！！！</strong><ul><li><strong>比如<code>sum(if XXX)</code>就常在HiveSQL里面使用。</strong></li><li>例如：<code>sum(if(dt=&#39;2020-05-27&#39;, order_count,0 )) order_count</code>，本质其实是一样的。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;关键词：CASE-WHEN-THEN-ELSE-END&quot;&gt;&lt;a href=&quot;#关键词：CASE-WHEN-THEN-ELSE-END&quot; class=&quot;headerlink&quot; title=&quot;关键词：CASE  WHEN  THEN  ELSE  END&quot;&gt;&lt;/a&gt;关
      
    
    </summary>
    
    
      <category term="大数据" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="hive" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/hive/"/>
    
    
      <category term="易错点" scheme="https://masteryang4.github.io/tags/%E6%98%93%E9%94%99%E7%82%B9/"/>
    
      <category term="大数据" scheme="https://masteryang4.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="hive" scheme="https://masteryang4.github.io/tags/hive/"/>
    
      <category term="SQL" scheme="https://masteryang4.github.io/tags/SQL/"/>
    
      <category term="hivesql" scheme="https://masteryang4.github.io/tags/hivesql/"/>
    
  </entry>
  
  <entry>
    <title>一段有趣的spark_aggregate代码</title>
    <link href="https://masteryang4.github.io/2020/05/26/%E4%B8%80%E6%AE%B5%E6%9C%89%E8%B6%A3%E7%9A%84spark-aggregate%E4%BB%A3%E7%A0%81/"/>
    <id>https://masteryang4.github.io/2020/05/26/%E4%B8%80%E6%AE%B5%E6%9C%89%E8%B6%A3%E7%9A%84spark-aggregate%E4%BB%A3%E7%A0%81/</id>
    <published>2020-05-26T14:18:30.000Z</published>
    <updated>2020-05-29T14:14:17.186Z</updated>
    
    <content type="html"><![CDATA[<p>看到了一段非常有趣的关于spark中aggregate算子的代码，需要很细心才能给出正确答案。</p><p>在这里和大家分享。</p><h1 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">TrySpark</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> conf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">"aggTest"</span>).setMaster(<span class="string">"local[*]"</span>)</span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(conf)</span><br><span class="line">    <span class="keyword">val</span> rdd = sc.makeRDD(<span class="type">Array</span>(<span class="string">"12"</span>, <span class="string">"234"</span>, <span class="string">"345"</span>, <span class="string">"4567"</span>), <span class="number">2</span>)</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">val</span> str: <span class="type">String</span> = rdd.aggregate(<span class="string">"0"</span>)((a, b) =&gt; <span class="type">Math</span>.max(a.length, b.length).toString, (x, y) =&gt; x + y)</span><br><span class="line">    println(str)</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">val</span> str1: <span class="type">String</span> = rdd.aggregate(<span class="string">""</span>)((a, b) =&gt; <span class="type">Math</span>.min(a.length, b.length).toString, (x, y) =&gt; x + y)</span><br><span class="line">    println(str1)</span><br><span class="line">      </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="前方高能"><a href="#前方高能" class="headerlink" title="前方高能"></a>前方高能</h1><p>输出结果1</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">043</span><br><span class="line">11</span><br></pre></td></tr></table></figure></div><p>输出结果2</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">034</span><br><span class="line">11</span><br></pre></td></tr></table></figure></div><p>惊不惊喜，刺不刺激（手动狗头）。</p><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>aggregate：行动算子，意为【聚合】</p><p>函数签名</p><blockquote><p>def aggregate<code>[U: ClassTag]</code>(zeroValue: U)(seqOp: (U, T) =&gt; U, combOp: (U, U) =&gt; U): U</p></blockquote><p>函数说明</p><blockquote><p>分区的数据通过<strong>初始值</strong>和<strong>分区内</strong>的数据进行聚合，然后再和<strong>初始值</strong>进行<strong>分区间</strong>的数据聚合</p><ul><li>第一个括号内的参数为初始值</li><li>第二个括号中<ul><li>第一个参数为分区内要执行的函数，初始值和分区内元素依次<strong>聚合</strong></li><li>第二个参数为分区间要执行的函数，初始值和分区间元素依次<strong>聚合</strong></li></ul></li></ul></blockquote><p>代码详解：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> rdd = sc.makeRDD(<span class="type">Array</span>(<span class="string">"12"</span>, <span class="string">"234"</span>, <span class="string">"345"</span>, <span class="string">"4567"</span>), <span class="number">2</span>)</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rdd.aggregate(<span class="string">"0"</span>)((a, b) =&gt; <span class="type">Math</span>.max(a.length, b.length).toString, (x, y) =&gt; x + y)</span><br></pre></td></tr></table></figure></div><ul><li><p>首先注意rdd是两个分区，”12”, “234”一个分区，”345”, “4567”一个分区</p></li><li><p>执行分区内函数<code>Math.max(a.length, b.length).toString</code></p><ul><li>分区一<ul><li>“0”，“12”执行函数，输出“2”，【注意：函数后面有个toString】<strong>【聚合：上一步输出作为下一步输入】</strong></li><li>“2”，”234”执行函数，最终输出“3”</li></ul></li><li>分区二<ul><li>“0”，“345” =&gt; “3”</li><li>“3”，”4567” =&gt; 最终 “4”</li></ul></li></ul></li><li><p>执行分区间函数<code>(x, y) =&gt; x + y</code>，其实就是一个字符串拼接，但是因为<strong>分区</strong>的原因</p><ul><li>不一定哪个分区先执行完，所以会出现两种情况的字符串拼接：“034” or “043”</li></ul></li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rdd.aggregate(<span class="string">""</span>)((a, b) =&gt; <span class="type">Math</span>.min(a.length, b.length).toString, (x, y) =&gt; x + y)</span><br></pre></td></tr></table></figure></div><ul><li><p>rdd是两个分区，”12”, “234”一个分区，”345”, “4567”一个分区</p></li><li><p>执行分区内函数<code>Math.min(a.length, b.length).toString</code></p><ul><li>分区一<ul><li>“”，“12”执行函数，输出“0”，【注意：函数后面有个toString】<strong>【聚合：上一步输出作为下一步输入】</strong></li><li>“0”，”234”执行函数，最终输出“1”，<strong>【注意：“0”的长度是1】</strong></li></ul></li><li>分区二<ul><li>“”，“345” =&gt; “0”</li><li>“0”，”4567” =&gt; 最终 “1”</li></ul></li></ul></li><li><p>执行分区间函数<code>(x, y) =&gt; x + y</code>，字符串拼接，“”+“1”+“1” =&gt; “11”</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;看到了一段非常有趣的关于spark中aggregate算子的代码，需要很细心才能给出正确答案。&lt;/p&gt;
&lt;p&gt;在这里和大家分享。&lt;/p&gt;
&lt;h1 id=&quot;代码示例&quot;&gt;&lt;a href=&quot;#代码示例&quot; class=&quot;headerlink&quot; title=&quot;代码示例&quot;&gt;&lt;/a&gt;代码
      
    
    </summary>
    
    
      <category term="大数据" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="spark" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/spark/"/>
    
    
      <category term="易错点" scheme="https://masteryang4.github.io/tags/%E6%98%93%E9%94%99%E7%82%B9/"/>
    
      <category term="大数据" scheme="https://masteryang4.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="面试" scheme="https://masteryang4.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="spark" scheme="https://masteryang4.github.io/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>spark常用算子join</title>
    <link href="https://masteryang4.github.io/2020/05/25/spark%E5%B8%B8%E7%94%A8%E7%AE%97%E5%AD%90join/"/>
    <id>https://masteryang4.github.io/2020/05/25/spark%E5%B8%B8%E7%94%A8%E7%AE%97%E5%AD%90join/</id>
    <published>2020-05-25T11:52:38.000Z</published>
    <updated>2020-05-25T12:12:02.270Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>JOIN函数签名</p><blockquote><p>def join<code>[W]</code>(other: RDD[(K, W)]): RDD[(K, (V, W))]</p></blockquote><p>函数说明</p><ul><li>spark RDD <strong>转换算子</strong></li><li>(对照函数签名)在类型为(K,V)和(K,W)的RDD上调用，返回一个相同key对应的所有元素连接在一起的(K,(V,W))的RDD</li></ul><h1 id="重点示例"><a href="#重点示例" class="headerlink" title="重点示例"></a>重点示例</h1><ul><li>join</li><li>leftOuterJoin</li><li>rightOuterJoin</li><li>fullOuterJoin</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">SparkConf</span>, <span class="type">SparkContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">JoinTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.创建SparkConf</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">"JoinTest"</span>).setMaster(<span class="string">"local[*]"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.创建SparkContext</span></span><br><span class="line">    <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(sparkConf)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.创建两个RDD</span></span><br><span class="line">    <span class="keyword">val</span> rdd1: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = sc.makeRDD(<span class="type">Array</span>((<span class="string">"a"</span>, <span class="number">1</span>), (<span class="string">"a"</span>, <span class="number">2</span>), (<span class="string">"b"</span>, <span class="number">1</span>), (<span class="string">"c"</span>, <span class="number">1</span>)))</span><br><span class="line">    <span class="keyword">val</span> rdd2: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = sc.makeRDD(<span class="type">Array</span>((<span class="string">"a"</span>, <span class="number">1</span>), (<span class="string">"b"</span>, <span class="number">1</span>), (<span class="string">"b"</span>, <span class="number">2</span>), (<span class="string">"d"</span>, <span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.测试各种JOIN【 注意返回值 】</span></span><br><span class="line">    <span class="keyword">val</span> result1: <span class="type">RDD</span>[(<span class="type">String</span>, (<span class="type">Int</span>, <span class="type">Int</span>))] = rdd1.join(rdd2)</span><br><span class="line">    <span class="keyword">val</span> result2: <span class="type">RDD</span>[(<span class="type">String</span>, (<span class="type">Int</span>, <span class="type">Option</span>[<span class="type">Int</span>]))] = rdd1.leftOuterJoin(rdd2)</span><br><span class="line">    <span class="keyword">val</span> result3: <span class="type">RDD</span>[(<span class="type">String</span>, (<span class="type">Option</span>[<span class="type">Int</span>], <span class="type">Int</span>))] = rdd1.rightOuterJoin(rdd2)</span><br><span class="line">    <span class="keyword">val</span> result4: <span class="type">RDD</span>[(<span class="type">String</span>, (<span class="type">Option</span>[<span class="type">Int</span>], <span class="type">Option</span>[<span class="type">Int</span>]))] = rdd1.fullOuterJoin(rdd2)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.打印</span></span><br><span class="line">    result1.foreach(println)</span><br><span class="line">    println(<span class="string">"======================&gt;&gt;&gt;"</span>)</span><br><span class="line">    result2.foreach(println)</span><br><span class="line">    println(<span class="string">"======================&gt;&gt;&gt;"</span>)</span><br><span class="line">    result3.foreach(println)</span><br><span class="line">    println(<span class="string">"======================&gt;&gt;&gt;"</span>)</span><br><span class="line">    result4.foreach(println)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6.关闭连接</span></span><br><span class="line">    sc.stop()</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>输出结果：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">(b,(1,1))</span><br><span class="line">(a,(1,1))</span><br><span class="line">(a,(2,1))</span><br><span class="line">(b,(1,2))</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;</span><br><span class="line">(c,(1,None))</span><br><span class="line">(a,(1,Some(1)))</span><br><span class="line">(a,(2,Some(1)))</span><br><span class="line">(b,(1,Some(1)))</span><br><span class="line">(b,(1,Some(2)))</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;</span><br><span class="line">(d,(None,1))</span><br><span class="line">(a,(Some(1),1))</span><br><span class="line">(a,(Some(2),1))</span><br><span class="line">(b,(Some(1),1))</span><br><span class="line">(b,(Some(1),2))</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&gt;&gt;</span><br><span class="line">(d,(None,Some(1)))</span><br><span class="line">(c,(Some(1),None))</span><br><span class="line">(a,(Some(1),Some(1)))</span><br><span class="line">(a,(Some(2),Some(1)))</span><br><span class="line">(b,(Some(1),Some(1)))</span><br><span class="line">(b,(Some(1),Some(2)))</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简述&quot;&gt;&lt;a href=&quot;#简述&quot; class=&quot;headerlink&quot; title=&quot;简述&quot;&gt;&lt;/a&gt;简述&lt;/h1&gt;&lt;p&gt;JOIN函数签名&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;def join&lt;code&gt;[W]&lt;/code&gt;(other: RDD[(K, W
      
    
    </summary>
    
    
      <category term="大数据" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="spark" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/spark/"/>
    
    
      <category term="易错点" scheme="https://masteryang4.github.io/tags/%E6%98%93%E9%94%99%E7%82%B9/"/>
    
      <category term="大数据" scheme="https://masteryang4.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="spark" scheme="https://masteryang4.github.io/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>scala样例类转换成为JSON字符串</title>
    <link href="https://masteryang4.github.io/2020/05/25/scala%E6%A0%B7%E4%BE%8B%E7%B1%BB%E8%BD%AC%E6%8D%A2%E6%88%90%E4%B8%BAJSON%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://masteryang4.github.io/2020/05/25/scala%E6%A0%B7%E4%BE%8B%E7%B1%BB%E8%BD%AC%E6%8D%A2%E6%88%90%E4%B8%BAJSON%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2020-05-25T11:08:21.000Z</published>
    <updated>2020-05-26T01:01:19.891Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JSON常用方法"><a href="#JSON常用方法" class="headerlink" title="JSON常用方法"></a>JSON常用方法</h1><p>Java中并没有内置JSON的解析，因此使用JSON需要借助第三方类库。</p><p>几个常用的 JSON 解析类库：</p><ul><li><a href="https://github.com/google/gson" target="_blank" rel="noopener">Gson</a>: 谷歌开发的 JSON 库，功能十分全面。</li><li><a href="https://github.com/alibaba/fastjson" target="_blank" rel="noopener">FastJson</a>: 阿里巴巴开发的 JSON 库，性能十分优秀。</li><li><a href="https://github.com/FasterXML/jackson" target="_blank" rel="noopener">Jackson</a>: 社区十分活跃且更新速度很快。</li></ul><p>maven依赖：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>JSON 对象与字符串的相互转化</p><table><thead><tr><th align="left">方法</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left"><code>JSON.parseObject()</code></td><td align="left">从字符串解析 JSON 对象</td></tr><tr><td align="left">JSON.parseArray()</td><td align="left">从字符串解析 JSON 数组</td></tr><tr><td align="left"><code>JSON.toJSONString(obj/array)</code></td><td align="left">将 JSON 对象或 JSON 数组转化为字符串</td></tr></tbody></table><p>示例：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">java</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JSONTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//从字符串解析JSON对象</span></span><br><span class="line">        JSONObject obj = JSON.parseObject(<span class="string">"&#123;\"name\":\"ys\"&#125;"</span>);</span><br><span class="line">        System.out.println(obj); <span class="comment">//&#123;"name":"ys"&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//将JSON对象转化为字符串</span></span><br><span class="line">        String objStr = JSON.toJSONString(obj);</span><br><span class="line">        System.out.println(objStr); <span class="comment">//&#123;"name":"ys"&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="Scala样例类转换成JSON字符串"><a href="#Scala样例类转换成JSON字符串" class="headerlink" title="Scala样例类转换成JSON字符串"></a>Scala样例类转换成JSON字符串</h1><p>将<strong>Scala样例类</strong>转换成为JSON字符串，JSON.toJSONString(obj)会失效，所以使用如下方法：</p><p>maven依赖（json4s —&gt; json for scala）：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">xml</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.json4s<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>json4s-native_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.json4s.native.<span class="type">Serialization</span></span><br><span class="line"><span class="keyword">implicit</span> <span class="keyword">val</span> formats=org.json4s.<span class="type">DefaultFormats</span> <span class="comment">//隐式转换</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> orderInfoJson: <span class="type">String</span> = <span class="type">Serialization</span>.write(orderInfo)</span><br></pre></td></tr></table></figure></div><p>示例</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.&#123;<span class="type">JSON</span>, <span class="type">JSONObject</span>&#125;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.bean.<span class="type">UserInfo</span></span><br><span class="line"><span class="keyword">import</span> org.json4s.native.<span class="type">Serialization</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">JsonStrTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> userInfo = <span class="type">UserInfo</span>(<span class="string">"1001"</span>,<span class="string">"name1"</span>,<span class="string">"5"</span>,<span class="string">"2020-05-25"</span>,<span class="string">"male"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">implicit</span> <span class="keyword">val</span> formats = org.json4s.<span class="type">DefaultFormats</span></span><br><span class="line">      </span><br><span class="line">    <span class="comment">//println(JSON.toJSONString(userInfo)) //报错</span></span><br><span class="line">      </span><br><span class="line">    <span class="keyword">val</span> str = <span class="type">Serialization</span>.write(userInfo)</span><br><span class="line">    println(str)</span><br><span class="line">    <span class="comment">// &#123;"id":"1001","login_name":"name1","user_level":"5","birthday":"2020-05-25","gender":"male"&#125;</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">val</span> nObject: <span class="type">JSONObject</span> = <span class="type">JSON</span>.parseObject(str)  <span class="comment">//正常解析</span></span><br><span class="line">    println(nObject)</span><br><span class="line">    <span class="comment">// &#123;"birthday":"2020-05-25","login_name":"name1","gender":"male","user_level":"5","id":"1001"&#125;</span></span><br><span class="line">        </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>UserInfo.scala</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">scala</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span>(<span class="params">id:<span class="type">String</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">                    login_name:<span class="type">String</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">                    user_level:<span class="type">String</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">                    birthday:<span class="type">String</span>,</span></span></span><br><span class="line"><span class="class"><span class="params">                    gender:<span class="type">String</span></span>)</span></span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JSON常用方法&quot;&gt;&lt;a href=&quot;#JSON常用方法&quot; class=&quot;headerlink&quot; title=&quot;JSON常用方法&quot;&gt;&lt;/a&gt;JSON常用方法&lt;/h1&gt;&lt;p&gt;Java中并没有内置JSON的解析，因此使用JSON需要借助第三方类库。&lt;/p&gt;
&lt;p&gt;几个
      
    
    </summary>
    
    
      <category term="大数据" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="scala" scheme="https://masteryang4.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/scala/"/>
    
    
      <category term="大数据" scheme="https://masteryang4.github.io/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
      <category term="scala" scheme="https://masteryang4.github.io/tags/scala/"/>
    
  </entry>
  
</feed>
